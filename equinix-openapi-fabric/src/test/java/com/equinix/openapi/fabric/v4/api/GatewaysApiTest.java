/*
 * Equinix Fabric API v4
 * Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>
 *
 * The version of the OpenAPI document: 4.8
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.ApiException;
import com.equinix.openapi.fabric.v4.model.Error;
import com.equinix.openapi.fabric.v4.model.FabricGateway;
import com.equinix.openapi.fabric.v4.model.FabricGatewayChangeOperation;
import com.equinix.openapi.fabric.v4.model.FabricGatewayPackage;
import com.equinix.openapi.fabric.v4.model.FabricGatewayPostRequest;
import com.equinix.openapi.fabric.v4.model.FabricGatewaySearchRequest;
import com.equinix.openapi.fabric.v4.model.GatewayActionRequest;
import com.equinix.openapi.fabric.v4.model.GatewayActionResponse;
import com.equinix.openapi.fabric.v4.model.GatewayActionState;
import com.equinix.openapi.fabric.v4.model.GatewayPackageCode;
import com.equinix.openapi.fabric.v4.model.PackageResponse;
import com.equinix.openapi.fabric.v4.model.SearchResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GatewaysApi
 */
@Disabled
public class GatewaysApiTest {

    private final GatewaysApi api = new GatewaysApi();

    /**
     * Create Gateway
     *
     * This API provides capability to create user&#39;s Fabric Gateways
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGatewayTest() throws ApiException {
        FabricGatewayPostRequest fabricGatewayPostRequest = null;
        FabricGateway response = api.createGateway(fabricGatewayPostRequest);
        // TODO: test validations
    }

    /**
     * Route table actions
     *
     * This API provides capability to refresh route table and bgp session summary information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGatewayActionTest() throws ApiException {
        UUID gatewayId = null;
        GatewayActionRequest gatewayActionRequest = null;
        GatewayActionResponse response = api.createGatewayAction(gatewayId, gatewayActionRequest);
        // TODO: test validations
    }

    /**
     * Delete Gateway
     *
     * This API provides capability to delete user&#39;s Fabric Gateway
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGatewayByUuidTest() throws ApiException {
        UUID gatewayId = null;
        api.deleteGatewayByUuid(gatewayId);
        // TODO: test validations
    }

    /**
     * Get actions
     *
     * This API provides capability to fetch action status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGatewayActionsTest() throws ApiException {
        UUID gatewayId = null;
        GatewayActionState state = null;
        GatewayActionResponse response = api.getGatewayActions(gatewayId, state);
        // TODO: test validations
    }

    /**
     * Get Gateway
     *
     * This API provides capability to retrieve user&#39;s Fabric Gateway
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGatewayByUuidTest() throws ApiException {
        UUID gatewayId = null;
        FabricGateway response = api.getGatewayByUuid(gatewayId);
        // TODO: test validations
    }

    /**
     * Get Package Details
     *
     * This API provides capability to retrieve user&#39;s Fabric Gateway Package Details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGatewayPackageByCodeTest() throws ApiException {
        GatewayPackageCode gatewayPackageCode = null;
        FabricGatewayPackage response = api.getGatewayPackageByCode(gatewayPackageCode);
        // TODO: test validations
    }

    /**
     * List Packages
     *
     * This API provides capability to retrieve user&#39;s Fabric Gateway Packages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGatewayPackagesTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        PackageResponse response = api.getGatewayPackages(offset, limit);
        // TODO: test validations
    }

    /**
     * Search Gateway
     *
     * The API provides capability to get list of user&#39;s Fabric Gateways using search criteria, including optional filtering, pagination and sorting
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchGatewaysTest() throws ApiException {
        FabricGatewaySearchRequest fabricGatewaySearchRequest = null;
        SearchResponse response = api.searchGateways(fabricGatewaySearchRequest);
        // TODO: test validations
    }

    /**
     * Update Gateway
     *
     * This API provides capability to update user&#39;s Fabric Gateway
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGatewayByUuidTest() throws ApiException {
        UUID gatewayId = null;
        List<FabricGatewayChangeOperation> fabricGatewayChangeOperation = null;
        FabricGateway response = api.updateGatewayByUuid(gatewayId, fabricGatewayChangeOperation);
        // TODO: test validations
    }

}
