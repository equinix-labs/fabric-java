/*
 * Equinix Fabric API v4
 * Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import com.equinix.openapi.fabric.v4.model.AccessPointType;
import com.equinix.openapi.fabric.v4.model.CloudRouter;
import com.equinix.openapi.fabric.v4.model.ModelInterface;
import com.equinix.openapi.fabric.v4.model.PeeringType;
import com.equinix.openapi.fabric.v4.model.SimplifiedAccount;
import com.equinix.openapi.fabric.v4.model.SimplifiedLinkProtocol;
import com.equinix.openapi.fabric.v4.model.SimplifiedLocation;
import com.equinix.openapi.fabric.v4.model.SimplifiedNetwork;
import com.equinix.openapi.fabric.v4.model.SimplifiedPort;
import com.equinix.openapi.fabric.v4.model.SimplifiedServiceProfile;
import com.equinix.openapi.fabric.v4.model.VirtualDevice;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for AccessPoint
 */
public class AccessPointTest {
    private final AccessPoint model = new AccessPoint();

    /**
     * Model tests for AccessPoint
     */
    @Test
    public void testAccessPoint() {
        // TODO: test AccessPoint
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'account'
     */
    @Test
    public void accountTest() {
        // TODO: test account
    }

    /**
     * Test the property 'location'
     */
    @Test
    public void locationTest() {
        // TODO: test location
    }

    /**
     * Test the property 'port'
     */
    @Test
    public void portTest() {
        // TODO: test port
    }

    /**
     * Test the property 'profile'
     */
    @Test
    public void profileTest() {
        // TODO: test profile
    }

    /**
     * Test the property 'router'
     */
    @Test
    public void routerTest() {
        // TODO: test router
    }

    /**
     * Test the property 'linkProtocol'
     */
    @Test
    public void linkProtocolTest() {
        // TODO: test linkProtocol
    }

    /**
     * Test the property 'virtualDevice'
     */
    @Test
    public void virtualDeviceTest() {
        // TODO: test virtualDevice
    }

    /**
     * Test the property '_interface'
     */
    @Test
    public void _interfaceTest() {
        // TODO: test _interface
    }

    /**
     * Test the property 'network'
     */
    @Test
    public void networkTest() {
        // TODO: test network
    }

    /**
     * Test the property 'sellerRegion'
     */
    @Test
    public void sellerRegionTest() {
        // TODO: test sellerRegion
    }

    /**
     * Test the property 'peeringType'
     */
    @Test
    public void peeringTypeTest() {
        // TODO: test peeringType
    }

    /**
     * Test the property 'authenticationKey'
     */
    @Test
    public void authenticationKeyTest() {
        // TODO: test authenticationKey
    }

    /**
     * Test the property 'providerConnectionId'
     */
    @Test
    public void providerConnectionIdTest() {
        // TODO: test providerConnectionId
    }

}
