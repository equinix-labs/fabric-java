/*
 * Equinix Fabric API v4
 * Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>
 *
 * The version of the OpenAPI document: 4.8
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import com.equinix.openapi.fabric.v4.model.Code;
import com.equinix.openapi.fabric.v4.model.PackageChangeLog;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for FabricGatewayPackage
 */
public class FabricGatewayPackageTest {
    private final FabricGatewayPackage model = new FabricGatewayPackage();

    /**
     * Model tests for FabricGatewayPackage
     */
    @Test
    public void testFabricGatewayPackage() {
        // TODO: test FabricGatewayPackage
    }

    /**
     * Test the property 'href'
     */
    @Test
    public void hrefTest() {
        // TODO: test href
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'code'
     */
    @Test
    public void codeTest() {
        // TODO: test code
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'totalIPv4RoutesMax'
     */
    @Test
    public void totalIPv4RoutesMaxTest() {
        // TODO: test totalIPv4RoutesMax
    }

    /**
     * Test the property 'totalIPv6RoutesMax'
     */
    @Test
    public void totalIPv6RoutesMaxTest() {
        // TODO: test totalIPv6RoutesMax
    }

    /**
     * Test the property 'staticIPv4RoutesMax'
     */
    @Test
    public void staticIPv4RoutesMaxTest() {
        // TODO: test staticIPv4RoutesMax
    }

    /**
     * Test the property 'staticIPv6RoutesMax'
     */
    @Test
    public void staticIPv6RoutesMaxTest() {
        // TODO: test staticIPv6RoutesMax
    }

    /**
     * Test the property 'naclsMax'
     */
    @Test
    public void naclsMaxTest() {
        // TODO: test naclsMax
    }

    /**
     * Test the property 'naclRulesMax'
     */
    @Test
    public void naclRulesMaxTest() {
        // TODO: test naclRulesMax
    }

    /**
     * Test the property 'haSupported'
     */
    @Test
    public void haSupportedTest() {
        // TODO: test haSupported
    }

    /**
     * Test the property 'routeFilterSupported'
     */
    @Test
    public void routeFilterSupportedTest() {
        // TODO: test routeFilterSupported
    }

    /**
     * Test the property 'natType'
     */
    @Test
    public void natTypeTest() {
        // TODO: test natType
    }

    /**
     * Test the property 'maxConnLimit'
     */
    @Test
    public void maxConnLimitTest() {
        // TODO: test maxConnLimit
    }

    /**
     * Test the property 'maxGwLimit'
     */
    @Test
    public void maxGwLimitTest() {
        // TODO: test maxGwLimit
    }

    /**
     * Test the property 'maxBwLimit'
     */
    @Test
    public void maxBwLimitTest() {
        // TODO: test maxBwLimit
    }

    /**
     * Test the property 'changeLog'
     */
    @Test
    public void changeLogTest() {
        // TODO: test changeLog
    }

}
