/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.ApiClient;
import com.equinix.openapi.fabric.v4.api.dto.TokenRequestDto;
import com.equinix.openapi.fabric.v4.api.dto.TokenResponseDto;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.ErrorLoggingFilter;
import io.restassured.filter.log.RequestLoggingFilter;
import io.restassured.filter.log.ResponseLoggingFilter;
import io.restassured.http.Method;

import java.util.function.Supplier;

import static com.equinix.openapi.fabric.JacksonObjectMapper.jackson;
import static io.restassured.config.ObjectMapperConfig.objectMapperConfig;
import static io.restassured.config.RestAssuredConfig.config;
import static java.util.Objects.isNull;

/**
 * API tests for RouteFiltersApi
 */
public class TokenGenerator {

    public static ApiClient getApiClient() {
        return isNull(apiClient) ? generate() : apiClient;
    }

    private static ApiClient generate() {
        String baseUrl = System.getProperty("envUrl");

        TokenRequestDto tokenRequestDto = new TokenRequestDto()
                .setClientId(System.getProperty("clientId"))
                .setClientSecret(System.getProperty("clientSecret"))
                .setUserPassword(System.getProperty("userPassword"))
                .setUserName(System.getProperty("userName"));

        Supplier<RequestSpecBuilder> reqSpecSupplier = () -> new RequestSpecBuilder()
                .setConfig(config().objectMapperConfig(objectMapperConfig().defaultObjectMapper(jackson())))
                .addFilter(new ErrorLoggingFilter())
                .setBaseUri(baseUrl)
                .setBasePath("/oauth2/v1/token");

        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        reqSpec.setBody(tokenRequestDto);

        TokenResponseDto tokenResponseDto =
                RestAssured.given().spec(reqSpec.build()).expect().when().request(Method.POST).as(TokenResponseDto.class);

        return ApiClient.api(ApiClient.Config.apiConfig().reqSpecSupplier(
                () -> new RequestSpecBuilder()
                        .setConfig(config().objectMapperConfig(objectMapperConfig().defaultObjectMapper(jackson())))
                        .addHeader("Authorization", "Bearer " + tokenResponseDto.getAccessToken())
                        .addFilter(new RequestLoggingFilter())
                        .addFilter(new ResponseLoggingFilter())
                        .addFilter(new ErrorLoggingFilter())
                        .setBaseUri(baseUrl)));
    }    public static ApiClient apiClient = getApiClient();


}
