/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.ApiException;
import com.equinix.openapi.fabric.v4.api.dto.users.UserResources;
import com.equinix.openapi.fabric.v4.api.dto.users.UsersItem;
import com.equinix.openapi.fabric.v4.model.*;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import java.util.UUID;

import static com.equinix.openapi.fabric.v4.api.CloudRoutersApiTest.removeCloudRouters;
import static com.equinix.openapi.fabric.v4.api.ConnectionsApiTest.createConnectionFCR2ToPort;
import static com.equinix.openapi.fabric.v4.api.ConnectionsApiTest.removeConnections;
import static com.equinix.openapi.fabric.v4.api.helpers.Apis.*;
import static com.equinix.openapi.fabric.v4.api.helpers.TokenGenerator.users;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * API tests for RoutingProtocolsApi
 */
public class RoutingProtocolsApiTest {
    private static final UsersItem.UserName userName = UsersItem.UserName.PANTHERS_FCR;

    public static void removeRoutingInstances(UsersItem.UserName userName) {
        users.get(userName).getUserResources().getRoutingProtocolsUuid().forEach(RoutingProtocolsApiTest::deleteRoutingProtocol);
    }

    @BeforeAll
    public static void setUp() {
        setUserName(userName);
    }

    @AfterAll
    public static void removeResources() {
        try {
            Thread.sleep(15000);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
        removeRoutingInstances(userName);
        removeConnections(userName);
        removeCloudRouters(userName);
    }

    /**
     * Successful operation
     */
    @Test
    public void createConnectionRoutingProtocol() throws ApiException {
        Connection connection = createConnectionFCR2ToPort();
        String ipDirect = "192.68.100.1/20";

        RoutingProtocolBase routingProtocolBaseDIRECT = new RoutingProtocolBase(new RoutingProtocolDirectType().type(RoutingProtocolDirectType.TypeEnum.DIRECT).directIpv4(new DirectConnectionIpv4().equinixIfaceIp(ipDirect)));

        try {
            RoutingProtocolData response = routingProtocolsApi.createConnectionRoutingProtocol(connection.getUuid(), routingProtocolBaseDIRECT);
            waitForDirectTypeIsProvisioned(response.getRoutingProtocolDirectData().getUuid(), connection.getUuid());
        } catch (Exception e) {

        }

        assertEquals(202, connectionsApi.getApiClient().getStatusCode());

        String ipBGP = "192.68.100.105";

        RoutingProtocolBase routingProtocolBaseBGP = new RoutingProtocolBase(new RoutingProtocolBGPType().type(RoutingProtocolBGPType.TypeEnum.BGP).bgpIpv4(new BGPConnectionIpv4().customerPeerIp(ipBGP).enabled(true).outboundASPrependCount(0L)).customerAsn(1245L).asOverrideEnabled(false).bfd(new RoutingProtocolBFD().enabled(false)));

        try {
            RoutingProtocolData response = routingProtocolsApi.createConnectionRoutingProtocol(connection.getUuid(), routingProtocolBaseBGP);
            waitForBGPTypeIsProvisioned(response.getRoutingProtocolBGPData().getUuid(), connection.getUuid());
        } catch (Exception e) {

        }

        assertEquals(202, connectionsApi.getApiClient().getStatusCode());
    }

    public static void deleteRoutingProtocol(UserResources.RoutingProtocolDto routingProtocolDto) {
        try {
            routingProtocolsApi.deleteConnectionRoutingProtocolByUuid(routingProtocolDto.getRoutingInstanceUuid(), String.valueOf(routingProtocolDto.getConnectionUuid()));
            assertEquals(202, routingProtocolsApi.getApiClient().getStatusCode());
        } catch (ApiException e) {
            throw new RuntimeException(e);
        }
    }

    private static void waitForDirectTypeIsProvisioned(UUID routingProtocolUuid, String connectionUuid) throws ApiException {
        boolean result = false;
        RoutingProtocolDirectData.StateEnum currentState = null;
        for (int i = 0; i < 5; i++) {
            RoutingProtocolData routingProtocolData = routingProtocolsApi.getConnectionRoutingProtocolByUuid(routingProtocolUuid, connectionUuid);
            currentState = routingProtocolData.getRoutingProtocolDirectData().getState();

            if (currentState.equals(RoutingProtocolDirectData.StateEnum.PROVISIONED)) {
                result = true;
                break;
            }
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }

        assertTrue(result, "Routing Protocol has not reached the expected state: " + RoutingProtocolDirectData.StateEnum.PROVISIONED + " current state: " + currentState.getValue() + " for connection " + "uuid " + connectionUuid);
    }

    private static void waitForBGPTypeIsProvisioned(UUID routingProtocolUuid, String connectionUuid) throws ApiException {
        boolean result = false;
        RoutingProtocolBGPData.StateEnum currentState = null;
        for (int i = 0; i < 5; i++) {
            RoutingProtocolData routingProtocolData = routingProtocolsApi.getConnectionRoutingProtocolByUuid(routingProtocolUuid, connectionUuid);
            currentState = routingProtocolData.getRoutingProtocolBGPData().getState();

            if (currentState.equals(RoutingProtocolBGPData.StateEnum.PROVISIONED)) {
                result = true;
                break;
            }
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }

        assertTrue(result, "Routing Protocol has not reached the expected state: " + RoutingProtocolBGPData.StateEnum.PROVISIONED + " current state: " + currentState.getValue() + " for connection " + "uuid " + connectionUuid);
    }
}
