/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.v4.api.dto.UserDto;
import com.equinix.openapi.fabric.v4.api.dto.port.PortDto;
import com.equinix.openapi.fabric.v4.model.*;
import io.restassured.response.Response;
import org.apache.http.HttpStatus;
import org.junit.AfterClass;
import org.junit.Ignore;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.UUID;
import java.util.stream.Collectors;

import static java.util.Collections.singletonList;
import static org.junit.Assert.assertEquals;

/**
 * API tests for ConnectionsApi
 */
@Ignore
public class ConnectionsApiTest {
    private static final List<String> connectionsToDelete = new ArrayList<>();
    private static ConnectionsApi api = TokenGenerator.getApiClient().connections();

    public static void removeConnections() {
        connectionsToDelete.forEach(ConnectionsApiTest::deleteConnection);
    }

    @AfterClass
    public static void removeResources() {
        removeConnections();
        CloudRoutersApiTest.removeCloudRouters();
    }

    @Test
    public void createConnectionPort2SP() {
        Connection connection = createPort2SpConnection();
        connectionsToDelete.add(connection.getUuid());
        waitForConnectionIsInState(connection.getUuid(), EquinixStatus.PENDING_INTERFACE_CONFIGURATION);
    }

    @Test
    public void createConnectionFCR2Port() {
        CloudRouter cloudRouter = new CloudRoutersApiTest().createRouter();

        Port port = PortsApiTest.getPorts().as(AllPortsResponse.class).getData().stream()
                .filter(p -> p.getName().contains("Dot1q"))
                .filter(p -> p.getLocation().getMetroCode().equals(cloudRouter.getLocation().getMetroCode()))
                .findFirst().get();

        UserDto userDto = (UserDto) Utils.getEnvData(Utils.EnvVariable.TEST_DATA_UAT_FCR_USER);

        ConnectionPostRequest connectionPostRequest = getDefaultConnectionRequest("panthers-con-fcr-2-port")
                .type(ConnectionType.IP_VC)
                .project(new Project().projectId(userDto.getProjectId()))
                .aSide(new ConnectionSide().accessPoint(
                        new AccessPoint()
                                .type(AccessPointType.CLOUD_ROUTER)
                                .router(new CloudRouter().uuid(cloudRouter.getUuid()))));

        Response response = null;

        for (int i = 0; i < 3; i++) {
            int tag = new Random().nextInt(4000);
            connectionPostRequest.zSide(new ConnectionSide().accessPoint(
                    new AccessPoint()
                            .type(AccessPointType.COLO)
                            .port(new SimplifiedPort().uuid(port.getUuid()))
                            .linkProtocol(new SimplifiedLinkProtocol()
                                    .type(LinkProtocolType.DOT1Q)
                                    .vlanTag(tag))));

            response = api.createConnection()
                    .body(connectionPostRequest)
                    .execute(r -> r);

            if (response.getStatusCode() == HttpStatus.SC_CREATED) {
                break;
            }
        }

        assertEquals(HttpStatus.SC_CREATED, response.getStatusCode());
        Connection connection = response.as(Connection.class);
        connectionsToDelete.add(connection.getUuid());
        waitForConnectionIsInState(connection.getUuid(), EquinixStatus.PENDING_INTERFACE_CONFIGURATION);
    }

    @Test
    public void createConnectionPort2Port() {
        List<Port> port = PortsApiTest.getPorts().as(AllPortsResponse.class).getData().stream()
                .filter(p -> p.getName().contains("Dot1q"))
                .collect(Collectors.toList());

        Response response = null;

        for (int i = 0; i < 3; i++) {
            int tagAside = new Random().nextInt(4000);
            int tagZside = new Random().nextInt(4000);

            ConnectionPostRequest connectionPostRequest = getDefaultConnectionRequest("panhters-con-port-2-port")
                    .type(ConnectionType.EVPL_VC)

                    .redundancy(new ConnectionRedundancy().priority(ConnectionPriority.PRIMARY))
                    .aSide(new ConnectionSide().accessPoint(
                            new AccessPoint()
                                    .type(AccessPointType.COLO)
                                    .port(new SimplifiedPort()
                                            .uuid(port.get(0).getUuid()))
                                    .linkProtocol(new SimplifiedLinkProtocol()
                                            .type(LinkProtocolType.DOT1Q).vlanTag(tagAside))))
                    .zSide(new ConnectionSide().accessPoint(
                            new AccessPoint()
                                    .type(AccessPointType.COLO)
                                    .port(new SimplifiedPort()
                                            .uuid(port.get(1).getUuid()))
                                    .linkProtocol(new SimplifiedLinkProtocol()
                                            .type(LinkProtocolType.DOT1Q)
                                            .vlanTag(tagZside))));

            response = api.createConnection()
                    .body(connectionPostRequest)
                    .execute(r -> r);

            if (response.getStatusCode() == HttpStatus.SC_CREATED) {
                break;
            }
        }

        assertEquals(HttpStatus.SC_CREATED, response.getStatusCode());
        Connection connection = response.as(Connection.class);
        connectionsToDelete.add(connection.getUuid());
        waitForConnectionIsInState(connection.getUuid(), EquinixStatus.PROVISIONED);
    }

    /**
     * Successful operation
     */
    @Test
    public void getConnectionByUuid() {
        Response searchResponse = getConnections();
        ConnectionSearchResponse connectionSearchResponse = searchResponse.as(ConnectionSearchResponse.class);
        Connection randomConnection = connectionSearchResponse.getData().get(new Random().nextInt(connectionSearchResponse.getData().size()));

        Response response = api.getConnectionByUuid().connectionIdPath(randomConnection.getUuid()).execute(r -> r);

        Connection connection = response.as(Connection.class);

        assertEquals(HttpStatus.SC_OK, response.getStatusCode());
        assertEquals(randomConnection.getUuid(), connection.getUuid());
        assertEquals(randomConnection.getName(), connection.getName());
    }

    /**
     * Delete Connection Request
     */
    @Test
    public void deleteConnectionByUuid() {
        Connection connection = createPort2SpConnection();
        Response response = api.deleteConnectionByUuid()
                .connectionIdPath(connection.getUuid()).execute(r -> r);
        waitForConnectionIsInState(connection.getUuid(), EquinixStatus.PENDING_INTERFACE_CONFIGURATION);
        assertEquals(HttpStatus.SC_ACCEPTED, response.getStatusCode());
    }

    /**
     * Successful operation
     */
    @Test
    public void updateConnectionByUuid() {
        Connection connection = createPort2SpConnection();
        connectionsToDelete.add(connection.getUuid());
        waitForConnectionIsInState(connection.getUuid(), EquinixStatus.PENDING_INTERFACE_CONFIGURATION);

        Port port = PortsApiTest.getPorts().as(AllPortsResponse.class).getData().stream()
                .filter(p -> p.getName().contains("Dot1q"))
                .filter(p -> p.getLocation().getMetroCode().equals(connection.getaSide().getAccessPoint().getLocation().getMetroCode()))
                .findFirst().get();

        ConnectionActionRequest connectionActionRequest = new ConnectionActionRequest()
                .type(Actions.CONNECTION_CREATION_ACCEPTANCE)
                .data(new ConnectionAcceptanceData()
                        .zSide(new ConnectionSide()
                                .accessPoint(new AccessPoint()
                                        .type(AccessPointType.COLO)
                                        .port(new SimplifiedPort().uuid(port.getUuid()))
                                        .linkProtocol(new SimplifiedLinkProtocol()
                                                .type(LinkProtocolType.DOT1Q).vlanTag(123)
                                        ))));

        Response ree = api.createConnectionAction()
                .connectionIdPath(connection.getUuid())
                .body(connectionActionRequest).execute(r -> r);

        assertEquals(HttpStatus.SC_ACCEPTED, ree.getStatusCode());

        waitForConnectionIsInState(connection.getUuid(), EquinixStatus.PROVISIONED);

        String updatedName = "updated_p2p_connection";

        ConnectionChangeOperation connectionChangeOperation = new ConnectionChangeOperation()
                .op(OpEnum.REPLACE.getValue())
                .path("/name")
                .value(updatedName);

        Response response = api.updateConnectionByUuid()
                .connectionIdPath(connection.getUuid())
                .body(singletonList(connectionChangeOperation)).execute(r -> r);

        Connection updatedConnection = response.as(Connection.class);
        assertEquals(HttpStatus.SC_ACCEPTED, response.getStatusCode());

        for (int i = 0; i < 5; i++) {
            updatedConnection = api.getConnectionByUuid()
                    .connectionIdPath(connection.getUuid())
                    .execute(re -> re).as(Connection.class);

            if (updatedConnection.getName().equals(updatedName)) {
                break;
            }
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }
        assertEquals(updatedConnection.getName(), updatedName);
    }

    private Connection createPort2SpConnection() {
        ServiceProfile serviceProfile = new ServiceProfilesApiTest().getServiceProfilesByQueryResponse("zSide").as(ServiceProfiles.class)
                .getData().stream().filter(sp -> sp.getState().equals(ServiceProfileStateEnum.ACTIVE))
                .findAny().get();

        PortDto portDto = (PortDto) Utils.getEnvData(Utils.EnvVariable.QINQ_PORT);

        ConnectionPostRequest connectionPostRequest = getDefaultConnectionRequest("panthers-con-port-2-sp")
                .type(ConnectionType.EVPL_VC)
                .redundancy(new ConnectionRedundancy().priority(ConnectionPriority.PRIMARY))
                .order(new Order().purchaseOrderNumber("pol123"))
                .zSide(new ConnectionSide().accessPoint(
                        new AccessPoint()
                                .type(AccessPointType.SP)
                                .profile(new SimplifiedServiceProfile()
                                        .type(ServiceProfileTypeEnum.L2_PROFILE)
                                        .uuid(serviceProfile.getUuid()))
                                .location(new SimplifiedLocation()
                                        .metroCode(serviceProfile.getMetros().get(0).getCode()))));

        Response response = null;

        for (int i = 0; i < 3; i++) {
            int sTag = new Random().nextInt(4000);
            int cTag = new Random().nextInt(4000);
            connectionPostRequest.aSide(new ConnectionSide().accessPoint(
                    new AccessPoint()
                            .type(AccessPointType.COLO)
                            .port(new SimplifiedPort().uuid(UUID.fromString(portDto.getUuid())))
                            .linkProtocol(new SimplifiedLinkProtocol()
                                    .type(LinkProtocolType.QINQ)
                                    .vlanSTag(sTag)
                                    .vlanCTag(cTag))));

            response = api.createConnection()
                    .body(connectionPostRequest)
                    .execute(r -> r);

            if (response.getStatusCode() == HttpStatus.SC_CREATED) {
                break;
            }
        }

        assertEquals(HttpStatus.SC_CREATED, response.getStatusCode());

        return response.as(Connection.class);
    }
//
//    /**
//     * Successful operation
//     */
//    @Test
//    public void searchConnections() {
//        Response response = getConnections();
//        ConnectionSearchResponse connectionSearchResponse = response.as(ConnectionSearchResponse.class);
//
//        assertEquals(HttpStatus.SC_OK, response.getStatusCode());
//        connectionSearchResponse.getData().forEach(connection -> assertEquals(connection.getOperation().getProviderStatus(), ProviderStatus.AVAILABLE));
//    }
//

    private ConnectionPostRequest getDefaultConnectionRequest(String name) {
        return new ConnectionPostRequest()
                .name(name)
                .bandwidth(1000)
                .notifications(singletonList(new SimplifiedNotification()
                        .type(SimplifiedNotification.TypeEnum.ALL)
                        .emails(singletonList("test@test.com"))));
    }

    private static void deleteConnection(String uuid) {
        Response response = api.deleteConnectionByUuid()
                .connectionIdPath(uuid)
                .execute(r -> r);
        assertEquals(HttpStatus.SC_ACCEPTED, response.getStatusCode());
        waitForConnectionIsInState(uuid, EquinixStatus.DEPROVISIONED);
    }

    private static void waitForConnectionIsInState(String connectionUuid, EquinixStatus connectionState) {
        for (int i = 0; i < 5; i++) {
            Connection connection = api.getConnectionByUuid()
                    .connectionIdPath(connectionUuid)
                    .execute(re -> re).as(Connection.class);

            if (connection.getOperation().getEquinixStatus().equals(connectionState)) {
                break;
            }
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }
    }

    private Response getConnections() {
        SearchRequest searchRequest = new SearchRequest()
                .filter(new Expression()
                        .addAndItem(new Expression()
                                .property(SearchFieldName._OPERATION_PROVIDERSTATUS)
                                .operator(Expression.OperatorEnum.EQUAL)
                                .values(singletonList(ProviderStatus.AVAILABLE.getValue()))))
                .pagination(new PaginationRequest().limit(5).offset(10))
                .sort(singletonList(new SortCriteria().property(SortBy.CHANGELOG_UPDATEDDATETIME).direction(SortDirection.DESC)));

        return api.searchConnections()
                .body(searchRequest).execute(r -> r);
    }
}
