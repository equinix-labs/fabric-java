/*
 * Equinix Fabric API v4
 * Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>
 *
 * The version of the OpenAPI document: 4.10
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import com.equinix.openapi.fabric.v4.model.LinkProtocolDot1q;
import com.equinix.openapi.fabric.v4.model.LinkProtocolEvpnVxlan;
import com.equinix.openapi.fabric.v4.model.LinkProtocolIpv4Ipv6Config;
import com.equinix.openapi.fabric.v4.model.LinkProtocolQinq;
import com.equinix.openapi.fabric.v4.model.LinkProtocolType;
import com.equinix.openapi.fabric.v4.model.LinkProtocolUntagged;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for LinkProtocol
 */
public class LinkProtocolTest {
    private final LinkProtocol model = new LinkProtocol();

    /**
     * Model tests for LinkProtocol
     */
    @Test
    public void testLinkProtocol() {
        // TODO: test LinkProtocol
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'ipv4'
     */
    @Test
    public void ipv4Test() {
        // TODO: test ipv4
    }

    /**
     * Test the property 'ipv6'
     */
    @Test
    public void ipv6Test() {
        // TODO: test ipv6
    }

    /**
     * Test the property 'tagProtocolId'
     */
    @Test
    public void tagProtocolIdTest() {
        // TODO: test tagProtocolId
    }

    /**
     * Test the property 'vlanTag'
     */
    @Test
    public void vlanTagTest() {
        // TODO: test vlanTag
    }

    /**
     * Test the property 'vlanTagMin'
     */
    @Test
    public void vlanTagMinTest() {
        // TODO: test vlanTagMin
    }

    /**
     * Test the property 'vlanTagMax'
     */
    @Test
    public void vlanTagMaxTest() {
        // TODO: test vlanTagMax
    }

    /**
     * Test the property 'innerTagProtocolId'
     */
    @Test
    public void innerTagProtocolIdTest() {
        // TODO: test innerTagProtocolId
    }

    /**
     * Test the property 'outerTagProtocolId'
     */
    @Test
    public void outerTagProtocolIdTest() {
        // TODO: test outerTagProtocolId
    }

    /**
     * Test the property 'vlanCTag'
     */
    @Test
    public void vlanCTagTest() {
        // TODO: test vlanCTag
    }

    /**
     * Test the property 'vlanSTag'
     */
    @Test
    public void vlanSTagTest() {
        // TODO: test vlanSTag
    }

    /**
     * Test the property 'vlanCTagMin'
     */
    @Test
    public void vlanCTagMinTest() {
        // TODO: test vlanCTagMin
    }

    /**
     * Test the property 'vlanCTagMax'
     */
    @Test
    public void vlanCTagMaxTest() {
        // TODO: test vlanCTagMax
    }

    /**
     * Test the property 'subInterface'
     */
    @Test
    public void subInterfaceTest() {
        // TODO: test subInterface
    }

    /**
     * Test the property 'vnid'
     */
    @Test
    public void vnidTest() {
        // TODO: test vnid
    }

    /**
     * Test the property 'type5vni'
     */
    @Test
    public void type5vniTest() {
        // TODO: test type5vni
    }

}
