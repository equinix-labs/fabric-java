/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.ApiClient;
import com.equinix.openapi.fabric.v4.model.BulkPhysicalPort;
import com.equinix.openapi.fabric.v4.model.BulkPort;
import com.equinix.openapi.fabric.v4.model.Port;
import com.equinix.openapi.fabric.v4.model.PortV4SearchRequest;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.ErrorLoggingFilter;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import java.util.UUID;

import static com.equinix.openapi.fabric.JacksonObjectMapper.jackson;
import static io.restassured.config.ObjectMapperConfig.objectMapperConfig;
import static io.restassured.config.RestAssuredConfig.config;

/**
 * API tests for PortsApi
 */
@Ignore
public class PortsApiTest {

    private PortsApi api;

    @Before
    public void createApi() {
        api = ApiClient.api(ApiClient.Config.apiConfig().reqSpecSupplier(
                () -> new RequestSpecBuilder()
                        .setConfig(config().objectMapperConfig(objectMapperConfig().defaultObjectMapper(jackson())))
                        .addFilter(new ErrorLoggingFilter())
                        .setBaseUri("https://api.equinix.com"))).ports();
    }

    /**
     * Successful operation
     */
    @Test
    public void shouldSee200AfterAddToLag() {
        UUID portId = null;
        BulkPhysicalPort bulkPhysicalPort = null;
        api.addToLag()
                .portIdPath(portId)
                .body(bulkPhysicalPort).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Unauthorized
     */
    @Test
    public void shouldSee401AfterAddToLag() {
        UUID portId = null;
        BulkPhysicalPort bulkPhysicalPort = null;
        api.addToLag()
                .portIdPath(portId)
                .body(bulkPhysicalPort).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Not Found
     */
    @Test
    public void shouldSee404AfterAddToLag() {
        UUID portId = null;
        BulkPhysicalPort bulkPhysicalPort = null;
        api.addToLag()
                .portIdPath(portId)
                .body(bulkPhysicalPort).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Internal server error
     */
    @Test
    public void shouldSee500AfterAddToLag() {
        UUID portId = null;
        BulkPhysicalPort bulkPhysicalPort = null;
        api.addToLag()
                .portIdPath(portId)
                .body(bulkPhysicalPort).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Successful operation for COLO Bulk Port
     */
    @Test
    public void shouldSee201AfterCreateBulkPort() {
        BulkPort bulkPort = null;
        api.createBulkPort()
                .body(bulkPort).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Successful operation for COLO Single Port Non Lag
     */
    @Test
    public void shouldSee201AfterCreatePort() {
        Port port = null;
        api.createPort()
                .body(port).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Bad request
     */
    @Test
    public void shouldSee400AfterCreatePort() {
        Port port = null;
        api.createPort()
                .body(port).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Internal Server Error
     */
    @Test
    public void shouldSee500AfterCreatePort() {
        Port port = null;
        api.createPort()
                .body(port).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Accepted
     */
    @Test
    public void shouldSee202AfterDeletePort() {
        UUID portId = null;
        api.deletePort()
                .portIdPath(portId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Bad request
     */
    @Test
    public void shouldSee400AfterDeletePort() {
        UUID portId = null;
        api.deletePort()
                .portIdPath(portId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Unauthorized
     */
    @Test
    public void shouldSee401AfterDeletePort() {
        UUID portId = null;
        api.deletePort()
                .portIdPath(portId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Not Found
     */
    @Test
    public void shouldSee404AfterDeletePort() {
        UUID portId = null;
        api.deletePort()
                .portIdPath(portId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Successful operation
     */
    @Test
    public void shouldSee200AfterGetPortByUuid() {
        UUID portId = null;
        api.getPortByUuid()
                .portIdPath(portId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Bad request
     */
    @Test
    public void shouldSee400AfterGetPortByUuid() {
        UUID portId = null;
        api.getPortByUuid()
                .portIdPath(portId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Forbidden
     */
    @Test
    public void shouldSee403AfterGetPortByUuid() {
        UUID portId = null;
        api.getPortByUuid()
                .portIdPath(portId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Internal server error
     */
    @Test
    public void shouldSee500AfterGetPortByUuid() {
        UUID portId = null;
        api.getPortByUuid()
                .portIdPath(portId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Successful operation
     */
    @Test
    public void shouldSee200AfterGetPorts() {
        String name = null;
        api.getPorts().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Forbidden
     */
    @Test
    public void shouldSee403AfterGetPorts() {
        String name = null;
        api.getPorts().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Get Vlans
     */
    @Test
    public void shouldSee200AfterGetVlans() {
        UUID portUuid = null;
        api.getVlans()
                .portUuidPath(portUuid).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Bad request
     */
    @Test
    public void shouldSee400AfterGetVlans() {
        UUID portUuid = null;
        api.getVlans()
                .portUuidPath(portUuid).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Forbidden
     */
    @Test
    public void shouldSee403AfterGetVlans() {
        UUID portUuid = null;
        api.getVlans()
                .portUuidPath(portUuid).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Successful operation
     */
    @Test
    public void shouldSee200AfterSearchPorts() {
        PortV4SearchRequest portV4SearchRequest = null;
        api.searchPorts()
                .body(portV4SearchRequest).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Bad request
     */
    @Test
    public void shouldSee400AfterSearchPorts() {
        PortV4SearchRequest portV4SearchRequest = null;
        api.searchPorts()
                .body(portV4SearchRequest).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Unauthorized
     */
    @Test
    public void shouldSee401AfterSearchPorts() {
        PortV4SearchRequest portV4SearchRequest = null;
        api.searchPorts()
                .body(portV4SearchRequest).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Not Found
     */
    @Test
    public void shouldSee404AfterSearchPorts() {
        PortV4SearchRequest portV4SearchRequest = null;
        api.searchPorts()
                .body(portV4SearchRequest).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

}
