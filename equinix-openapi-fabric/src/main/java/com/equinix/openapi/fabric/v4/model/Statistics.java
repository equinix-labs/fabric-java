/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import java.util.Objects;
import java.util.Arrays;
import com.equinix.openapi.fabric.v4.model.BandwidthUtilization;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * This API provides service-level traffic metrics so that you can view access and gather key information required to manage service subscription sizing and capacity.
 */
@JsonPropertyOrder({
  Statistics.JSON_PROPERTY_START_DATE_TIME,
  Statistics.JSON_PROPERTY_END_DATE_TIME,
  Statistics.JSON_PROPERTY_VIEW_POINT,
  Statistics.JSON_PROPERTY_BANDWIDTH_UTILIZATION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Statistics {
  public static final String JSON_PROPERTY_START_DATE_TIME = "startDateTime";
  private OffsetDateTime startDateTime;

  public static final String JSON_PROPERTY_END_DATE_TIME = "endDateTime";
  private OffsetDateTime endDateTime;

  /**
   * Point of view for connection metrics - aSide or zSide
   */
  public enum ViewPointEnum {
    ASIDE("aSide"),
    
    ZSIDE("zSide");

    private String value;

    ViewPointEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ViewPointEnum fromValue(String value) {
      for (ViewPointEnum b : ViewPointEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VIEW_POINT = "viewPoint";
  private ViewPointEnum viewPoint;

  public static final String JSON_PROPERTY_BANDWIDTH_UTILIZATION = "bandwidthUtilization";
  private BandwidthUtilization bandwidthUtilization;

  public Statistics() {
  }

  public Statistics startDateTime(OffsetDateTime startDateTime) {
    
    this.startDateTime = startDateTime;
    return this;
  }

   /**
   * Start and duration of the statistical analysis interval.
   * @return startDateTime
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getStartDateTime() {
    return startDateTime;
  }


  @JsonProperty(JSON_PROPERTY_START_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartDateTime(OffsetDateTime startDateTime) {
    this.startDateTime = startDateTime;
  }


  public Statistics endDateTime(OffsetDateTime endDateTime) {
    
    this.endDateTime = endDateTime;
    return this;
  }

   /**
   * End and duration of the statistical analysis interval.
   * @return endDateTime
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_END_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getEndDateTime() {
    return endDateTime;
  }


  @JsonProperty(JSON_PROPERTY_END_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndDateTime(OffsetDateTime endDateTime) {
    this.endDateTime = endDateTime;
  }


  public Statistics viewPoint(ViewPointEnum viewPoint) {
    
    this.viewPoint = viewPoint;
    return this;
  }

   /**
   * Point of view for connection metrics - aSide or zSide
   * @return viewPoint
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VIEW_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ViewPointEnum getViewPoint() {
    return viewPoint;
  }


  @JsonProperty(JSON_PROPERTY_VIEW_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setViewPoint(ViewPointEnum viewPoint) {
    this.viewPoint = viewPoint;
  }


  public Statistics bandwidthUtilization(BandwidthUtilization bandwidthUtilization) {
    
    this.bandwidthUtilization = bandwidthUtilization;
    return this;
  }

   /**
   * Get bandwidthUtilization
   * @return bandwidthUtilization
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BANDWIDTH_UTILIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BandwidthUtilization getBandwidthUtilization() {
    return bandwidthUtilization;
  }


  @JsonProperty(JSON_PROPERTY_BANDWIDTH_UTILIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBandwidthUtilization(BandwidthUtilization bandwidthUtilization) {
    this.bandwidthUtilization = bandwidthUtilization;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Statistics statistics = (Statistics) o;
    return Objects.equals(this.startDateTime, statistics.startDateTime) &&
        Objects.equals(this.endDateTime, statistics.endDateTime) &&
        Objects.equals(this.viewPoint, statistics.viewPoint) &&
        Objects.equals(this.bandwidthUtilization, statistics.bandwidthUtilization);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDateTime, endDateTime, viewPoint, bandwidthUtilization);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Statistics {\n");
    sb.append("    startDateTime: ").append(toIndentedString(startDateTime)).append("\n");
    sb.append("    endDateTime: ").append(toIndentedString(endDateTime)).append("\n");
    sb.append("    viewPoint: ").append(toIndentedString(viewPoint)).append("\n");
    sb.append("    bandwidthUtilization: ").append(toIndentedString(bandwidthUtilization)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

