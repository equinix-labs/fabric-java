/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.v4.model.*;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

import static io.restassured.http.Method.*;

public class NetworksApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private NetworksApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static NetworksApi networks(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new NetworksApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                createNetwork(),
                deleteNetworkByUuid(),
                getConnectionsByNetworkUuid(),
                getNetworkByUuid(),
                getNetworkChangeByUuid(),
                getNetworkChanges(),
                searchNetworks(),
                updateNetworkByUuid()
        );
    }

    public CreateNetworkOper createNetwork() {
        return new CreateNetworkOper(createReqSpec());
    }

    public DeleteNetworkByUuidOper deleteNetworkByUuid() {
        return new DeleteNetworkByUuidOper(createReqSpec());
    }

    public GetConnectionsByNetworkUuidOper getConnectionsByNetworkUuid() {
        return new GetConnectionsByNetworkUuidOper(createReqSpec());
    }

    public GetNetworkByUuidOper getNetworkByUuid() {
        return new GetNetworkByUuidOper(createReqSpec());
    }

    public GetNetworkChangeByUuidOper getNetworkChangeByUuid() {
        return new GetNetworkChangeByUuidOper(createReqSpec());
    }

    public GetNetworkChangesOper getNetworkChanges() {
        return new GetNetworkChangesOper(createReqSpec());
    }

    public SearchNetworksOper searchNetworks() {
        return new SearchNetworksOper(createReqSpec());
    }

    public UpdateNetworkByUuidOper updateNetworkByUuid() {
        return new UpdateNetworkByUuidOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public NetworksApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Create Network
     * This API provides capability to create user&#39;s Fabric Network
     *
     * @see #body  (required)
     * return Network
     */
    public static class CreateNetworkOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/networks";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateNetworkOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/networks
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/networks
         * @param handler handler
         * @return Network
         */
        public Network executeAs(Function<Response, Response> handler) {
            TypeRef<Network> type = new TypeRef<Network>(){};
            return execute(handler).as(type);
        }

         /**
         * @param networkPostRequest (NetworkPostRequest)  (required)
         * @return operation
         */
        public CreateNetworkOper body(NetworkPostRequest networkPostRequest) {
            reqSpec.setBody(networkPostRequest);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateNetworkOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateNetworkOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Delete Network By ID
     * This API provides capability to delete user&#39;s Fabric Network
     *
     * @see #networkIdPath Network UUID (required)
     * return Network
     */
    public static class DeleteNetworkByUuidOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/fabric/v4/networks/{networkId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteNetworkByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /fabric/v4/networks/{networkId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * DELETE /fabric/v4/networks/{networkId}
         * @param handler handler
         * @return Network
         */
        public Network executeAs(Function<Response, Response> handler) {
            TypeRef<Network> type = new TypeRef<Network>(){};
            return execute(handler).as(type);
        }

        public static final String NETWORK_ID_PATH = "networkId";

        /**
         * @param networkId (UUID) Network UUID (required)
         * @return operation
         */
        public DeleteNetworkByUuidOper networkIdPath(Object networkId) {
            reqSpec.addPathParam(NETWORK_ID_PATH, networkId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteNetworkByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteNetworkByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Connections
     * The API provides capability to get list of user&#39;s Fabric Network connections
     *
     * @see #networkIdPath Network UUID (required)
     * return NetworkConnections
     */
    public static class GetConnectionsByNetworkUuidOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/networks/{networkId}/connections";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetConnectionsByNetworkUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/networks/{networkId}/connections
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/networks/{networkId}/connections
         * @param handler handler
         * @return NetworkConnections
         */
        public NetworkConnections executeAs(Function<Response, Response> handler) {
            TypeRef<NetworkConnections> type = new TypeRef<NetworkConnections>(){};
            return execute(handler).as(type);
        }

        public static final String NETWORK_ID_PATH = "networkId";

        /**
         * @param networkId (UUID) Network UUID (required)
         * @return operation
         */
        public GetConnectionsByNetworkUuidOper networkIdPath(Object networkId) {
            reqSpec.addPathParam(NETWORK_ID_PATH, networkId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetConnectionsByNetworkUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetConnectionsByNetworkUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Network By ID
     * This API provides capability to retrieve user&#39;s Fabric Network
     *
     * @see #networkIdPath Network UUID (required)
     * return Network
     */
    public static class GetNetworkByUuidOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/networks/{networkId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetNetworkByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/networks/{networkId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/networks/{networkId}
         * @param handler handler
         * @return Network
         */
        public Network executeAs(Function<Response, Response> handler) {
            TypeRef<Network> type = new TypeRef<Network>(){};
            return execute(handler).as(type);
        }

        public static final String NETWORK_ID_PATH = "networkId";

        /**
         * @param networkId (UUID) Network UUID (required)
         * @return operation
         */
        public GetNetworkByUuidOper networkIdPath(Object networkId) {
            reqSpec.addPathParam(NETWORK_ID_PATH, networkId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetNetworkByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetNetworkByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Change By ID
     * This API provides capability to retrieve user&#39;s Fabric Network Change
     *
     * @see #networkIdPath Network UUID (required)
     * @see #changeIdPath Network Change UUID (required)
     * return NetworkChange
     */
    public static class GetNetworkChangeByUuidOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/networks/{networkId}/changes/{changeId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetNetworkChangeByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/networks/{networkId}/changes/{changeId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/networks/{networkId}/changes/{changeId}
         * @param handler handler
         * @return NetworkChange
         */
        public NetworkChange executeAs(Function<Response, Response> handler) {
            TypeRef<NetworkChange> type = new TypeRef<NetworkChange>(){};
            return execute(handler).as(type);
        }

        public static final String NETWORK_ID_PATH = "networkId";

        /**
         * @param networkId (UUID) Network UUID (required)
         * @return operation
         */
        public GetNetworkChangeByUuidOper networkIdPath(Object networkId) {
            reqSpec.addPathParam(NETWORK_ID_PATH, networkId);
            return this;
        }

        public static final String CHANGE_ID_PATH = "changeId";

        /**
         * @param changeId (UUID) Network Change UUID (required)
         * @return operation
         */
        public GetNetworkChangeByUuidOper changeIdPath(Object changeId) {
            reqSpec.addPathParam(CHANGE_ID_PATH, changeId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetNetworkChangeByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetNetworkChangeByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Network Changes
     * The API provides capability to get list of user&#39;s Fabric Network changes
     *
     * @see #networkIdPath Network UUID (required)
     * return NetworkChangeResponse
     */
    public static class GetNetworkChangesOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/networks/{networkId}/changes";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetNetworkChangesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/networks/{networkId}/changes
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/networks/{networkId}/changes
         * @param handler handler
         * @return NetworkChangeResponse
         */
        public NetworkChangeResponse executeAs(Function<Response, Response> handler) {
            TypeRef<NetworkChangeResponse> type = new TypeRef<NetworkChangeResponse>(){};
            return execute(handler).as(type);
        }

        public static final String NETWORK_ID_PATH = "networkId";

        /**
         * @param networkId (UUID) Network UUID (required)
         * @return operation
         */
        public GetNetworkChangesOper networkIdPath(Object networkId) {
            reqSpec.addPathParam(NETWORK_ID_PATH, networkId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetNetworkChangesOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetNetworkChangesOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Search Network
     * The API provides capability to get list of user&#39;s Fabric Network using search criteria, including optional filtering, pagination and sorting
     *
     * @see #body  (required)
     * return NetworkSearchResponse
     */
    public static class SearchNetworksOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/networks/search";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public SearchNetworksOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/networks/search
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/networks/search
         * @param handler handler
         * @return NetworkSearchResponse
         */
        public NetworkSearchResponse executeAs(Function<Response, Response> handler) {
            TypeRef<NetworkSearchResponse> type = new TypeRef<NetworkSearchResponse>(){};
            return execute(handler).as(type);
        }

         /**
         * @param networkSearchRequest (NetworkSearchRequest)  (required)
         * @return operation
         */
        public SearchNetworksOper body(NetworkSearchRequest networkSearchRequest) {
            reqSpec.setBody(networkSearchRequest);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public SearchNetworksOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public SearchNetworksOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Update Network By ID
     * This API provides capability to update user&#39;s Fabric Network
     *
     * @see #networkIdPath Network UUID (required)
     * @see #body  (required)
     * return Network
     */
    public static class UpdateNetworkByUuidOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/fabric/v4/networks/{networkId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateNetworkByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json-patch+json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /fabric/v4/networks/{networkId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /fabric/v4/networks/{networkId}
         * @param handler handler
         * @return Network
         */
        public Network executeAs(Function<Response, Response> handler) {
            TypeRef<Network> type = new TypeRef<Network>(){};
            return execute(handler).as(type);
        }

         /**
         * @param networkChangeOperation (List&lt;NetworkChangeOperation&gt;)  (required)
         * @return operation
         */
        public UpdateNetworkByUuidOper body(List<NetworkChangeOperation> networkChangeOperation) {
            reqSpec.setBody(networkChangeOperation);
            return this;
        }

        public static final String NETWORK_ID_PATH = "networkId";

        /**
         * @param networkId (UUID) Network UUID (required)
         * @return operation
         */
        public UpdateNetworkByUuidOper networkIdPath(Object networkId) {
            reqSpec.addPathParam(NETWORK_ID_PATH, networkId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdateNetworkByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdateNetworkByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
