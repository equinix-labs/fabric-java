/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import com.fasterxml.jackson.annotation.*;

import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

/**
 * Port specification
 */
@JsonPropertyOrder({
  SimplifiedPort.JSON_PROPERTY_TYPE,
  SimplifiedPort.JSON_PROPERTY_ID,
  SimplifiedPort.JSON_PROPERTY_HREF,
  SimplifiedPort.JSON_PROPERTY_UUID,
  SimplifiedPort.JSON_PROPERTY_NAME,
  SimplifiedPort.JSON_PROPERTY_DESCRIPTION,
  SimplifiedPort.JSON_PROPERTY_PHYSICAL_PORTS_SPEED,
  SimplifiedPort.JSON_PROPERTY_CONNECTIONS_COUNT,
  SimplifiedPort.JSON_PROPERTY_PROJECT,
  SimplifiedPort.JSON_PROPERTY_STATE,
  SimplifiedPort.JSON_PROPERTY_CVP_ID,
  SimplifiedPort.JSON_PROPERTY_OPERATION,
  SimplifiedPort.JSON_PROPERTY_ACCOUNT,
  SimplifiedPort.JSON_PROPERTY_SERVICE_TYPE,
  SimplifiedPort.JSON_PROPERTY_BANDWIDTH,
  SimplifiedPort.JSON_PROPERTY_AVAILABLE_BANDWIDTH,
  SimplifiedPort.JSON_PROPERTY_USED_BANDWIDTH,
  SimplifiedPort.JSON_PROPERTY_LOCATION,
  SimplifiedPort.JSON_PROPERTY_DEVICE,
  SimplifiedPort.JSON_PROPERTY_INTERFACE,
  SimplifiedPort.JSON_PROPERTY_TETHER,
  SimplifiedPort.JSON_PROPERTY_DEMARCATION_POINT,
  SimplifiedPort.JSON_PROPERTY_REDUNDANCY,
  SimplifiedPort.JSON_PROPERTY_ENCAPSULATION,
  SimplifiedPort.JSON_PROPERTY_LAG_ENABLED,
  SimplifiedPort.JSON_PROPERTY_SETTINGS,
  SimplifiedPort.JSON_PROPERTY_PHYSICAL_PORT_QUANTITY,
  SimplifiedPort.JSON_PROPERTY_ADDITIONAL_INFO,
  SimplifiedPort.JSON_PROPERTY_PHYSICAL_PORTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SimplifiedPort {
  public static final String JSON_PROPERTY_TYPE = "type";
  private PortType type;

  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_HREF = "href";
  private URI href;

  public static final String JSON_PROPERTY_UUID = "uuid";
  private UUID uuid;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_PHYSICAL_PORTS_SPEED = "physicalPortsSpeed";
  private Integer physicalPortsSpeed;

  public static final String JSON_PROPERTY_CONNECTIONS_COUNT = "connectionsCount";
  private Integer connectionsCount;

  public static final String JSON_PROPERTY_PROJECT = "project";
  private Project project;

  public static final String JSON_PROPERTY_STATE = "state";
  private PortState state;

  public static final String JSON_PROPERTY_CVP_ID = "cvpId";
  private String cvpId;

  public static final String JSON_PROPERTY_OPERATION = "operation";
  private PortOperation operation;

  public static final String JSON_PROPERTY_ACCOUNT = "account";
  private SimplifiedAccount account;

  /**
   * Port service Type
   */
  public enum ServiceTypeEnum {
    EPL("EPL"),
    
    MSP("MSP");

    private String value;

    ServiceTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ServiceTypeEnum fromValue(String value) {
      for (ServiceTypeEnum b : ServiceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SERVICE_TYPE = "serviceType";
  private ServiceTypeEnum serviceType;

  public static final String JSON_PROPERTY_BANDWIDTH = "bandwidth";
  private Integer bandwidth;

  public static final String JSON_PROPERTY_AVAILABLE_BANDWIDTH = "availableBandwidth";
  private Integer availableBandwidth;

  public static final String JSON_PROPERTY_USED_BANDWIDTH = "usedBandwidth";
  private Integer usedBandwidth;

  public static final String JSON_PROPERTY_LOCATION = "location";
  private SimplifiedLocation location;

  public static final String JSON_PROPERTY_DEVICE = "device";
  private PortDevice device;

  public static final String JSON_PROPERTY_INTERFACE = "interface";
  private PortInterface _interface;

  public static final String JSON_PROPERTY_TETHER = "tether";
  private PortTether tether;

  public static final String JSON_PROPERTY_DEMARCATION_POINT = "demarcationPoint";
  private PortDemarcationPoint demarcationPoint;

  public static final String JSON_PROPERTY_REDUNDANCY = "redundancy";
  private PortRedundancy redundancy;

  public static final String JSON_PROPERTY_ENCAPSULATION = "encapsulation";
  private PortEncapsulation encapsulation;

  public static final String JSON_PROPERTY_LAG_ENABLED = "lagEnabled";
  private Boolean lagEnabled;

  public static final String JSON_PROPERTY_SETTINGS = "settings";
  private PortSettings settings;

  public static final String JSON_PROPERTY_PHYSICAL_PORT_QUANTITY = "physicalPortQuantity";
  private Integer physicalPortQuantity;

  public static final String JSON_PROPERTY_ADDITIONAL_INFO = "additionalInfo";
  private List<PortAdditionalInfo> additionalInfo = new ArrayList<>();

  public static final String JSON_PROPERTY_PHYSICAL_PORTS = "physicalPorts";
  private List<PhysicalPort> physicalPorts = new ArrayList<>();

  public SimplifiedPort() {
  }

  @JsonCreator
  public SimplifiedPort(
    @JsonProperty(JSON_PROPERTY_HREF) URI href
  ) {
    this();
    this.href = href;
  }

  public SimplifiedPort type(PortType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(PortType type) {
    this.type = type;
  }


  public SimplifiedPort id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Equinix assigned response attribute for Port Id
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Integer id) {
    this.id = id;
  }


   /**
   * Equinix assigned response attribute for an absolute URL that is the subject of the link&#39;s context.
   * @return href
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getHref() {
    return href;
  }




  public SimplifiedPort uuid(UUID uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Equinix assigned response attribute for  port identifier
   * @return uuid
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getUuid() {
    return uuid;
  }


  @JsonProperty(JSON_PROPERTY_UUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }


  public SimplifiedPort name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Equinix assigned response attribute for Port name
   * @return name
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public SimplifiedPort description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Equinix assigned response attribute for Port description
   * @return description
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public SimplifiedPort physicalPortsSpeed(Integer physicalPortsSpeed) {
    
    this.physicalPortsSpeed = physicalPortsSpeed;
    return this;
  }

   /**
   * Physical Ports Speed in Mbps
   * minimum: 0
   * @return physicalPortsSpeed
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PHYSICAL_PORTS_SPEED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPhysicalPortsSpeed() {
    return physicalPortsSpeed;
  }


  @JsonProperty(JSON_PROPERTY_PHYSICAL_PORTS_SPEED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPhysicalPortsSpeed(Integer physicalPortsSpeed) {
    this.physicalPortsSpeed = physicalPortsSpeed;
  }


  public SimplifiedPort connectionsCount(Integer connectionsCount) {
    
    this.connectionsCount = connectionsCount;
    return this;
  }

   /**
   * Equinix assigned response attribute for Connection count
   * minimum: 0
   * @return connectionsCount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONNECTIONS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getConnectionsCount() {
    return connectionsCount;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTIONS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConnectionsCount(Integer connectionsCount) {
    this.connectionsCount = connectionsCount;
  }


  public SimplifiedPort project(Project project) {
    
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Project getProject() {
    return project;
  }


  @JsonProperty(JSON_PROPERTY_PROJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProject(Project project) {
    this.project = project;
  }


  public SimplifiedPort state(PortState state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortState getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setState(PortState state) {
    this.state = state;
  }


  public SimplifiedPort cvpId(String cvpId) {
    
    this.cvpId = cvpId;
    return this;
  }

   /**
   * Equinix assigned response attribute for Unique ID for a virtual port.
   * @return cvpId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CVP_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCvpId() {
    return cvpId;
  }


  @JsonProperty(JSON_PROPERTY_CVP_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCvpId(String cvpId) {
    this.cvpId = cvpId;
  }


  public SimplifiedPort operation(PortOperation operation) {
    
    this.operation = operation;
    return this;
  }

   /**
   * Get operation
   * @return operation
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortOperation getOperation() {
    return operation;
  }


  @JsonProperty(JSON_PROPERTY_OPERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperation(PortOperation operation) {
    this.operation = operation;
  }


  public SimplifiedPort account(SimplifiedAccount account) {
    
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SimplifiedAccount getAccount() {
    return account;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccount(SimplifiedAccount account) {
    this.account = account;
  }


  public SimplifiedPort serviceType(ServiceTypeEnum serviceType) {
    
    this.serviceType = serviceType;
    return this;
  }

   /**
   * Port service Type
   * @return serviceType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVICE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ServiceTypeEnum getServiceType() {
    return serviceType;
  }


  @JsonProperty(JSON_PROPERTY_SERVICE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServiceType(ServiceTypeEnum serviceType) {
    this.serviceType = serviceType;
  }


  public SimplifiedPort bandwidth(Integer bandwidth) {
    
    this.bandwidth = bandwidth;
    return this;
  }

   /**
   * Equinix assigned response attribute for Port bandwidth in Mbps
   * minimum: 0
   * @return bandwidth
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getBandwidth() {
    return bandwidth;
  }


  @JsonProperty(JSON_PROPERTY_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBandwidth(Integer bandwidth) {
    this.bandwidth = bandwidth;
  }


  public SimplifiedPort availableBandwidth(Integer availableBandwidth) {
    
    this.availableBandwidth = availableBandwidth;
    return this;
  }

   /**
   * Equinix assigned response attribute for Port available bandwidth in Mbps
   * minimum: 0
   * @return availableBandwidth
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVAILABLE_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAvailableBandwidth() {
    return availableBandwidth;
  }


  @JsonProperty(JSON_PROPERTY_AVAILABLE_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAvailableBandwidth(Integer availableBandwidth) {
    this.availableBandwidth = availableBandwidth;
  }


  public SimplifiedPort usedBandwidth(Integer usedBandwidth) {
    
    this.usedBandwidth = usedBandwidth;
    return this;
  }

   /**
   * Equinix assigned response attribute for Port used bandwidth in Mbps
   * minimum: 0
   * @return usedBandwidth
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USED_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUsedBandwidth() {
    return usedBandwidth;
  }


  @JsonProperty(JSON_PROPERTY_USED_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsedBandwidth(Integer usedBandwidth) {
    this.usedBandwidth = usedBandwidth;
  }


  public SimplifiedPort location(SimplifiedLocation location) {
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SimplifiedLocation getLocation() {
    return location;
  }


  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocation(SimplifiedLocation location) {
    this.location = location;
  }


  public SimplifiedPort device(PortDevice device) {
    
    this.device = device;
    return this;
  }

   /**
   * Get device
   * @return device
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortDevice getDevice() {
    return device;
  }


  @JsonProperty(JSON_PROPERTY_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDevice(PortDevice device) {
    this.device = device;
  }


  public SimplifiedPort _interface(PortInterface _interface) {
    
    this._interface = _interface;
    return this;
  }

   /**
   * Get _interface
   * @return _interface
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERFACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortInterface getInterface() {
    return _interface;
  }


  @JsonProperty(JSON_PROPERTY_INTERFACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInterface(PortInterface _interface) {
    this._interface = _interface;
  }


  public SimplifiedPort tether(PortTether tether) {
    
    this.tether = tether;
    return this;
  }

   /**
   * Get tether
   * @return tether
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TETHER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortTether getTether() {
    return tether;
  }


  @JsonProperty(JSON_PROPERTY_TETHER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTether(PortTether tether) {
    this.tether = tether;
  }


  public SimplifiedPort demarcationPoint(PortDemarcationPoint demarcationPoint) {
    
    this.demarcationPoint = demarcationPoint;
    return this;
  }

   /**
   * Get demarcationPoint
   * @return demarcationPoint
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEMARCATION_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortDemarcationPoint getDemarcationPoint() {
    return demarcationPoint;
  }


  @JsonProperty(JSON_PROPERTY_DEMARCATION_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDemarcationPoint(PortDemarcationPoint demarcationPoint) {
    this.demarcationPoint = demarcationPoint;
  }


  public SimplifiedPort redundancy(PortRedundancy redundancy) {
    
    this.redundancy = redundancy;
    return this;
  }

   /**
   * Get redundancy
   * @return redundancy
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REDUNDANCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortRedundancy getRedundancy() {
    return redundancy;
  }


  @JsonProperty(JSON_PROPERTY_REDUNDANCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRedundancy(PortRedundancy redundancy) {
    this.redundancy = redundancy;
  }


  public SimplifiedPort encapsulation(PortEncapsulation encapsulation) {
    
    this.encapsulation = encapsulation;
    return this;
  }

   /**
   * Get encapsulation
   * @return encapsulation
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENCAPSULATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortEncapsulation getEncapsulation() {
    return encapsulation;
  }


  @JsonProperty(JSON_PROPERTY_ENCAPSULATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEncapsulation(PortEncapsulation encapsulation) {
    this.encapsulation = encapsulation;
  }


  public SimplifiedPort lagEnabled(Boolean lagEnabled) {
    
    this.lagEnabled = lagEnabled;
    return this;
  }

   /**
   * If LAG enabled
   * @return lagEnabled
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAG_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLagEnabled() {
    return lagEnabled;
  }


  @JsonProperty(JSON_PROPERTY_LAG_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLagEnabled(Boolean lagEnabled) {
    this.lagEnabled = lagEnabled;
  }


  public SimplifiedPort settings(PortSettings settings) {
    
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortSettings getSettings() {
    return settings;
  }


  @JsonProperty(JSON_PROPERTY_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSettings(PortSettings settings) {
    this.settings = settings;
  }


  public SimplifiedPort physicalPortQuantity(Integer physicalPortQuantity) {
    
    this.physicalPortQuantity = physicalPortQuantity;
    return this;
  }

   /**
   * Number of physical ports
   * @return physicalPortQuantity
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PHYSICAL_PORT_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPhysicalPortQuantity() {
    return physicalPortQuantity;
  }


  @JsonProperty(JSON_PROPERTY_PHYSICAL_PORT_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPhysicalPortQuantity(Integer physicalPortQuantity) {
    this.physicalPortQuantity = physicalPortQuantity;
  }


  public SimplifiedPort additionalInfo(List<PortAdditionalInfo> additionalInfo) {
    
    this.additionalInfo = additionalInfo;
    return this;
  }

  public SimplifiedPort addAdditionalInfoItem(PortAdditionalInfo additionalInfoItem) {
    if (this.additionalInfo == null) {
      this.additionalInfo = new ArrayList<>();
    }
    this.additionalInfo.add(additionalInfoItem);
    return this;
  }

   /**
   * Port additional information
   * @return additionalInfo
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PortAdditionalInfo> getAdditionalInfo() {
    return additionalInfo;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalInfo(List<PortAdditionalInfo> additionalInfo) {
    this.additionalInfo = additionalInfo;
  }


  public SimplifiedPort physicalPorts(List<PhysicalPort> physicalPorts) {
    
    this.physicalPorts = physicalPorts;
    return this;
  }

  public SimplifiedPort addPhysicalPortsItem(PhysicalPort physicalPortsItem) {
    if (this.physicalPorts == null) {
      this.physicalPorts = new ArrayList<>();
    }
    this.physicalPorts.add(physicalPortsItem);
    return this;
  }

   /**
   * Physical ports that implement this port
   * @return physicalPorts
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PHYSICAL_PORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PhysicalPort> getPhysicalPorts() {
    return physicalPorts;
  }


  @JsonProperty(JSON_PROPERTY_PHYSICAL_PORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPhysicalPorts(List<PhysicalPort> physicalPorts) {
    this.physicalPorts = physicalPorts;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimplifiedPort simplifiedPort = (SimplifiedPort) o;
    return Objects.equals(this.type, simplifiedPort.type) &&
        Objects.equals(this.id, simplifiedPort.id) &&
        Objects.equals(this.href, simplifiedPort.href) &&
        Objects.equals(this.uuid, simplifiedPort.uuid) &&
        Objects.equals(this.name, simplifiedPort.name) &&
        Objects.equals(this.description, simplifiedPort.description) &&
        Objects.equals(this.physicalPortsSpeed, simplifiedPort.physicalPortsSpeed) &&
        Objects.equals(this.connectionsCount, simplifiedPort.connectionsCount) &&
        Objects.equals(this.project, simplifiedPort.project) &&
        Objects.equals(this.state, simplifiedPort.state) &&
        Objects.equals(this.cvpId, simplifiedPort.cvpId) &&
        Objects.equals(this.operation, simplifiedPort.operation) &&
        Objects.equals(this.account, simplifiedPort.account) &&
        Objects.equals(this.serviceType, simplifiedPort.serviceType) &&
        Objects.equals(this.bandwidth, simplifiedPort.bandwidth) &&
        Objects.equals(this.availableBandwidth, simplifiedPort.availableBandwidth) &&
        Objects.equals(this.usedBandwidth, simplifiedPort.usedBandwidth) &&
        Objects.equals(this.location, simplifiedPort.location) &&
        Objects.equals(this.device, simplifiedPort.device) &&
        Objects.equals(this._interface, simplifiedPort._interface) &&
        Objects.equals(this.tether, simplifiedPort.tether) &&
        Objects.equals(this.demarcationPoint, simplifiedPort.demarcationPoint) &&
        Objects.equals(this.redundancy, simplifiedPort.redundancy) &&
        Objects.equals(this.encapsulation, simplifiedPort.encapsulation) &&
        Objects.equals(this.lagEnabled, simplifiedPort.lagEnabled) &&
        Objects.equals(this.settings, simplifiedPort.settings) &&
        Objects.equals(this.physicalPortQuantity, simplifiedPort.physicalPortQuantity) &&
        Objects.equals(this.additionalInfo, simplifiedPort.additionalInfo) &&
        Objects.equals(this.physicalPorts, simplifiedPort.physicalPorts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, id, href, uuid, name, description, physicalPortsSpeed, connectionsCount, project, state, cvpId, operation, account, serviceType, bandwidth, availableBandwidth, usedBandwidth, location, device, _interface, tether, demarcationPoint, redundancy, encapsulation, lagEnabled, settings, physicalPortQuantity, additionalInfo, physicalPorts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimplifiedPort {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    physicalPortsSpeed: ").append(toIndentedString(physicalPortsSpeed)).append("\n");
    sb.append("    connectionsCount: ").append(toIndentedString(connectionsCount)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    cvpId: ").append(toIndentedString(cvpId)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("    availableBandwidth: ").append(toIndentedString(availableBandwidth)).append("\n");
    sb.append("    usedBandwidth: ").append(toIndentedString(usedBandwidth)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    _interface: ").append(toIndentedString(_interface)).append("\n");
    sb.append("    tether: ").append(toIndentedString(tether)).append("\n");
    sb.append("    demarcationPoint: ").append(toIndentedString(demarcationPoint)).append("\n");
    sb.append("    redundancy: ").append(toIndentedString(redundancy)).append("\n");
    sb.append("    encapsulation: ").append(toIndentedString(encapsulation)).append("\n");
    sb.append("    lagEnabled: ").append(toIndentedString(lagEnabled)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    physicalPortQuantity: ").append(toIndentedString(physicalPortQuantity)).append("\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    physicalPorts: ").append(toIndentedString(physicalPorts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

