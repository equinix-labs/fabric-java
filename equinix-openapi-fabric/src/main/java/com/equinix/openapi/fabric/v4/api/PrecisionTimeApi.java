/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.v4.model.*;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

import static io.restassured.http.Method.*;

public class PrecisionTimeApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private PrecisionTimeApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static PrecisionTimeApi precisionTime(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new PrecisionTimeApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                createTimeServices(),
                deleteTimeServiceById(),
                getTimeServicesById(),
                getTimeServicesConnectionsByServiceId(),
                getTimeServicesPackageByCode(),
                getTimeServicesPackages(),
                updateTimeServicesById()
        );
    }

    public CreateTimeServicesOper createTimeServices() {
        return new CreateTimeServicesOper(createReqSpec());
    }

    public DeleteTimeServiceByIdOper deleteTimeServiceById() {
        return new DeleteTimeServiceByIdOper(createReqSpec());
    }

    public GetTimeServicesByIdOper getTimeServicesById() {
        return new GetTimeServicesByIdOper(createReqSpec());
    }

    public GetTimeServicesConnectionsByServiceIdOper getTimeServicesConnectionsByServiceId() {
        return new GetTimeServicesConnectionsByServiceIdOper(createReqSpec());
    }

    public GetTimeServicesPackageByCodeOper getTimeServicesPackageByCode() {
        return new GetTimeServicesPackageByCodeOper(createReqSpec());
    }

    public GetTimeServicesPackagesOper getTimeServicesPackages() {
        return new GetTimeServicesPackagesOper(createReqSpec());
    }

    public UpdateTimeServicesByIdOper updateTimeServicesById() {
        return new UpdateTimeServicesByIdOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public PrecisionTimeApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Create Time Service
     * The API provides capability to create timing service
     *
     * @see #body  (required)
     * return PrecisionTimeServiceCreateResponse
     */
    public static class CreateTimeServicesOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/timeServices";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateTimeServicesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/timeServices
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/timeServices
         * @param handler handler
         * @return PrecisionTimeServiceCreateResponse
         */
        public PrecisionTimeServiceCreateResponse executeAs(Function<Response, Response> handler) {
            TypeRef<PrecisionTimeServiceCreateResponse> type = new TypeRef<PrecisionTimeServiceCreateResponse>(){};
            return execute(handler).as(type);
        }

         /**
         * @param precisionTimeServiceRequest (PrecisionTimeServiceRequest)  (required)
         * @return operation
         */
        public CreateTimeServicesOper body(PrecisionTimeServiceRequest precisionTimeServiceRequest) {
            reqSpec.setBody(precisionTimeServiceRequest);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateTimeServicesOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateTimeServicesOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Delete time service
     * Delete EPT service by it&#39;s uuid
     *
     * @see #serviceIdPath Service UUID (required)
     * return PrecisionTimeServiceCreateResponse
     */
    public static class DeleteTimeServiceByIdOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/fabric/v4/timeServices/{serviceId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteTimeServiceByIdOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /fabric/v4/timeServices/{serviceId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * DELETE /fabric/v4/timeServices/{serviceId}
         * @param handler handler
         * @return PrecisionTimeServiceCreateResponse
         */
        public PrecisionTimeServiceCreateResponse executeAs(Function<Response, Response> handler) {
            TypeRef<PrecisionTimeServiceCreateResponse> type = new TypeRef<PrecisionTimeServiceCreateResponse>(){};
            return execute(handler).as(type);
        }

        public static final String SERVICE_ID_PATH = "serviceId";

        /**
         * @param serviceId (UUID) Service UUID (required)
         * @return operation
         */
        public DeleteTimeServiceByIdOper serviceIdPath(Object serviceId) {
            reqSpec.addPathParam(SERVICE_ID_PATH, serviceId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteTimeServiceByIdOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteTimeServiceByIdOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Time Service
     * The API provides capability to get precision timing service&#39;s details
     *
     * @see #serviceIdPath Service UUID (required)
     * return PrecisionTimeServiceCreateResponse
     */
    public static class GetTimeServicesByIdOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/timeServices/{serviceId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetTimeServicesByIdOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/timeServices/{serviceId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/timeServices/{serviceId}
         * @param handler handler
         * @return PrecisionTimeServiceCreateResponse
         */
        public PrecisionTimeServiceCreateResponse executeAs(Function<Response, Response> handler) {
            TypeRef<PrecisionTimeServiceCreateResponse> type = new TypeRef<PrecisionTimeServiceCreateResponse>(){};
            return execute(handler).as(type);
        }

        public static final String SERVICE_ID_PATH = "serviceId";

        /**
         * @param serviceId (UUID) Service UUID (required)
         * @return operation
         */
        public GetTimeServicesByIdOper serviceIdPath(Object serviceId) {
            reqSpec.addPathParam(SERVICE_ID_PATH, serviceId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetTimeServicesByIdOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetTimeServicesByIdOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Connection Links
     * The API provides capability to get prevision timing service&#39;s details
     *
     * @see #serviceIdPath Service UUID (required)
     * return PrecisionTimeServiceConnectionsResponse
     */
    public static class GetTimeServicesConnectionsByServiceIdOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/timeServices/{serviceId}/connections";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetTimeServicesConnectionsByServiceIdOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/timeServices/{serviceId}/connections
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/timeServices/{serviceId}/connections
         * @param handler handler
         * @return PrecisionTimeServiceConnectionsResponse
         */
        public PrecisionTimeServiceConnectionsResponse executeAs(Function<Response, Response> handler) {
            TypeRef<PrecisionTimeServiceConnectionsResponse> type = new TypeRef<PrecisionTimeServiceConnectionsResponse>(){};
            return execute(handler).as(type);
        }

        public static final String SERVICE_ID_PATH = "serviceId";

        /**
         * @param serviceId (UUID) Service UUID (required)
         * @return operation
         */
        public GetTimeServicesConnectionsByServiceIdOper serviceIdPath(Object serviceId) {
            reqSpec.addPathParam(SERVICE_ID_PATH, serviceId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetTimeServicesConnectionsByServiceIdOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetTimeServicesConnectionsByServiceIdOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Package By Code
     * The API provides capability to get timing service&#39;s package by code
     *
     * @see #packageCodePath Package Code (required)
     * return PrecisionTimePackageResponse
     */
    public static class GetTimeServicesPackageByCodeOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/timeServicePackages/{packageCode}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetTimeServicesPackageByCodeOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/timeServicePackages/{packageCode}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/timeServicePackages/{packageCode}
         * @param handler handler
         * @return PrecisionTimePackageResponse
         */
        public PrecisionTimePackageResponse executeAs(Function<Response, Response> handler) {
            TypeRef<PrecisionTimePackageResponse> type = new TypeRef<PrecisionTimePackageResponse>(){};
            return execute(handler).as(type);
        }

        public static final String PACKAGE_CODE_PATH = "packageCode";

        /**
         * @param packageCode (String) Package Code (required)
         * @return operation
         */
        public GetTimeServicesPackageByCodeOper packageCodePath(Object packageCode) {
            reqSpec.addPathParam(PACKAGE_CODE_PATH, packageCode);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetTimeServicesPackageByCodeOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetTimeServicesPackageByCodeOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Packages
     * The API provides capability to get timing service&#39;s packages
     *
     * return PrecisionTimeServicePackagesResponse
     */
    public static class GetTimeServicesPackagesOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/timeServicePackages";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetTimeServicesPackagesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/timeServicePackages
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/timeServicePackages
         * @param handler handler
         * @return PrecisionTimeServicePackagesResponse
         */
        public PrecisionTimeServicePackagesResponse executeAs(Function<Response, Response> handler) {
            TypeRef<PrecisionTimeServicePackagesResponse> type = new TypeRef<PrecisionTimeServicePackagesResponse>(){};
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetTimeServicesPackagesOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetTimeServicesPackagesOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Patch time service
     * The API provides capability to update timing service
     *
     * @see #serviceIdPath Service UUID (required)
     * @see #body  (required)
     * return PrecisionTimeServiceCreateResponse
     */
    public static class UpdateTimeServicesByIdOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/fabric/v4/timeServices/{serviceId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateTimeServicesByIdOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json-patch+json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /fabric/v4/timeServices/{serviceId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /fabric/v4/timeServices/{serviceId}
         * @param handler handler
         * @return PrecisionTimeServiceCreateResponse
         */
        public PrecisionTimeServiceCreateResponse executeAs(Function<Response, Response> handler) {
            TypeRef<PrecisionTimeServiceCreateResponse> type = new TypeRef<PrecisionTimeServiceCreateResponse>(){};
            return execute(handler).as(type);
        }

         /**
         * @param precisionTimeChangeOperation (List&lt;PrecisionTimeChangeOperation&gt;)  (required)
         * @return operation
         */
        public UpdateTimeServicesByIdOper body(List<PrecisionTimeChangeOperation> precisionTimeChangeOperation) {
            reqSpec.setBody(precisionTimeChangeOperation);
            return this;
        }

        public static final String SERVICE_ID_PATH = "serviceId";

        /**
         * @param serviceId (UUID) Service UUID (required)
         * @return operation
         */
        public UpdateTimeServicesByIdOper serviceIdPath(Object serviceId) {
            reqSpec.addPathParam(SERVICE_ID_PATH, serviceId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdateTimeServicesByIdOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdateTimeServicesByIdOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
