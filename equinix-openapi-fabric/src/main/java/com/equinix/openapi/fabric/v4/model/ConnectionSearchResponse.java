/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * List of connections
 */
@JsonPropertyOrder({
  ConnectionSearchResponse.JSON_PROPERTY_PAGINATION,
  ConnectionSearchResponse.JSON_PROPERTY_SORT,
  ConnectionSearchResponse.JSON_PROPERTY_DATA
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ConnectionSearchResponse {
  public static final String JSON_PROPERTY_PAGINATION = "pagination";
  private Pagination pagination;

  public static final String JSON_PROPERTY_SORT = "sort";
  private List<SortCriteriaResponse> sort = new ArrayList<>();

  public static final String JSON_PROPERTY_DATA = "data";
  private List<Connection> data = new ArrayList<>();

  public ConnectionSearchResponse() {
  }

  public ConnectionSearchResponse pagination(Pagination pagination) {
    
    this.pagination = pagination;
    return this;
  }

   /**
   * Get pagination
   * @return pagination
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAGINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Pagination getPagination() {
    return pagination;
  }


  @JsonProperty(JSON_PROPERTY_PAGINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPagination(Pagination pagination) {
    this.pagination = pagination;
  }


  public ConnectionSearchResponse sort(List<SortCriteriaResponse> sort) {
    
    this.sort = sort;
    return this;
  }

  public ConnectionSearchResponse addSortItem(SortCriteriaResponse sortItem) {
    if (this.sort == null) {
      this.sort = new ArrayList<>();
    }
    this.sort.add(sortItem);
    return this;
  }

   /**
   * Get sort
   * @return sort
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SortCriteriaResponse> getSort() {
    return sort;
  }


  @JsonProperty(JSON_PROPERTY_SORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSort(List<SortCriteriaResponse> sort) {
    this.sort = sort;
  }


  public ConnectionSearchResponse data(List<Connection> data) {
    
    this.data = data;
    return this;
  }

  public ConnectionSearchResponse addDataItem(Connection dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<>();
    }
    this.data.add(dataItem);
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Connection> getData() {
    return data;
  }


  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setData(List<Connection> data) {
    this.data = data;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectionSearchResponse connectionSearchResponse = (ConnectionSearchResponse) o;
    return Objects.equals(this.pagination, connectionSearchResponse.pagination) &&
        Objects.equals(this.sort, connectionSearchResponse.sort) &&
        Objects.equals(this.data, connectionSearchResponse.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pagination, sort, data);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectionSearchResponse {\n");
    sb.append("    pagination: ").append(toIndentedString(pagination)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

