/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.v4.model.*;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

import static io.restassured.http.Method.*;

public class ConnectionsApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private ConnectionsApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static ConnectionsApi connections(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new ConnectionsApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                createConnection(),
                createConnectionAction(),
                deleteConnectionByUuid(),
                getConnectionByUuid(),
                searchConnections(),
                updateConnectionByUuid(),
                validateConnections()
        );
    }

    public CreateConnectionOper createConnection() {
        return new CreateConnectionOper(createReqSpec());
    }

    public CreateConnectionActionOper createConnectionAction() {
        return new CreateConnectionActionOper(createReqSpec());
    }

    public DeleteConnectionByUuidOper deleteConnectionByUuid() {
        return new DeleteConnectionByUuidOper(createReqSpec());
    }

    public GetConnectionByUuidOper getConnectionByUuid() {
        return new GetConnectionByUuidOper(createReqSpec());
    }

    public SearchConnectionsOper searchConnections() {
        return new SearchConnectionsOper(createReqSpec());
    }

    public UpdateConnectionByUuidOper updateConnectionByUuid() {
        return new UpdateConnectionByUuidOper(createReqSpec());
    }

    public ValidateConnectionsOper validateConnections() {
        return new ValidateConnectionsOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public ConnectionsApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Create Connection
     * This API provides capability to create user&#39;s virtual connection
     *
     * @see #body  (required)
     * return Connection
     */
    public static class CreateConnectionOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/connections";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateConnectionOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/connections
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/connections
         * @param handler handler
         * @return Connection
         */
        public Connection executeAs(Function<Response, Response> handler) {
            TypeRef<Connection> type = new TypeRef<Connection>(){};
            return execute(handler).as(type);
        }

         /**
         * @param connectionPostRequest (ConnectionPostRequest)  (required)
         * @return operation
         */
        public CreateConnectionOper body(ConnectionPostRequest connectionPostRequest) {
            reqSpec.setBody(connectionPostRequest);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateConnectionOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateConnectionOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Connection Actions
     * This API provides capability to accept/reject user&#39;s virtual connection
     *
     * @see #connectionIdPath Connection Id (required)
     * @see #body  (required)
     * return ConnectionAction
     */
    public static class CreateConnectionActionOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/connections/{connectionId}/actions";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateConnectionActionOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/connections/{connectionId}/actions
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/connections/{connectionId}/actions
         * @param handler handler
         * @return ConnectionAction
         */
        public ConnectionAction executeAs(Function<Response, Response> handler) {
            TypeRef<ConnectionAction> type = new TypeRef<ConnectionAction>(){};
            return execute(handler).as(type);
        }

         /**
         * @param connectionActionRequest (ConnectionActionRequest)  (required)
         * @return operation
         */
        public CreateConnectionActionOper body(ConnectionActionRequest connectionActionRequest) {
            reqSpec.setBody(connectionActionRequest);
            return this;
        }

        public static final String CONNECTION_ID_PATH = "connectionId";

        /**
         * @param connectionId (String) Connection Id (required)
         * @return operation
         */
        public CreateConnectionActionOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateConnectionActionOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateConnectionActionOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Delete by ID
     * Delete Connection by ID
     *
     * @see #connectionIdPath Connection UUID (required)
     * return Connection
     */
    public static class DeleteConnectionByUuidOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/fabric/v4/connections/{connectionId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteConnectionByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /fabric/v4/connections/{connectionId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * DELETE /fabric/v4/connections/{connectionId}
         * @param handler handler
         * @return Connection
         */
        public Connection executeAs(Function<Response, Response> handler) {
            TypeRef<Connection> type = new TypeRef<Connection>(){};
            return execute(handler).as(type);
        }

        public static final String CONNECTION_ID_PATH = "connectionId";

        /**
         * @param connectionId (String) Connection UUID (required)
         * @return operation
         */
        public DeleteConnectionByUuidOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteConnectionByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteConnectionByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Connection by ID
     * The API provides capability to get user&#39;s virtual connection details (Service Tokens, Access Points, Link Protocols, etc) by it&#39;s connection ID (UUID)
     *
     * @see #connectionIdPath Connection Id (required)
     * @see #directionQuery Connection Direction (optional)
     * return Connection
     */
    public static class GetConnectionByUuidOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/connections/{connectionId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetConnectionByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/connections/{connectionId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/connections/{connectionId}
         * @param handler handler
         * @return Connection
         */
        public Connection executeAs(Function<Response, Response> handler) {
            TypeRef<Connection> type = new TypeRef<Connection>(){};
            return execute(handler).as(type);
        }

        public static final String CONNECTION_ID_PATH = "connectionId";

        /**
         * @param connectionId (String) Connection Id (required)
         * @return operation
         */
        public GetConnectionByUuidOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        public static final String DIRECTION_QUERY = "direction";

        /**
         * @param direction (ConnectionDirection) Connection Direction (optional)
         * @return operation
         */
        public GetConnectionByUuidOper directionQuery(Object... direction) {
            reqSpec.addQueryParam(DIRECTION_QUERY, direction);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetConnectionByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetConnectionByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Search connections
     * The API provides capability to get list of user&#39;s virtual connections using search criteria, including optional filtering, pagination and sorting
     *
     * @see #body  (required)
     * return ConnectionSearchResponse
     */
    public static class SearchConnectionsOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/connections/search";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public SearchConnectionsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/connections/search
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/connections/search
         * @param handler handler
         * @return ConnectionSearchResponse
         */
        public ConnectionSearchResponse executeAs(Function<Response, Response> handler) {
            TypeRef<ConnectionSearchResponse> type = new TypeRef<ConnectionSearchResponse>(){};
            return execute(handler).as(type);
        }

         /**
         * @param searchRequest (SearchRequest)  (required)
         * @return operation
         */
        public SearchConnectionsOper body(SearchRequest searchRequest) {
            reqSpec.setBody(searchRequest);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public SearchConnectionsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public SearchConnectionsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Update by ID
     * Update Connection by ID
     *
     * @see #connectionIdPath Connection Id (required)
     * @see #body  (required)
     * return Connection
     */
    public static class UpdateConnectionByUuidOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/fabric/v4/connections/{connectionId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateConnectionByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json-patch+json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /fabric/v4/connections/{connectionId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /fabric/v4/connections/{connectionId}
         * @param handler handler
         * @return Connection
         */
        public Connection executeAs(Function<Response, Response> handler) {
            TypeRef<Connection> type = new TypeRef<Connection>(){};
            return execute(handler).as(type);
        }

         /**
         * @param connectionChangeOperation (List&lt;ConnectionChangeOperation&gt;)  (required)
         * @return operation
         */
        public UpdateConnectionByUuidOper body(List<ConnectionChangeOperation> connectionChangeOperation) {
            reqSpec.setBody(connectionChangeOperation);
            return this;
        }

        public static final String CONNECTION_ID_PATH = "connectionId";

        /**
         * @param connectionId (String) Connection Id (required)
         * @return operation
         */
        public UpdateConnectionByUuidOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdateConnectionByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdateConnectionByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Validate Connection
     * This API provides capability to validate by auth key
     *
     * @see #body  (required)
     * return ConnectionResponse
     */
    public static class ValidateConnectionsOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/connections/validate";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ValidateConnectionsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/connections/validate
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/connections/validate
         * @param handler handler
         * @return ConnectionResponse
         */
        public ConnectionResponse executeAs(Function<Response, Response> handler) {
            TypeRef<ConnectionResponse> type = new TypeRef<ConnectionResponse>(){};
            return execute(handler).as(type);
        }

         /**
         * @param validateRequest (ValidateRequest)  (required)
         * @return operation
         */
        public ValidateConnectionsOper body(ValidateRequest validateRequest) {
            reqSpec.setBody(validateRequest);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ValidateConnectionsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ValidateConnectionsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
