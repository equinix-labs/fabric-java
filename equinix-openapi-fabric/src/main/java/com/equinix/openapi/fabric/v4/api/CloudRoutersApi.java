/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.v4.model.*;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

import static io.restassured.http.Method.*;

public class CloudRoutersApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private CloudRoutersApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static CloudRoutersApi cloudRouters(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new CloudRoutersApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                createCloudRouter(),
                createCloudRouterAction(),
                deleteCloudRouterByUuid(),
                getCloudRouterActions(),
                getCloudRouterByUuid(),
                getCloudRouterPackageByCode(),
                getCloudRouterPackages(),
                searchCloudRouterRoutes(),
                searchCloudRouters(),
                updateCloudRouterByUuid()
        );
    }

    public CreateCloudRouterOper createCloudRouter() {
        return new CreateCloudRouterOper(createReqSpec());
    }

    public CreateCloudRouterActionOper createCloudRouterAction() {
        return new CreateCloudRouterActionOper(createReqSpec());
    }

    public DeleteCloudRouterByUuidOper deleteCloudRouterByUuid() {
        return new DeleteCloudRouterByUuidOper(createReqSpec());
    }

    public GetCloudRouterActionsOper getCloudRouterActions() {
        return new GetCloudRouterActionsOper(createReqSpec());
    }

    public GetCloudRouterByUuidOper getCloudRouterByUuid() {
        return new GetCloudRouterByUuidOper(createReqSpec());
    }

    public GetCloudRouterPackageByCodeOper getCloudRouterPackageByCode() {
        return new GetCloudRouterPackageByCodeOper(createReqSpec());
    }

    public GetCloudRouterPackagesOper getCloudRouterPackages() {
        return new GetCloudRouterPackagesOper(createReqSpec());
    }

    public SearchCloudRouterRoutesOper searchCloudRouterRoutes() {
        return new SearchCloudRouterRoutesOper(createReqSpec());
    }

    public SearchCloudRoutersOper searchCloudRouters() {
        return new SearchCloudRoutersOper(createReqSpec());
    }

    public UpdateCloudRouterByUuidOper updateCloudRouterByUuid() {
        return new UpdateCloudRouterByUuidOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public CloudRoutersApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Create Routers
     * This API provides capability to create user&#39;s Cloud Routers
     *
     * @see #body  (required)
     * return CloudRouter
     */
    public static class CreateCloudRouterOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/routers";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateCloudRouterOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/routers
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/routers
         * @param handler handler
         * @return CloudRouter
         */
        public CloudRouter executeAs(Function<Response, Response> handler) {
            TypeRef<CloudRouter> type = new TypeRef<CloudRouter>(){};
            return execute(handler).as(type);
        }

         /**
         * @param cloudRouterPostRequest (CloudRouterPostRequest)  (required)
         * @return operation
         */
        public CreateCloudRouterOper body(CloudRouterPostRequest cloudRouterPostRequest) {
            reqSpec.setBody(cloudRouterPostRequest);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateCloudRouterOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateCloudRouterOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Route table actions
     * This API provides capability to refresh route table and bgp session summary information
     *
     * @see #routerIdPath Router UUID (required)
     * @see #body  (required)
     * return CloudRouterActionResponse
     */
    public static class CreateCloudRouterActionOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/routers/{routerId}/actions";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateCloudRouterActionOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/routers/{routerId}/actions
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/routers/{routerId}/actions
         * @param handler handler
         * @return CloudRouterActionResponse
         */
        public CloudRouterActionResponse executeAs(Function<Response, Response> handler) {
            TypeRef<CloudRouterActionResponse> type = new TypeRef<CloudRouterActionResponse>(){};
            return execute(handler).as(type);
        }

         /**
         * @param cloudRouterActionRequest (CloudRouterActionRequest)  (required)
         * @return operation
         */
        public CreateCloudRouterActionOper body(CloudRouterActionRequest cloudRouterActionRequest) {
            reqSpec.setBody(cloudRouterActionRequest);
            return this;
        }

        public static final String ROUTER_ID_PATH = "routerId";

        /**
         * @param routerId (UUID) Router UUID (required)
         * @return operation
         */
        public CreateCloudRouterActionOper routerIdPath(Object routerId) {
            reqSpec.addPathParam(ROUTER_ID_PATH, routerId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateCloudRouterActionOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateCloudRouterActionOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Delete Routers
     * This API provides capability to delete user&#39;s Cloud Routers
     *
     * @see #routerIdPath Cloud Router UUID (required)
     */
    public static class DeleteCloudRouterByUuidOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/fabric/v4/routers/{routerId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteCloudRouterByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /fabric/v4/routers/{routerId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String ROUTER_ID_PATH = "routerId";

        /**
         * @param routerId (UUID) Cloud Router UUID (required)
         * @return operation
         */
        public DeleteCloudRouterByUuidOper routerIdPath(Object routerId) {
            reqSpec.addPathParam(ROUTER_ID_PATH, routerId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteCloudRouterByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteCloudRouterByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get actions
     * This API provides capability to fetch action status
     *
     * @see #routerIdPath Router UUID (required)
     * @see #stateQuery Action state (optional)
     * return CloudRouterActionResponse
     */
    public static class GetCloudRouterActionsOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/routers/{routerId}/actions";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetCloudRouterActionsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/routers/{routerId}/actions
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/routers/{routerId}/actions
         * @param handler handler
         * @return CloudRouterActionResponse
         */
        public CloudRouterActionResponse executeAs(Function<Response, Response> handler) {
            TypeRef<CloudRouterActionResponse> type = new TypeRef<CloudRouterActionResponse>(){};
            return execute(handler).as(type);
        }

        public static final String ROUTER_ID_PATH = "routerId";

        /**
         * @param routerId (UUID) Router UUID (required)
         * @return operation
         */
        public GetCloudRouterActionsOper routerIdPath(Object routerId) {
            reqSpec.addPathParam(ROUTER_ID_PATH, routerId);
            return this;
        }

        public static final String STATE_QUERY = "state";

        /**
         * @param state (CloudRouterActionState) Action state (optional)
         * @return operation
         */
        public GetCloudRouterActionsOper stateQuery(Object... state) {
            reqSpec.addQueryParam(STATE_QUERY, state);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetCloudRouterActionsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetCloudRouterActionsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Routers
     * This API provides capability to retrieve user&#39;s Cloud Routers
     *
     * @see #routerIdPath Cloud Router UUID (required)
     * return CloudRouter
     */
    public static class GetCloudRouterByUuidOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/routers/{routerId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetCloudRouterByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/routers/{routerId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/routers/{routerId}
         * @param handler handler
         * @return CloudRouter
         */
        public CloudRouter executeAs(Function<Response, Response> handler) {
            TypeRef<CloudRouter> type = new TypeRef<CloudRouter>(){};
            return execute(handler).as(type);
        }

        public static final String ROUTER_ID_PATH = "routerId";

        /**
         * @param routerId (UUID) Cloud Router UUID (required)
         * @return operation
         */
        public GetCloudRouterByUuidOper routerIdPath(Object routerId) {
            reqSpec.addPathParam(ROUTER_ID_PATH, routerId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetCloudRouterByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetCloudRouterByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Package Details
     * This API provides capability to retrieve user&#39;s Cloud Routers Package Details
     *
     * @see #routerPackageCodePath Equinix-assigned Cloud Router package identifier (required)
     * return CloudRouterPackage
     */
    public static class GetCloudRouterPackageByCodeOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/routerPackages/{routerPackageCode}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetCloudRouterPackageByCodeOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/routerPackages/{routerPackageCode}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/routerPackages/{routerPackageCode}
         * @param handler handler
         * @return CloudRouterPackage
         */
        public CloudRouterPackage executeAs(Function<Response, Response> handler) {
            TypeRef<CloudRouterPackage> type = new TypeRef<CloudRouterPackage>(){};
            return execute(handler).as(type);
        }

        public static final String ROUTER_PACKAGE_CODE_PATH = "routerPackageCode";

        /**
         * @param routerPackageCode (RouterPackageCode) Equinix-assigned Cloud Router package identifier (required)
         * @return operation
         */
        public GetCloudRouterPackageByCodeOper routerPackageCodePath(Object routerPackageCode) {
            reqSpec.addPathParam(ROUTER_PACKAGE_CODE_PATH, routerPackageCode);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetCloudRouterPackageByCodeOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetCloudRouterPackageByCodeOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * List Packages
     * This API provides capability to retrieve user&#39;s Cloud Routers Packages
     *
     * @see #offsetQuery offset (optional)
     * @see #limitQuery number of records to fetch (optional)
     * return PackageResponse
     */
    public static class GetCloudRouterPackagesOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/routerPackages";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetCloudRouterPackagesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/routerPackages
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/routerPackages
         * @param handler handler
         * @return PackageResponse
         */
        public PackageResponse executeAs(Function<Response, Response> handler) {
            TypeRef<PackageResponse> type = new TypeRef<PackageResponse>(){};
            return execute(handler).as(type);
        }

        public static final String OFFSET_QUERY = "offset";

        /**
         * @param offset (Integer) offset (optional)
         * @return operation
         */
        public GetCloudRouterPackagesOper offsetQuery(Object... offset) {
            reqSpec.addQueryParam(OFFSET_QUERY, offset);
            return this;
        }

        public static final String LIMIT_QUERY = "limit";

        /**
         * @param limit (Integer) number of records to fetch (optional)
         * @return operation
         */
        public GetCloudRouterPackagesOper limitQuery(Object... limit) {
            reqSpec.addQueryParam(LIMIT_QUERY, limit);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetCloudRouterPackagesOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetCloudRouterPackagesOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Search Route Table
     * The API provides capability to get list of user&#39;s Fabric Cloud Router route table entries using search criteria, including optional filtering, pagination and sorting
     *
     * @see #routerIdPath Router UUID (required)
     * @see #body  (required)
     * return RouteTableEntrySearchResponse
     */
    public static class SearchCloudRouterRoutesOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/routers/{routerId}/routes/search";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public SearchCloudRouterRoutesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/routers/{routerId}/routes/search
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/routers/{routerId}/routes/search
         * @param handler handler
         * @return RouteTableEntrySearchResponse
         */
        public RouteTableEntrySearchResponse executeAs(Function<Response, Response> handler) {
            TypeRef<RouteTableEntrySearchResponse> type = new TypeRef<RouteTableEntrySearchResponse>(){};
            return execute(handler).as(type);
        }

         /**
         * @param routeTableEntrySearchRequest (RouteTableEntrySearchRequest)  (required)
         * @return operation
         */
        public SearchCloudRouterRoutesOper body(RouteTableEntrySearchRequest routeTableEntrySearchRequest) {
            reqSpec.setBody(routeTableEntrySearchRequest);
            return this;
        }

        public static final String ROUTER_ID_PATH = "routerId";

        /**
         * @param routerId (UUID) Router UUID (required)
         * @return operation
         */
        public SearchCloudRouterRoutesOper routerIdPath(Object routerId) {
            reqSpec.addPathParam(ROUTER_ID_PATH, routerId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public SearchCloudRouterRoutesOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public SearchCloudRouterRoutesOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Search Routers
     * The API provides capability to get list of user&#39;s Cloud Routers using search criteria, including optional filtering, pagination and sorting
     *
     * @see #body  (required)
     * return SearchResponse
     */
    public static class SearchCloudRoutersOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/routers/search";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public SearchCloudRoutersOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/routers/search
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/routers/search
         * @param handler handler
         * @return SearchResponse
         */
        public SearchResponse executeAs(Function<Response, Response> handler) {
            TypeRef<SearchResponse> type = new TypeRef<SearchResponse>(){};
            return execute(handler).as(type);
        }

         /**
         * @param cloudRouterSearchRequest (CloudRouterSearchRequest)  (required)
         * @return operation
         */
        public SearchCloudRoutersOper body(CloudRouterSearchRequest cloudRouterSearchRequest) {
            reqSpec.setBody(cloudRouterSearchRequest);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public SearchCloudRoutersOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public SearchCloudRoutersOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Update Routers
     * This API provides capability to update user&#39;s Cloud Routers
     *
     * @see #routerIdPath Cloud Router UUID (required)
     * @see #body  (required)
     * return CloudRouter
     */
    public static class UpdateCloudRouterByUuidOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/fabric/v4/routers/{routerId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateCloudRouterByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json-patch+json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /fabric/v4/routers/{routerId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /fabric/v4/routers/{routerId}
         * @param handler handler
         * @return CloudRouter
         */
        public CloudRouter executeAs(Function<Response, Response> handler) {
            TypeRef<CloudRouter> type = new TypeRef<CloudRouter>(){};
            return execute(handler).as(type);
        }

         /**
         * @param cloudRouterChangeOperation (List&lt;CloudRouterChangeOperation&gt;)  (required)
         * @return operation
         */
        public UpdateCloudRouterByUuidOper body(List<CloudRouterChangeOperation> cloudRouterChangeOperation) {
            reqSpec.setBody(cloudRouterChangeOperation);
            return this;
        }

        public static final String ROUTER_ID_PATH = "routerId";

        /**
         * @param routerId (UUID) Cloud Router UUID (required)
         * @return operation
         */
        public UpdateCloudRouterByUuidOper routerIdPath(Object routerId) {
            reqSpec.addPathParam(ROUTER_ID_PATH, routerId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdateCloudRouterByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdateCloudRouterByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
