/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.time.OffsetDateTime;
import java.util.Objects;

/**
 * Bandwidth utilization statistics for a specified interval.
 */
@JsonPropertyOrder({
  Metrics.JSON_PROPERTY_INTERVAL_END_TIMESTAMP,
  Metrics.JSON_PROPERTY_MAX,
  Metrics.JSON_PROPERTY_MEAN
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Metrics {
  public static final String JSON_PROPERTY_INTERVAL_END_TIMESTAMP = "intervalEndTimestamp";
  private OffsetDateTime intervalEndTimestamp;

  public static final String JSON_PROPERTY_MAX = "max";
  private Float max;

  public static final String JSON_PROPERTY_MEAN = "mean";
  private Float mean;

  public Metrics() {
  }

  public Metrics intervalEndTimestamp(OffsetDateTime intervalEndTimestamp) {
    
    this.intervalEndTimestamp = intervalEndTimestamp;
    return this;
  }

   /**
   * Interval end timestamp
   * @return intervalEndTimestamp
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERVAL_END_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getIntervalEndTimestamp() {
    return intervalEndTimestamp;
  }


  @JsonProperty(JSON_PROPERTY_INTERVAL_END_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIntervalEndTimestamp(OffsetDateTime intervalEndTimestamp) {
    this.intervalEndTimestamp = intervalEndTimestamp;
  }


  public Metrics max(Float max) {
    
    this.max = max;
    return this;
  }

   /**
   * Max bandwidth within statistics object time interval, represented in units specified by response \&quot;units\&quot; field
   * @return max
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getMax() {
    return max;
  }


  @JsonProperty(JSON_PROPERTY_MAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMax(Float max) {
    this.max = max;
  }


  public Metrics mean(Float mean) {
    
    this.mean = mean;
    return this;
  }

   /**
   * Mean bandwidth within statistics object time interval, represented in units specified by response \&quot;units\&quot; field
   * @return mean
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MEAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getMean() {
    return mean;
  }


  @JsonProperty(JSON_PROPERTY_MEAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMean(Float mean) {
    this.mean = mean;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Metrics metrics = (Metrics) o;
    return Objects.equals(this.intervalEndTimestamp, metrics.intervalEndTimestamp) &&
        Objects.equals(this.max, metrics.max) &&
        Objects.equals(this.mean, metrics.mean);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intervalEndTimestamp, max, mean);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Metrics {\n");
    sb.append("    intervalEndTimestamp: ").append(toIndentedString(intervalEndTimestamp)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    mean: ").append(toIndentedString(mean)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

