/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.v4.model.ConnectionRouteFilterData;
import com.equinix.openapi.fabric.v4.model.ConnectionRouteFiltersBase;
import com.equinix.openapi.fabric.v4.model.Error;
import com.equinix.openapi.fabric.v4.model.GetAllConnectionRouteFiltersResponse;
import com.equinix.openapi.fabric.v4.model.GetRouteFilterGetConnectionsResponse;
import com.equinix.openapi.fabric.v4.model.RouteFilterChangeData;
import com.equinix.openapi.fabric.v4.model.RouteFilterChangeDataResponse;
import com.equinix.openapi.fabric.v4.model.RouteFiltersBase;
import com.equinix.openapi.fabric.v4.model.RouteFiltersData;
import com.equinix.openapi.fabric.v4.model.RouteFiltersPatchRequestItem;
import com.equinix.openapi.fabric.v4.model.RouteFiltersSearchBase;
import com.equinix.openapi.fabric.v4.model.RouteFiltersSearchResponse;
import java.util.UUID;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import static io.restassured.http.Method.*;

public class RouteFiltersApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private RouteFiltersApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static RouteFiltersApi routeFilters(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new RouteFiltersApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                attachConnectionRouteFilter(),
                createRouteFilter(),
                deleteRouteFilterByUuid(),
                detachConnectionRouteFilter(),
                getConnectionRouteFilterByUuid(),
                getConnectionRouteFilters(),
                getRouteFilterByUuid(),
                getRouteFilterChangeByUuid(),
                getRouteFilterChanges(),
                getRouteFilterConnections(),
                patchRouteFilterByUuid(),
                searchRouteFilters()
        );
    }

    public AttachConnectionRouteFilterOper attachConnectionRouteFilter() {
        return new AttachConnectionRouteFilterOper(createReqSpec());
    }

    public CreateRouteFilterOper createRouteFilter() {
        return new CreateRouteFilterOper(createReqSpec());
    }

    public DeleteRouteFilterByUuidOper deleteRouteFilterByUuid() {
        return new DeleteRouteFilterByUuidOper(createReqSpec());
    }

    public DetachConnectionRouteFilterOper detachConnectionRouteFilter() {
        return new DetachConnectionRouteFilterOper(createReqSpec());
    }

    public GetConnectionRouteFilterByUuidOper getConnectionRouteFilterByUuid() {
        return new GetConnectionRouteFilterByUuidOper(createReqSpec());
    }

    public GetConnectionRouteFiltersOper getConnectionRouteFilters() {
        return new GetConnectionRouteFiltersOper(createReqSpec());
    }

    public GetRouteFilterByUuidOper getRouteFilterByUuid() {
        return new GetRouteFilterByUuidOper(createReqSpec());
    }

    public GetRouteFilterChangeByUuidOper getRouteFilterChangeByUuid() {
        return new GetRouteFilterChangeByUuidOper(createReqSpec());
    }

    public GetRouteFilterChangesOper getRouteFilterChanges() {
        return new GetRouteFilterChangesOper(createReqSpec());
    }

    public GetRouteFilterConnectionsOper getRouteFilterConnections() {
        return new GetRouteFilterConnectionsOper(createReqSpec());
    }

    public PatchRouteFilterByUuidOper patchRouteFilterByUuid() {
        return new PatchRouteFilterByUuidOper(createReqSpec());
    }

    public SearchRouteFiltersOper searchRouteFilters() {
        return new SearchRouteFiltersOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public RouteFiltersApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Attach Route Filter
     * This API provides capability to attach a Route Filter to a Connection
     *
     * @see #routeFilterIdPath Route Filters Id (required)
     * @see #connectionIdPath Connection Id (required)
     * @see #body  (required)
     * return ConnectionRouteFilterData
     */
    public static class AttachConnectionRouteFilterOper implements Oper {

        public static final Method REQ_METHOD = PUT;
        public static final String REQ_URI = "/fabric/v4/connections/{connectionId}/routeFilters/{routeFilterId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public AttachConnectionRouteFilterOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /fabric/v4/connections/{connectionId}/routeFilters/{routeFilterId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PUT /fabric/v4/connections/{connectionId}/routeFilters/{routeFilterId}
         * @param handler handler
         * @return ConnectionRouteFilterData
         */
        public ConnectionRouteFilterData executeAs(Function<Response, Response> handler) {
            TypeRef<ConnectionRouteFilterData> type = new TypeRef<ConnectionRouteFilterData>(){};
            return execute(handler).as(type);
        }

         /**
         * @param connectionRouteFiltersBase (ConnectionRouteFiltersBase)  (required)
         * @return operation
         */
        public AttachConnectionRouteFilterOper body(ConnectionRouteFiltersBase connectionRouteFiltersBase) {
            reqSpec.setBody(connectionRouteFiltersBase);
            return this;
        }

        public static final String ROUTE_FILTER_ID_PATH = "routeFilterId";

        /**
         * @param routeFilterId (String) Route Filters Id (required)
         * @return operation
         */
        public AttachConnectionRouteFilterOper routeFilterIdPath(Object routeFilterId) {
            reqSpec.addPathParam(ROUTE_FILTER_ID_PATH, routeFilterId);
            return this;
        }

        public static final String CONNECTION_ID_PATH = "connectionId";

        /**
         * @param connectionId (String) Connection Id (required)
         * @return operation
         */
        public AttachConnectionRouteFilterOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public AttachConnectionRouteFilterOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public AttachConnectionRouteFilterOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Create Route Filters
     * This API provides capability to create a Route Filter
     *
     * @see #body  (required)
     * return RouteFiltersData
     */
    public static class CreateRouteFilterOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/routeFilters";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateRouteFilterOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/routeFilters
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/routeFilters
         * @param handler handler
         * @return RouteFiltersData
         */
        public RouteFiltersData executeAs(Function<Response, Response> handler) {
            TypeRef<RouteFiltersData> type = new TypeRef<RouteFiltersData>(){};
            return execute(handler).as(type);
        }

         /**
         * @param routeFiltersBase (RouteFiltersBase)  (required)
         * @return operation
         */
        public CreateRouteFilterOper body(RouteFiltersBase routeFiltersBase) {
            reqSpec.setBody(routeFiltersBase);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateRouteFilterOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateRouteFilterOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Delete Route Filter
     * This API provides capability to delete a Route Filter
     *
     * @see #routeFilterIdPath Route Filters Id (required)
     * return RouteFiltersData
     */
    public static class DeleteRouteFilterByUuidOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/fabric/v4/routeFilters/{routeFilterId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteRouteFilterByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /fabric/v4/routeFilters/{routeFilterId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * DELETE /fabric/v4/routeFilters/{routeFilterId}
         * @param handler handler
         * @return RouteFiltersData
         */
        public RouteFiltersData executeAs(Function<Response, Response> handler) {
            TypeRef<RouteFiltersData> type = new TypeRef<RouteFiltersData>(){};
            return execute(handler).as(type);
        }

        public static final String ROUTE_FILTER_ID_PATH = "routeFilterId";

        /**
         * @param routeFilterId (String) Route Filters Id (required)
         * @return operation
         */
        public DeleteRouteFilterByUuidOper routeFilterIdPath(Object routeFilterId) {
            reqSpec.addPathParam(ROUTE_FILTER_ID_PATH, routeFilterId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteRouteFilterByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteRouteFilterByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Detach Route Filter
     * This API provides capability to detach a Route Filter from a Connection
     *
     * @see #routeFilterIdPath Route Filters Id (required)
     * @see #connectionIdPath Connection Id (required)
     * return ConnectionRouteFilterData
     */
    public static class DetachConnectionRouteFilterOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/fabric/v4/connections/{connectionId}/routeFilters/{routeFilterId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DetachConnectionRouteFilterOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /fabric/v4/connections/{connectionId}/routeFilters/{routeFilterId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * DELETE /fabric/v4/connections/{connectionId}/routeFilters/{routeFilterId}
         * @param handler handler
         * @return ConnectionRouteFilterData
         */
        public ConnectionRouteFilterData executeAs(Function<Response, Response> handler) {
            TypeRef<ConnectionRouteFilterData> type = new TypeRef<ConnectionRouteFilterData>(){};
            return execute(handler).as(type);
        }

        public static final String ROUTE_FILTER_ID_PATH = "routeFilterId";

        /**
         * @param routeFilterId (String) Route Filters Id (required)
         * @return operation
         */
        public DetachConnectionRouteFilterOper routeFilterIdPath(Object routeFilterId) {
            reqSpec.addPathParam(ROUTE_FILTER_ID_PATH, routeFilterId);
            return this;
        }

        public static final String CONNECTION_ID_PATH = "connectionId";

        /**
         * @param connectionId (String) Connection Id (required)
         * @return operation
         */
        public DetachConnectionRouteFilterOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DetachConnectionRouteFilterOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DetachConnectionRouteFilterOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Route Filter
     * This API provides capability to view a specific Route Filter attached to a Connection
     *
     * @see #routeFilterIdPath Route Filters Id (required)
     * @see #connectionIdPath Connection Id (required)
     * return ConnectionRouteFilterData
     */
    public static class GetConnectionRouteFilterByUuidOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/connections/{connectionId}/routeFilters/{routeFilterId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetConnectionRouteFilterByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/connections/{connectionId}/routeFilters/{routeFilterId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/connections/{connectionId}/routeFilters/{routeFilterId}
         * @param handler handler
         * @return ConnectionRouteFilterData
         */
        public ConnectionRouteFilterData executeAs(Function<Response, Response> handler) {
            TypeRef<ConnectionRouteFilterData> type = new TypeRef<ConnectionRouteFilterData>(){};
            return execute(handler).as(type);
        }

        public static final String ROUTE_FILTER_ID_PATH = "routeFilterId";

        /**
         * @param routeFilterId (String) Route Filters Id (required)
         * @return operation
         */
        public GetConnectionRouteFilterByUuidOper routeFilterIdPath(Object routeFilterId) {
            reqSpec.addPathParam(ROUTE_FILTER_ID_PATH, routeFilterId);
            return this;
        }

        public static final String CONNECTION_ID_PATH = "connectionId";

        /**
         * @param connectionId (String) Connection Id (required)
         * @return operation
         */
        public GetConnectionRouteFilterByUuidOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetConnectionRouteFilterByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetConnectionRouteFilterByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get All RouteFilters
     * This API provides capability to view all Route Filters attached to a Connection
     *
     * @see #connectionIdPath Connection Id (required)
     * return GetAllConnectionRouteFiltersResponse
     */
    public static class GetConnectionRouteFiltersOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/connections/{connectionId}/routeFilters";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetConnectionRouteFiltersOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/connections/{connectionId}/routeFilters
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/connections/{connectionId}/routeFilters
         * @param handler handler
         * @return GetAllConnectionRouteFiltersResponse
         */
        public GetAllConnectionRouteFiltersResponse executeAs(Function<Response, Response> handler) {
            TypeRef<GetAllConnectionRouteFiltersResponse> type = new TypeRef<GetAllConnectionRouteFiltersResponse>(){};
            return execute(handler).as(type);
        }

        public static final String CONNECTION_ID_PATH = "connectionId";

        /**
         * @param connectionId (String) Connection Id (required)
         * @return operation
         */
        public GetConnectionRouteFiltersOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetConnectionRouteFiltersOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetConnectionRouteFiltersOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Filter By UUID
     * This API provides capability to view a Route Filter by UUID
     *
     * @see #routeFilterIdPath Route Filters Id (required)
     * return RouteFiltersData
     */
    public static class GetRouteFilterByUuidOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/routeFilters/{routeFilterId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetRouteFilterByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/routeFilters/{routeFilterId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/routeFilters/{routeFilterId}
         * @param handler handler
         * @return RouteFiltersData
         */
        public RouteFiltersData executeAs(Function<Response, Response> handler) {
            TypeRef<RouteFiltersData> type = new TypeRef<RouteFiltersData>(){};
            return execute(handler).as(type);
        }

        public static final String ROUTE_FILTER_ID_PATH = "routeFilterId";

        /**
         * @param routeFilterId (String) Route Filters Id (required)
         * @return operation
         */
        public GetRouteFilterByUuidOper routeFilterIdPath(Object routeFilterId) {
            reqSpec.addPathParam(ROUTE_FILTER_ID_PATH, routeFilterId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetRouteFilterByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetRouteFilterByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Change By ID
     * This API provides capability to retrieve a specific Route Filter&#39;s Changes
     *
     * @see #routeFilterIdPath Route Filters Id (required)
     * @see #changeIdPath Routing Protocol Change UUID (required)
     * return RouteFilterChangeData
     */
    public static class GetRouteFilterChangeByUuidOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/routeFilters/{routeFilterId}/changes/{changeId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetRouteFilterChangeByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/routeFilters/{routeFilterId}/changes/{changeId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/routeFilters/{routeFilterId}/changes/{changeId}
         * @param handler handler
         * @return RouteFilterChangeData
         */
        public RouteFilterChangeData executeAs(Function<Response, Response> handler) {
            TypeRef<RouteFilterChangeData> type = new TypeRef<RouteFilterChangeData>(){};
            return execute(handler).as(type);
        }

        public static final String ROUTE_FILTER_ID_PATH = "routeFilterId";

        /**
         * @param routeFilterId (String) Route Filters Id (required)
         * @return operation
         */
        public GetRouteFilterChangeByUuidOper routeFilterIdPath(Object routeFilterId) {
            reqSpec.addPathParam(ROUTE_FILTER_ID_PATH, routeFilterId);
            return this;
        }

        public static final String CHANGE_ID_PATH = "changeId";

        /**
         * @param changeId (UUID) Routing Protocol Change UUID (required)
         * @return operation
         */
        public GetRouteFilterChangeByUuidOper changeIdPath(Object changeId) {
            reqSpec.addPathParam(CHANGE_ID_PATH, changeId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetRouteFilterChangeByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetRouteFilterChangeByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get All Changes
     * This API provides capability to retrieve all of a Route Filter&#39;s Changes
     *
     * @see #routeFilterIdPath Route Filters Id (required)
     * @see #offsetQuery offset (optional)
     * @see #limitQuery number of records to fetch (optional)
     * return RouteFilterChangeDataResponse
     */
    public static class GetRouteFilterChangesOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/routeFilters/{routeFilterId}/changes";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetRouteFilterChangesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/routeFilters/{routeFilterId}/changes
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/routeFilters/{routeFilterId}/changes
         * @param handler handler
         * @return RouteFilterChangeDataResponse
         */
        public RouteFilterChangeDataResponse executeAs(Function<Response, Response> handler) {
            TypeRef<RouteFilterChangeDataResponse> type = new TypeRef<RouteFilterChangeDataResponse>(){};
            return execute(handler).as(type);
        }

        public static final String ROUTE_FILTER_ID_PATH = "routeFilterId";

        /**
         * @param routeFilterId (String) Route Filters Id (required)
         * @return operation
         */
        public GetRouteFilterChangesOper routeFilterIdPath(Object routeFilterId) {
            reqSpec.addPathParam(ROUTE_FILTER_ID_PATH, routeFilterId);
            return this;
        }

        public static final String OFFSET_QUERY = "offset";

        /**
         * @param offset (Integer) offset (optional)
         * @return operation
         */
        public GetRouteFilterChangesOper offsetQuery(Object... offset) {
            reqSpec.addQueryParam(OFFSET_QUERY, offset);
            return this;
        }

        public static final String LIMIT_QUERY = "limit";

        /**
         * @param limit (Integer) number of records to fetch (optional)
         * @return operation
         */
        public GetRouteFilterChangesOper limitQuery(Object... limit) {
            reqSpec.addQueryParam(LIMIT_QUERY, limit);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetRouteFilterChangesOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetRouteFilterChangesOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Connections
     * This API provides capability to view all Connections using the Route Filter
     *
     * @see #routeFilterIdPath Route Filters Id (required)
     * return GetRouteFilterGetConnectionsResponse
     */
    public static class GetRouteFilterConnectionsOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/routeFilters/{routeFilterId}/connections";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetRouteFilterConnectionsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/routeFilters/{routeFilterId}/connections
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/routeFilters/{routeFilterId}/connections
         * @param handler handler
         * @return GetRouteFilterGetConnectionsResponse
         */
        public GetRouteFilterGetConnectionsResponse executeAs(Function<Response, Response> handler) {
            TypeRef<GetRouteFilterGetConnectionsResponse> type = new TypeRef<GetRouteFilterGetConnectionsResponse>(){};
            return execute(handler).as(type);
        }

        public static final String ROUTE_FILTER_ID_PATH = "routeFilterId";

        /**
         * @param routeFilterId (String) Route Filters Id (required)
         * @return operation
         */
        public GetRouteFilterConnectionsOper routeFilterIdPath(Object routeFilterId) {
            reqSpec.addPathParam(ROUTE_FILTER_ID_PATH, routeFilterId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetRouteFilterConnectionsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetRouteFilterConnectionsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Patch Route Filter
     * This API provides capability to partially update a Route Filter
     *
     * @see #routeFilterIdPath Route Filters Id (required)
     * @see #body  (required)
     * return RouteFiltersData
     */
    public static class PatchRouteFilterByUuidOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/fabric/v4/routeFilters/{routeFilterId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PatchRouteFilterByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /fabric/v4/routeFilters/{routeFilterId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /fabric/v4/routeFilters/{routeFilterId}
         * @param handler handler
         * @return RouteFiltersData
         */
        public RouteFiltersData executeAs(Function<Response, Response> handler) {
            TypeRef<RouteFiltersData> type = new TypeRef<RouteFiltersData>(){};
            return execute(handler).as(type);
        }

         /**
         * @param routeFiltersPatchRequestItem (List&lt;RouteFiltersPatchRequestItem&gt;)  (required)
         * @return operation
         */
        public PatchRouteFilterByUuidOper body(List<RouteFiltersPatchRequestItem> routeFiltersPatchRequestItem) {
            reqSpec.setBody(routeFiltersPatchRequestItem);
            return this;
        }

        public static final String ROUTE_FILTER_ID_PATH = "routeFilterId";

        /**
         * @param routeFilterId (String) Route Filters Id (required)
         * @return operation
         */
        public PatchRouteFilterByUuidOper routeFilterIdPath(Object routeFilterId) {
            reqSpec.addPathParam(ROUTE_FILTER_ID_PATH, routeFilterId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PatchRouteFilterByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PatchRouteFilterByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Search Route Filters
     * This API provides capability to search Route Filters
     *
     * @see #body  (required)
     * return RouteFiltersSearchResponse
     */
    public static class SearchRouteFiltersOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/routeFilters/search";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public SearchRouteFiltersOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/routeFilters/search
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/routeFilters/search
         * @param handler handler
         * @return RouteFiltersSearchResponse
         */
        public RouteFiltersSearchResponse executeAs(Function<Response, Response> handler) {
            TypeRef<RouteFiltersSearchResponse> type = new TypeRef<RouteFiltersSearchResponse>(){};
            return execute(handler).as(type);
        }

         /**
         * @param routeFiltersSearchBase (RouteFiltersSearchBase)  (required)
         * @return operation
         */
        public SearchRouteFiltersOper body(RouteFiltersSearchBase routeFiltersSearchBase) {
            reqSpec.setBody(routeFiltersSearchBase);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public SearchRouteFiltersOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public SearchRouteFiltersOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
