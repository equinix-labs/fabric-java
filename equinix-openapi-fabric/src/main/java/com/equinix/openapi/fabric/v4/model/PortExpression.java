/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import com.fasterxml.jackson.annotation.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * PortExpression
 */
@JsonPropertyOrder({
  PortExpression.JSON_PROPERTY_AND,
  PortExpression.JSON_PROPERTY_OR,
  PortExpression.JSON_PROPERTY_PROPERTY,
  PortExpression.JSON_PROPERTY_OPERATOR,
  PortExpression.JSON_PROPERTY_VALUES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PortExpression {
  public static final String JSON_PROPERTY_AND = "and";
  private List<PortExpression> and = new ArrayList<>();

  public static final String JSON_PROPERTY_OR = "or";
  private List<PortExpression> or = new ArrayList<>();

  public static final String JSON_PROPERTY_PROPERTY = "property";
  private PortSearchFieldName property;

  /**
   * Gets or Sets operator
   */
  public enum OperatorEnum {
    EQUAL("=");

    private String value;

    OperatorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OperatorEnum fromValue(String value) {
      for (OperatorEnum b : OperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_OPERATOR = "operator";
  private OperatorEnum operator;

  public static final String JSON_PROPERTY_VALUES = "values";
  private List<String> values = new ArrayList<>();

  public PortExpression() {
  }

  public PortExpression and(List<PortExpression> and) {
    
    this.and = and;
    return this;
  }

  public PortExpression addAndItem(PortExpression andItem) {
    if (this.and == null) {
      this.and = new ArrayList<>();
    }
    this.and.add(andItem);
    return this;
  }

   /**
   * Get and
   * @return and
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PortExpression> getAnd() {
    return and;
  }


  @JsonProperty(JSON_PROPERTY_AND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAnd(List<PortExpression> and) {
    this.and = and;
  }


  public PortExpression or(List<PortExpression> or) {
    
    this.or = or;
    return this;
  }

  public PortExpression addOrItem(PortExpression orItem) {
    if (this.or == null) {
      this.or = new ArrayList<>();
    }
    this.or.add(orItem);
    return this;
  }

   /**
   * Get or
   * @return or
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PortExpression> getOr() {
    return or;
  }


  @JsonProperty(JSON_PROPERTY_OR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOr(List<PortExpression> or) {
    this.or = or;
  }


  public PortExpression property(PortSearchFieldName property) {
    
    this.property = property;
    return this;
  }

   /**
   * Get property
   * @return property
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortSearchFieldName getProperty() {
    return property;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperty(PortSearchFieldName property) {
    this.property = property;
  }


  public PortExpression operator(OperatorEnum operator) {
    
    this.operator = operator;
    return this;
  }

   /**
   * Get operator
   * @return operator
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OperatorEnum getOperator() {
    return operator;
  }


  @JsonProperty(JSON_PROPERTY_OPERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperator(OperatorEnum operator) {
    this.operator = operator;
  }


  public PortExpression values(List<String> values) {
    
    this.values = values;
    return this;
  }

  public PortExpression addValuesItem(String valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Get values
   * @return values
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getValues() {
    return values;
  }


  @JsonProperty(JSON_PROPERTY_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValues(List<String> values) {
    this.values = values;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortExpression portExpression = (PortExpression) o;
    return Objects.equals(this.and, portExpression.and) &&
        Objects.equals(this.or, portExpression.or) &&
        Objects.equals(this.property, portExpression.property) &&
        Objects.equals(this.operator, portExpression.operator) &&
        Objects.equals(this.values, portExpression.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(and, or, property, operator, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortExpression {\n");
    sb.append("    and: ").append(toIndentedString(and)).append("\n");
    sb.append("    or: ").append(toIndentedString(or)).append("\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

