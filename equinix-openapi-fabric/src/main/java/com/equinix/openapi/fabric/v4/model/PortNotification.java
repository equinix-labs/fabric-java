/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PortNotification
 */
@JsonPropertyOrder({
  PortNotification.JSON_PROPERTY_TYPE,
  PortNotification.JSON_PROPERTY_REGISTERED_USERS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PortNotification {
  /**
   * Notification Type
   */
  public enum TypeEnum {
    NOTIFICATION("NOTIFICATION"),
    
    TECHNICAL("TECHNICAL"),
    
    PEERING("PEERING"),
    
    ESCALATION("ESCALATION");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_REGISTERED_USERS = "registeredUsers";
  private List<String> registeredUsers = new ArrayList<>();

  public PortNotification() {
  }

  public PortNotification type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Notification Type
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public PortNotification registeredUsers(List<String> registeredUsers) {
    
    this.registeredUsers = registeredUsers;
    return this;
  }

  public PortNotification addRegisteredUsersItem(String registeredUsersItem) {
    this.registeredUsers.add(registeredUsersItem);
    return this;
  }

   /**
   * Array of registered users
   * @return registeredUsers
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REGISTERED_USERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getRegisteredUsers() {
    return registeredUsers;
  }


  @JsonProperty(JSON_PROPERTY_REGISTERED_USERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRegisteredUsers(List<String> registeredUsers) {
    this.registeredUsers = registeredUsers;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortNotification portNotification = (PortNotification) o;
    return Objects.equals(this.type, portNotification.type) &&
        Objects.equals(this.registeredUsers, portNotification.registeredUsers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, registeredUsers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortNotification {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    registeredUsers: ").append(toIndentedString(registeredUsers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

