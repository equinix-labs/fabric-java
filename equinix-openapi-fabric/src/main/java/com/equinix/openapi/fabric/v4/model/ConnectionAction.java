/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.net.URI;
import java.util.Objects;

/**
 * Connection action
 */
@JsonPropertyOrder({
  ConnectionAction.JSON_PROPERTY_TYPE,
  ConnectionAction.JSON_PROPERTY_HREF,
  ConnectionAction.JSON_PROPERTY_UUID,
  ConnectionAction.JSON_PROPERTY_DESCRIPTION,
  ConnectionAction.JSON_PROPERTY_DATA,
  ConnectionAction.JSON_PROPERTY_CHANGE_LOG
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ConnectionAction {
  public static final String JSON_PROPERTY_TYPE = "type";
  private Actions type;

  public static final String JSON_PROPERTY_HREF = "href";
  private URI href;

  public static final String JSON_PROPERTY_UUID = "uuid";
  private String uuid;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_DATA = "data";
  private ConnectionAcceptanceData data;

  public static final String JSON_PROPERTY_CHANGE_LOG = "changeLog";
  private Changelog changeLog;

  public ConnectionAction() {
  }

  @JsonCreator
  public ConnectionAction(
    @JsonProperty(JSON_PROPERTY_HREF) URI href
  ) {
    this();
    this.href = href;
  }

  public ConnectionAction type(Actions type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Actions getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(Actions type) {
    this.type = type;
  }


   /**
   * Connection action URI
   * @return href
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getHref() {
    return href;
  }




  public ConnectionAction uuid(String uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Equinix-assigned connection identifier
   * @return uuid
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UUID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUuid() {
    return uuid;
  }


  @JsonProperty(JSON_PROPERTY_UUID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUuid(String uuid) {
    this.uuid = uuid;
  }


  public ConnectionAction description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Connection rejection reason detail
   * @return description
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public ConnectionAction data(ConnectionAcceptanceData data) {
    
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ConnectionAcceptanceData getData() {
    return data;
  }


  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setData(ConnectionAcceptanceData data) {
    this.data = data;
  }


  public ConnectionAction changeLog(Changelog changeLog) {
    
    this.changeLog = changeLog;
    return this;
  }

   /**
   * Get changeLog
   * @return changeLog
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHANGE_LOG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Changelog getChangeLog() {
    return changeLog;
  }


  @JsonProperty(JSON_PROPERTY_CHANGE_LOG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChangeLog(Changelog changeLog) {
    this.changeLog = changeLog;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectionAction connectionAction = (ConnectionAction) o;
    return Objects.equals(this.type, connectionAction.type) &&
        Objects.equals(this.href, connectionAction.href) &&
        Objects.equals(this.uuid, connectionAction.uuid) &&
        Objects.equals(this.description, connectionAction.description) &&
        Objects.equals(this.data, connectionAction.data) &&
        Objects.equals(this.changeLog, connectionAction.changeLog);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, href, uuid, description, data, changeLog);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectionAction {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    changeLog: ").append(toIndentedString(changeLog)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

