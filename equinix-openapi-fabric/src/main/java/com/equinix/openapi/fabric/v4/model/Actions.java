/*
 * Equinix Fabric API v4
 * Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br> </br> <b>Integrations (SDKs, Tools) links:</b></br> <a href=\"https://deploy.equinix.com/labs/fabric-java\\\">Fabric Java SDK</a> </br> <a href=\"https://deploy.equinix.com/labs/equinix-sdk-go\\\">Fabric Go SDK</a> </br> <a href=\"https://deploy.equinix.com/labs/terraform-provider-equinix\\\">Equinix Terraform Provider</a> </br> <a href=\"https://deploy.equinix.com/labs/terraform-equinix-fabric\\\">Fabric Terraform Modules</a> </br> <a href=\"https://deploy.equinix.com/labs/pulumi-provider-equinix/\">Equinix Pulumi Provider</a> </br>
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Connection action type
 */
@JsonAdapter(Actions.Adapter.class)
public enum Actions {
  
  CONNECTION_CREATION_ACCEPTANCE("CONNECTION_CREATION_ACCEPTANCE"),
  
  CONNECTION_CREATION_REJECTION("CONNECTION_CREATION_REJECTION"),
  
  CONNECTION_UPDATE_ACCEPTANCE("CONNECTION_UPDATE_ACCEPTANCE"),
  
  CONNECTION_UPDATE_REJECTION("CONNECTION_UPDATE_REJECTION"),
  
  CONNECTION_DELETION_ACCEPTANCE("CONNECTION_DELETION_ACCEPTANCE"),
  
  CONNECTION_REJECTION_ACCEPTANCE("CONNECTION_REJECTION_ACCEPTANCE"),
  
  CONNECTION_UPDATE_REQUEST("CONNECTION_UPDATE_REQUEST"),
  
  MIGRATION_EVPL_VC("MIGRATION_EVPL_VC"),
  
  CONNECTION_PROVIDER_STATUS_REQUEST("CONNECTION_PROVIDER_STATUS_REQUEST"),
  
  ACCEPT_HOSTED_CONNECTION("ACCEPT_HOSTED_CONNECTION"),
  
  CANCEL_EVPL_VC_DRAFT_ORDERS("CANCEL_EVPL_VC_DRAFT_ORDERS");

  private String value;

  Actions(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Actions fromValue(String value) {
    for (Actions b : Actions.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Actions> {
    @Override
    public void write(final JsonWriter jsonWriter, final Actions enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Actions read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Actions.fromValue(value);
    }
  }
}

