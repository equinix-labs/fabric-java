/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * IPv4 or IPv6 specific configuration
 */
@JsonPropertyOrder({
  LinkProtocolIpv4Ipv6Config.JSON_PROPERTY_LINK_PREFIX,
  LinkProtocolIpv4Ipv6Config.JSON_PROPERTY_LOCAL_IFACE_IP,
  LinkProtocolIpv4Ipv6Config.JSON_PROPERTY_REMOTE_IFACE_IP
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LinkProtocolIpv4Ipv6Config {
  public static final String JSON_PROPERTY_LINK_PREFIX = "linkPrefix";
  private String linkPrefix;

  public static final String JSON_PROPERTY_LOCAL_IFACE_IP = "localIfaceIp";
  private String localIfaceIp;

  public static final String JSON_PROPERTY_REMOTE_IFACE_IP = "remoteIfaceIp";
  private String remoteIfaceIp;

  public LinkProtocolIpv4Ipv6Config() {
  }

  public LinkProtocolIpv4Ipv6Config linkPrefix(String linkPrefix) {
    
    this.linkPrefix = linkPrefix;
    return this;
  }

   /**
   * Link subnet prefix
   * @return linkPrefix
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINK_PREFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLinkPrefix() {
    return linkPrefix;
  }


  @JsonProperty(JSON_PROPERTY_LINK_PREFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLinkPrefix(String linkPrefix) {
    this.linkPrefix = linkPrefix;
  }


  public LinkProtocolIpv4Ipv6Config localIfaceIp(String localIfaceIp) {
    
    this.localIfaceIp = localIfaceIp;
    return this;
  }

   /**
   * Prefix datatype when linkPrefix not specified
   * @return localIfaceIp
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCAL_IFACE_IP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLocalIfaceIp() {
    return localIfaceIp;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL_IFACE_IP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocalIfaceIp(String localIfaceIp) {
    this.localIfaceIp = localIfaceIp;
  }


  public LinkProtocolIpv4Ipv6Config remoteIfaceIp(String remoteIfaceIp) {
    
    this.remoteIfaceIp = remoteIfaceIp;
    return this;
  }

   /**
   * Equinix-side link interface address
   * @return remoteIfaceIp
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REMOTE_IFACE_IP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRemoteIfaceIp() {
    return remoteIfaceIp;
  }


  @JsonProperty(JSON_PROPERTY_REMOTE_IFACE_IP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemoteIfaceIp(String remoteIfaceIp) {
    this.remoteIfaceIp = remoteIfaceIp;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinkProtocolIpv4Ipv6Config linkProtocolIpv4Ipv6Config = (LinkProtocolIpv4Ipv6Config) o;
    return Objects.equals(this.linkPrefix, linkProtocolIpv4Ipv6Config.linkPrefix) &&
        Objects.equals(this.localIfaceIp, linkProtocolIpv4Ipv6Config.localIfaceIp) &&
        Objects.equals(this.remoteIfaceIp, linkProtocolIpv4Ipv6Config.remoteIfaceIp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(linkPrefix, localIfaceIp, remoteIfaceIp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinkProtocolIpv4Ipv6Config {\n");
    sb.append("    linkPrefix: ").append(toIndentedString(linkPrefix)).append("\n");
    sb.append("    localIfaceIp: ").append(toIndentedString(localIfaceIp)).append("\n");
    sb.append("    remoteIfaceIp: ").append(toIndentedString(remoteIfaceIp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

