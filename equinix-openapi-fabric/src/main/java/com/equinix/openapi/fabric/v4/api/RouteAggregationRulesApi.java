/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.ApiCallback;
import com.equinix.openapi.fabric.ApiClient;
import com.equinix.openapi.fabric.ApiException;
import com.equinix.openapi.fabric.ApiResponse;
import com.equinix.openapi.fabric.Configuration;
import com.equinix.openapi.fabric.Pair;
import com.equinix.openapi.fabric.ProgressRequestBody;
import com.equinix.openapi.fabric.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.equinix.openapi.fabric.v4.model.Error;
import com.equinix.openapi.fabric.v4.model.GetRouteAggregationRulesResponse;
import com.equinix.openapi.fabric.v4.model.RouteAggregationRulesBase;
import com.equinix.openapi.fabric.v4.model.RouteAggregationRulesChangeData;
import com.equinix.openapi.fabric.v4.model.RouteAggregationRulesChangeDataResponse;
import com.equinix.openapi.fabric.v4.model.RouteAggregationRulesData;
import com.equinix.openapi.fabric.v4.model.RouteAggregationRulesPatchRequestItem;
import com.equinix.openapi.fabric.v4.model.RouteAggregationRulesPostRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RouteAggregationRulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RouteAggregationRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RouteAggregationRulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createRouteAggregationRule
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRulesBase  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation Rule ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRouteAggregationRuleCall(String routeAggregationId, RouteAggregationRulesBase routeAggregationRulesBase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routeAggregationRulesBase;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeAggregations/{routeAggregationId}/routeAggregationRules"
            .replace("{" + "routeAggregationId" + "}", localVarApiClient.escapeString(routeAggregationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRouteAggregationRuleValidateBeforeCall(String routeAggregationId, RouteAggregationRulesBase routeAggregationRulesBase, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeAggregationId' is set
        if (routeAggregationId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationId' when calling createRouteAggregationRule(Async)");
        }

        // verify the required parameter 'routeAggregationRulesBase' is set
        if (routeAggregationRulesBase == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationRulesBase' when calling createRouteAggregationRule(Async)");
        }

        return createRouteAggregationRuleCall(routeAggregationId, routeAggregationRulesBase, _callback);

    }

    /**
     * Create RARule
     * This API provides capability to create a Route Aggregation Rule
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRulesBase  (required)
     * @return RouteAggregationRulesData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation Rule ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RouteAggregationRulesData createRouteAggregationRule(String routeAggregationId, RouteAggregationRulesBase routeAggregationRulesBase) throws ApiException {
        ApiResponse<RouteAggregationRulesData> localVarResp = createRouteAggregationRuleWithHttpInfo(routeAggregationId, routeAggregationRulesBase);
        return localVarResp.getData();
    }

    /**
     * Create RARule
     * This API provides capability to create a Route Aggregation Rule
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRulesBase  (required)
     * @return ApiResponse&lt;RouteAggregationRulesData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation Rule ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteAggregationRulesData> createRouteAggregationRuleWithHttpInfo(String routeAggregationId, RouteAggregationRulesBase routeAggregationRulesBase) throws ApiException {
        okhttp3.Call localVarCall = createRouteAggregationRuleValidateBeforeCall(routeAggregationId, routeAggregationRulesBase, null);
        Type localVarReturnType = new TypeToken<RouteAggregationRulesData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create RARule (asynchronously)
     * This API provides capability to create a Route Aggregation Rule
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRulesBase  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation Rule ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRouteAggregationRuleAsync(String routeAggregationId, RouteAggregationRulesBase routeAggregationRulesBase, final ApiCallback<RouteAggregationRulesData> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRouteAggregationRuleValidateBeforeCall(routeAggregationId, routeAggregationRulesBase, _callback);
        Type localVarReturnType = new TypeToken<RouteAggregationRulesData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRouteAggregationRulesInBulk
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRulesPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRouteAggregationRulesInBulkCall(String routeAggregationId, RouteAggregationRulesPostRequest routeAggregationRulesPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routeAggregationRulesPostRequest;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeAggregations/{routeAggregationId}/routeAggregationRules/bulk"
            .replace("{" + "routeAggregationId" + "}", localVarApiClient.escapeString(routeAggregationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRouteAggregationRulesInBulkValidateBeforeCall(String routeAggregationId, RouteAggregationRulesPostRequest routeAggregationRulesPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeAggregationId' is set
        if (routeAggregationId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationId' when calling createRouteAggregationRulesInBulk(Async)");
        }

        // verify the required parameter 'routeAggregationRulesPostRequest' is set
        if (routeAggregationRulesPostRequest == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationRulesPostRequest' when calling createRouteAggregationRulesInBulk(Async)");
        }

        return createRouteAggregationRulesInBulkCall(routeAggregationId, routeAggregationRulesPostRequest, _callback);

    }

    /**
     * Bulk RARules
     * This API provides capability to create bulk route aggregation rules
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRulesPostRequest  (required)
     * @return GetRouteAggregationRulesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public GetRouteAggregationRulesResponse createRouteAggregationRulesInBulk(String routeAggregationId, RouteAggregationRulesPostRequest routeAggregationRulesPostRequest) throws ApiException {
        ApiResponse<GetRouteAggregationRulesResponse> localVarResp = createRouteAggregationRulesInBulkWithHttpInfo(routeAggregationId, routeAggregationRulesPostRequest);
        return localVarResp.getData();
    }

    /**
     * Bulk RARules
     * This API provides capability to create bulk route aggregation rules
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRulesPostRequest  (required)
     * @return ApiResponse&lt;GetRouteAggregationRulesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRouteAggregationRulesResponse> createRouteAggregationRulesInBulkWithHttpInfo(String routeAggregationId, RouteAggregationRulesPostRequest routeAggregationRulesPostRequest) throws ApiException {
        okhttp3.Call localVarCall = createRouteAggregationRulesInBulkValidateBeforeCall(routeAggregationId, routeAggregationRulesPostRequest, null);
        Type localVarReturnType = new TypeToken<GetRouteAggregationRulesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bulk RARules (asynchronously)
     * This API provides capability to create bulk route aggregation rules
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRulesPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRouteAggregationRulesInBulkAsync(String routeAggregationId, RouteAggregationRulesPostRequest routeAggregationRulesPostRequest, final ApiCallback<GetRouteAggregationRulesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRouteAggregationRulesInBulkValidateBeforeCall(routeAggregationId, routeAggregationRulesPostRequest, _callback);
        Type localVarReturnType = new TypeToken<GetRouteAggregationRulesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRouteAggregationRuleByUuid
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRouteAggregationRuleByUuidCall(String routeAggregationId, String routeAggregationRuleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeAggregations/{routeAggregationId}/routeAggregationRules/{routeAggregationRuleId}"
            .replace("{" + "routeAggregationId" + "}", localVarApiClient.escapeString(routeAggregationId.toString()))
            .replace("{" + "routeAggregationRuleId" + "}", localVarApiClient.escapeString(routeAggregationRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRouteAggregationRuleByUuidValidateBeforeCall(String routeAggregationId, String routeAggregationRuleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeAggregationId' is set
        if (routeAggregationId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationId' when calling deleteRouteAggregationRuleByUuid(Async)");
        }

        // verify the required parameter 'routeAggregationRuleId' is set
        if (routeAggregationRuleId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationRuleId' when calling deleteRouteAggregationRuleByUuid(Async)");
        }

        return deleteRouteAggregationRuleByUuidCall(routeAggregationId, routeAggregationRuleId, _callback);

    }

    /**
     * DeleteRARule
     * This API provides capability to delete a Route aggregation Rule
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @return RouteAggregationRulesData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RouteAggregationRulesData deleteRouteAggregationRuleByUuid(String routeAggregationId, String routeAggregationRuleId) throws ApiException {
        ApiResponse<RouteAggregationRulesData> localVarResp = deleteRouteAggregationRuleByUuidWithHttpInfo(routeAggregationId, routeAggregationRuleId);
        return localVarResp.getData();
    }

    /**
     * DeleteRARule
     * This API provides capability to delete a Route aggregation Rule
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @return ApiResponse&lt;RouteAggregationRulesData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteAggregationRulesData> deleteRouteAggregationRuleByUuidWithHttpInfo(String routeAggregationId, String routeAggregationRuleId) throws ApiException {
        okhttp3.Call localVarCall = deleteRouteAggregationRuleByUuidValidateBeforeCall(routeAggregationId, routeAggregationRuleId, null);
        Type localVarReturnType = new TypeToken<RouteAggregationRulesData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DeleteRARule (asynchronously)
     * This API provides capability to delete a Route aggregation Rule
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRouteAggregationRuleByUuidAsync(String routeAggregationId, String routeAggregationRuleId, final ApiCallback<RouteAggregationRulesData> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRouteAggregationRuleByUuidValidateBeforeCall(routeAggregationId, routeAggregationRuleId, _callback);
        Type localVarReturnType = new TypeToken<RouteAggregationRulesData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRouteAggregationRuleByUuid
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteAggregationRuleByUuidCall(String routeAggregationId, String routeAggregationRuleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeAggregations/{routeAggregationId}/routeAggregationRules/{routeAggregationRuleId}"
            .replace("{" + "routeAggregationId" + "}", localVarApiClient.escapeString(routeAggregationId.toString()))
            .replace("{" + "routeAggregationRuleId" + "}", localVarApiClient.escapeString(routeAggregationRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRouteAggregationRuleByUuidValidateBeforeCall(String routeAggregationId, String routeAggregationRuleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeAggregationId' is set
        if (routeAggregationId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationId' when calling getRouteAggregationRuleByUuid(Async)");
        }

        // verify the required parameter 'routeAggregationRuleId' is set
        if (routeAggregationRuleId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationRuleId' when calling getRouteAggregationRuleByUuid(Async)");
        }

        return getRouteAggregationRuleByUuidCall(routeAggregationId, routeAggregationRuleId, _callback);

    }

    /**
     * GetRARule By UUID
     * This API provides capability to view a Route Aggregation Rule by UUID
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @return RouteAggregationRulesData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RouteAggregationRulesData getRouteAggregationRuleByUuid(String routeAggregationId, String routeAggregationRuleId) throws ApiException {
        ApiResponse<RouteAggregationRulesData> localVarResp = getRouteAggregationRuleByUuidWithHttpInfo(routeAggregationId, routeAggregationRuleId);
        return localVarResp.getData();
    }

    /**
     * GetRARule By UUID
     * This API provides capability to view a Route Aggregation Rule by UUID
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @return ApiResponse&lt;RouteAggregationRulesData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteAggregationRulesData> getRouteAggregationRuleByUuidWithHttpInfo(String routeAggregationId, String routeAggregationRuleId) throws ApiException {
        okhttp3.Call localVarCall = getRouteAggregationRuleByUuidValidateBeforeCall(routeAggregationId, routeAggregationRuleId, null);
        Type localVarReturnType = new TypeToken<RouteAggregationRulesData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetRARule By UUID (asynchronously)
     * This API provides capability to view a Route Aggregation Rule by UUID
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteAggregationRuleByUuidAsync(String routeAggregationId, String routeAggregationRuleId, final ApiCallback<RouteAggregationRulesData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRouteAggregationRuleByUuidValidateBeforeCall(routeAggregationId, routeAggregationRuleId, _callback);
        Type localVarReturnType = new TypeToken<RouteAggregationRulesData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRouteAggregationRuleChangeByUuid
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @param changeId Route Aggregation Rule Change UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Aggregation Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteAggregationRuleChangeByUuidCall(String routeAggregationId, String routeAggregationRuleId, UUID changeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeAggregations/{routeAggregationId}/routeAggregationRules/{routeAggregationRuleId}/changes/{changeId}"
            .replace("{" + "routeAggregationId" + "}", localVarApiClient.escapeString(routeAggregationId.toString()))
            .replace("{" + "routeAggregationRuleId" + "}", localVarApiClient.escapeString(routeAggregationRuleId.toString()))
            .replace("{" + "changeId" + "}", localVarApiClient.escapeString(changeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRouteAggregationRuleChangeByUuidValidateBeforeCall(String routeAggregationId, String routeAggregationRuleId, UUID changeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeAggregationId' is set
        if (routeAggregationId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationId' when calling getRouteAggregationRuleChangeByUuid(Async)");
        }

        // verify the required parameter 'routeAggregationRuleId' is set
        if (routeAggregationRuleId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationRuleId' when calling getRouteAggregationRuleChangeByUuid(Async)");
        }

        // verify the required parameter 'changeId' is set
        if (changeId == null) {
            throw new ApiException("Missing the required parameter 'changeId' when calling getRouteAggregationRuleChangeByUuid(Async)");
        }

        return getRouteAggregationRuleChangeByUuidCall(routeAggregationId, routeAggregationRuleId, changeId, _callback);

    }

    /**
     * Get Change By ID
     * This API provides capability to retrieve a specific Route Aggregation Rule&#39;s Changes
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @param changeId Route Aggregation Rule Change UUID (required)
     * @return RouteAggregationRulesChangeData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Aggregation Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RouteAggregationRulesChangeData getRouteAggregationRuleChangeByUuid(String routeAggregationId, String routeAggregationRuleId, UUID changeId) throws ApiException {
        ApiResponse<RouteAggregationRulesChangeData> localVarResp = getRouteAggregationRuleChangeByUuidWithHttpInfo(routeAggregationId, routeAggregationRuleId, changeId);
        return localVarResp.getData();
    }

    /**
     * Get Change By ID
     * This API provides capability to retrieve a specific Route Aggregation Rule&#39;s Changes
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @param changeId Route Aggregation Rule Change UUID (required)
     * @return ApiResponse&lt;RouteAggregationRulesChangeData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Aggregation Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteAggregationRulesChangeData> getRouteAggregationRuleChangeByUuidWithHttpInfo(String routeAggregationId, String routeAggregationRuleId, UUID changeId) throws ApiException {
        okhttp3.Call localVarCall = getRouteAggregationRuleChangeByUuidValidateBeforeCall(routeAggregationId, routeAggregationRuleId, changeId, null);
        Type localVarReturnType = new TypeToken<RouteAggregationRulesChangeData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Change By ID (asynchronously)
     * This API provides capability to retrieve a specific Route Aggregation Rule&#39;s Changes
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @param changeId Route Aggregation Rule Change UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Aggregation Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteAggregationRuleChangeByUuidAsync(String routeAggregationId, String routeAggregationRuleId, UUID changeId, final ApiCallback<RouteAggregationRulesChangeData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRouteAggregationRuleChangeByUuidValidateBeforeCall(routeAggregationId, routeAggregationRuleId, changeId, _callback);
        Type localVarReturnType = new TypeToken<RouteAggregationRulesChangeData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRouteAggregationRuleChanges
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Aggregation Rule Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteAggregationRuleChangesCall(String routeAggregationId, String routeAggregationRuleId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeAggregations/{routeAggregationId}/routeAggregationRules/{routeAggregationRuleId}/changes"
            .replace("{" + "routeAggregationId" + "}", localVarApiClient.escapeString(routeAggregationId.toString()))
            .replace("{" + "routeAggregationRuleId" + "}", localVarApiClient.escapeString(routeAggregationRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRouteAggregationRuleChangesValidateBeforeCall(String routeAggregationId, String routeAggregationRuleId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeAggregationId' is set
        if (routeAggregationId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationId' when calling getRouteAggregationRuleChanges(Async)");
        }

        // verify the required parameter 'routeAggregationRuleId' is set
        if (routeAggregationRuleId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationRuleId' when calling getRouteAggregationRuleChanges(Async)");
        }

        return getRouteAggregationRuleChangesCall(routeAggregationId, routeAggregationRuleId, offset, limit, _callback);

    }

    /**
     * Get All Changes
     * This API provides capability to retrieve all of a Route Aggregation Rule&#39;s Changes
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return RouteAggregationRulesChangeDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Aggregation Rule Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RouteAggregationRulesChangeDataResponse getRouteAggregationRuleChanges(String routeAggregationId, String routeAggregationRuleId, Integer offset, Integer limit) throws ApiException {
        ApiResponse<RouteAggregationRulesChangeDataResponse> localVarResp = getRouteAggregationRuleChangesWithHttpInfo(routeAggregationId, routeAggregationRuleId, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get All Changes
     * This API provides capability to retrieve all of a Route Aggregation Rule&#39;s Changes
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return ApiResponse&lt;RouteAggregationRulesChangeDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Aggregation Rule Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteAggregationRulesChangeDataResponse> getRouteAggregationRuleChangesWithHttpInfo(String routeAggregationId, String routeAggregationRuleId, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getRouteAggregationRuleChangesValidateBeforeCall(routeAggregationId, routeAggregationRuleId, offset, limit, null);
        Type localVarReturnType = new TypeToken<RouteAggregationRulesChangeDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Changes (asynchronously)
     * This API provides capability to retrieve all of a Route Aggregation Rule&#39;s Changes
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Aggregation Rule Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteAggregationRuleChangesAsync(String routeAggregationId, String routeAggregationRuleId, Integer offset, Integer limit, final ApiCallback<RouteAggregationRulesChangeDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRouteAggregationRuleChangesValidateBeforeCall(routeAggregationId, routeAggregationRuleId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<RouteAggregationRulesChangeDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRouteAggregationRules
     * @param routeAggregationId Route Aggregations Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation Rule ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteAggregationRulesCall(String routeAggregationId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeAggregations/{routeAggregationId}/routeAggregationRules"
            .replace("{" + "routeAggregationId" + "}", localVarApiClient.escapeString(routeAggregationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRouteAggregationRulesValidateBeforeCall(String routeAggregationId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeAggregationId' is set
        if (routeAggregationId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationId' when calling getRouteAggregationRules(Async)");
        }

        return getRouteAggregationRulesCall(routeAggregationId, offset, limit, _callback);

    }

    /**
     * GetRARules
     * This API provides capability to get all Route Aggregations Rules for Fabric
     * @param routeAggregationId Route Aggregations Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return GetRouteAggregationRulesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation Rule ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public GetRouteAggregationRulesResponse getRouteAggregationRules(String routeAggregationId, Integer offset, Integer limit) throws ApiException {
        ApiResponse<GetRouteAggregationRulesResponse> localVarResp = getRouteAggregationRulesWithHttpInfo(routeAggregationId, offset, limit);
        return localVarResp.getData();
    }

    /**
     * GetRARules
     * This API provides capability to get all Route Aggregations Rules for Fabric
     * @param routeAggregationId Route Aggregations Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return ApiResponse&lt;GetRouteAggregationRulesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation Rule ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRouteAggregationRulesResponse> getRouteAggregationRulesWithHttpInfo(String routeAggregationId, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getRouteAggregationRulesValidateBeforeCall(routeAggregationId, offset, limit, null);
        Type localVarReturnType = new TypeToken<GetRouteAggregationRulesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetRARules (asynchronously)
     * This API provides capability to get all Route Aggregations Rules for Fabric
     * @param routeAggregationId Route Aggregations Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation Rule ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteAggregationRulesAsync(String routeAggregationId, Integer offset, Integer limit, final ApiCallback<GetRouteAggregationRulesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRouteAggregationRulesValidateBeforeCall(routeAggregationId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetRouteAggregationRulesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchRouteAggregationRuleByUuid
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @param routeAggregationRulesPatchRequestItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchRouteAggregationRuleByUuidCall(String routeAggregationId, String routeAggregationRuleId, List<RouteAggregationRulesPatchRequestItem> routeAggregationRulesPatchRequestItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routeAggregationRulesPatchRequestItem;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeAggregations/{routeAggregationId}/routeAggregationRules/{routeAggregationRuleId}"
            .replace("{" + "routeAggregationId" + "}", localVarApiClient.escapeString(routeAggregationId.toString()))
            .replace("{" + "routeAggregationRuleId" + "}", localVarApiClient.escapeString(routeAggregationRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchRouteAggregationRuleByUuidValidateBeforeCall(String routeAggregationId, String routeAggregationRuleId, List<RouteAggregationRulesPatchRequestItem> routeAggregationRulesPatchRequestItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeAggregationId' is set
        if (routeAggregationId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationId' when calling patchRouteAggregationRuleByUuid(Async)");
        }

        // verify the required parameter 'routeAggregationRuleId' is set
        if (routeAggregationRuleId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationRuleId' when calling patchRouteAggregationRuleByUuid(Async)");
        }

        // verify the required parameter 'routeAggregationRulesPatchRequestItem' is set
        if (routeAggregationRulesPatchRequestItem == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationRulesPatchRequestItem' when calling patchRouteAggregationRuleByUuid(Async)");
        }

        return patchRouteAggregationRuleByUuidCall(routeAggregationId, routeAggregationRuleId, routeAggregationRulesPatchRequestItem, _callback);

    }

    /**
     * PatchRARule
     * This API provides capability to partially update a Route Aggregation Rule
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @param routeAggregationRulesPatchRequestItem  (required)
     * @return RouteAggregationRulesData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RouteAggregationRulesData patchRouteAggregationRuleByUuid(String routeAggregationId, String routeAggregationRuleId, List<RouteAggregationRulesPatchRequestItem> routeAggregationRulesPatchRequestItem) throws ApiException {
        ApiResponse<RouteAggregationRulesData> localVarResp = patchRouteAggregationRuleByUuidWithHttpInfo(routeAggregationId, routeAggregationRuleId, routeAggregationRulesPatchRequestItem);
        return localVarResp.getData();
    }

    /**
     * PatchRARule
     * This API provides capability to partially update a Route Aggregation Rule
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @param routeAggregationRulesPatchRequestItem  (required)
     * @return ApiResponse&lt;RouteAggregationRulesData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteAggregationRulesData> patchRouteAggregationRuleByUuidWithHttpInfo(String routeAggregationId, String routeAggregationRuleId, List<RouteAggregationRulesPatchRequestItem> routeAggregationRulesPatchRequestItem) throws ApiException {
        okhttp3.Call localVarCall = patchRouteAggregationRuleByUuidValidateBeforeCall(routeAggregationId, routeAggregationRuleId, routeAggregationRulesPatchRequestItem, null);
        Type localVarReturnType = new TypeToken<RouteAggregationRulesData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * PatchRARule (asynchronously)
     * This API provides capability to partially update a Route Aggregation Rule
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @param routeAggregationRulesPatchRequestItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchRouteAggregationRuleByUuidAsync(String routeAggregationId, String routeAggregationRuleId, List<RouteAggregationRulesPatchRequestItem> routeAggregationRulesPatchRequestItem, final ApiCallback<RouteAggregationRulesData> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchRouteAggregationRuleByUuidValidateBeforeCall(routeAggregationId, routeAggregationRuleId, routeAggregationRulesPatchRequestItem, _callback);
        Type localVarReturnType = new TypeToken<RouteAggregationRulesData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceRouteAggregationRuleByUuid
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @param routeAggregationRulesBase  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceRouteAggregationRuleByUuidCall(String routeAggregationId, String routeAggregationRuleId, RouteAggregationRulesBase routeAggregationRulesBase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routeAggregationRulesBase;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeAggregations/{routeAggregationId}/routeAggregationRules/{routeAggregationRuleId}"
            .replace("{" + "routeAggregationId" + "}", localVarApiClient.escapeString(routeAggregationId.toString()))
            .replace("{" + "routeAggregationRuleId" + "}", localVarApiClient.escapeString(routeAggregationRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceRouteAggregationRuleByUuidValidateBeforeCall(String routeAggregationId, String routeAggregationRuleId, RouteAggregationRulesBase routeAggregationRulesBase, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeAggregationId' is set
        if (routeAggregationId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationId' when calling replaceRouteAggregationRuleByUuid(Async)");
        }

        // verify the required parameter 'routeAggregationRuleId' is set
        if (routeAggregationRuleId == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationRuleId' when calling replaceRouteAggregationRuleByUuid(Async)");
        }

        // verify the required parameter 'routeAggregationRulesBase' is set
        if (routeAggregationRulesBase == null) {
            throw new ApiException("Missing the required parameter 'routeAggregationRulesBase' when calling replaceRouteAggregationRuleByUuid(Async)");
        }

        return replaceRouteAggregationRuleByUuidCall(routeAggregationId, routeAggregationRuleId, routeAggregationRulesBase, _callback);

    }

    /**
     * ReplaceRARule
     * This API provides capability to replace a Route Aggregation Rule completely
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @param routeAggregationRulesBase  (required)
     * @return RouteAggregationRulesData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RouteAggregationRulesData replaceRouteAggregationRuleByUuid(String routeAggregationId, String routeAggregationRuleId, RouteAggregationRulesBase routeAggregationRulesBase) throws ApiException {
        ApiResponse<RouteAggregationRulesData> localVarResp = replaceRouteAggregationRuleByUuidWithHttpInfo(routeAggregationId, routeAggregationRuleId, routeAggregationRulesBase);
        return localVarResp.getData();
    }

    /**
     * ReplaceRARule
     * This API provides capability to replace a Route Aggregation Rule completely
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @param routeAggregationRulesBase  (required)
     * @return ApiResponse&lt;RouteAggregationRulesData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteAggregationRulesData> replaceRouteAggregationRuleByUuidWithHttpInfo(String routeAggregationId, String routeAggregationRuleId, RouteAggregationRulesBase routeAggregationRulesBase) throws ApiException {
        okhttp3.Call localVarCall = replaceRouteAggregationRuleByUuidValidateBeforeCall(routeAggregationId, routeAggregationRuleId, routeAggregationRulesBase, null);
        Type localVarReturnType = new TypeToken<RouteAggregationRulesData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ReplaceRARule (asynchronously)
     * This API provides capability to replace a Route Aggregation Rule completely
     * @param routeAggregationId Route Aggregations Id (required)
     * @param routeAggregationRuleId Route Aggregation Rules Id (required)
     * @param routeAggregationRulesBase  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Aggregation ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceRouteAggregationRuleByUuidAsync(String routeAggregationId, String routeAggregationRuleId, RouteAggregationRulesBase routeAggregationRulesBase, final ApiCallback<RouteAggregationRulesData> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceRouteAggregationRuleByUuidValidateBeforeCall(routeAggregationId, routeAggregationRuleId, routeAggregationRulesBase, _callback);
        Type localVarReturnType = new TypeToken<RouteAggregationRulesData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
