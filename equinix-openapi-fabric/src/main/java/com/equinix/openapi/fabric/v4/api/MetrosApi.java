/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.v4.model.Metro;
import com.equinix.openapi.fabric.v4.model.MetroError;
import com.equinix.openapi.fabric.v4.model.MetroResponse;
import com.equinix.openapi.fabric.v4.model.Presence;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import static io.restassured.http.Method.*;

public class MetrosApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private MetrosApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static MetrosApi metros(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new MetrosApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                getMetroByCode(),
                getMetros()
        );
    }

    public GetMetroByCodeOper getMetroByCode() {
        return new GetMetroByCodeOper(createReqSpec());
    }

    public GetMetrosOper getMetros() {
        return new GetMetrosOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public MetrosApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Get Metro by Code
     * GET Metros retrieves all Equinix Fabric metros, as well as latency data between each metro location. .
     *
     * @see #metroCodePath Metro Code (required)
     * return Metro
     */
    public static class GetMetroByCodeOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/metros/{metroCode}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetMetroByCodeOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/metros/{metroCode}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/metros/{metroCode}
         * @param handler handler
         * @return Metro
         */
        public Metro executeAs(Function<Response, Response> handler) {
            TypeRef<Metro> type = new TypeRef<Metro>(){};
            return execute(handler).as(type);
        }

        public static final String METRO_CODE_PATH = "metroCode";

        /**
         * @param metroCode (String) Metro Code (required)
         * @return operation
         */
        public GetMetroByCodeOper metroCodePath(Object metroCode) {
            reqSpec.addPathParam(METRO_CODE_PATH, metroCode);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetMetroByCodeOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetMetroByCodeOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get all Metros
     * GET All Subscriber Metros with an option query parameter to return all Equinix Fabric metros in which the customer has a presence, as well as latency data for each location.
     *
     * @see #presenceQuery User On Boarded Metros based on Fabric resource availability (optional)
     * @see #offsetQuery offset (optional)
     * @see #limitQuery number of records to fetch (optional)
     * return MetroResponse
     */
    public static class GetMetrosOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/metros";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetMetrosOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/metros
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/metros
         * @param handler handler
         * @return MetroResponse
         */
        public MetroResponse executeAs(Function<Response, Response> handler) {
            TypeRef<MetroResponse> type = new TypeRef<MetroResponse>(){};
            return execute(handler).as(type);
        }

        public static final String PRESENCE_QUERY = "presence";

        /**
         * @param presence (Presence) User On Boarded Metros based on Fabric resource availability (optional)
         * @return operation
         */
        public GetMetrosOper presenceQuery(Object... presence) {
            reqSpec.addQueryParam(PRESENCE_QUERY, presence);
            return this;
        }

        public static final String OFFSET_QUERY = "offset";

        /**
         * @param offset (Integer) offset (optional)
         * @return operation
         */
        public GetMetrosOper offsetQuery(Object... offset) {
            reqSpec.addQueryParam(OFFSET_QUERY, offset);
            return this;
        }

        public static final String LIMIT_QUERY = "limit";

        /**
         * @param limit (Integer) number of records to fetch (optional)
         * @return operation
         */
        public GetMetrosOper limitQuery(Object... limit) {
            reqSpec.addQueryParam(LIMIT_QUERY, limit);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetMetrosOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetMetrosOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
