/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.ApiCallback;
import com.equinix.openapi.fabric.ApiClient;
import com.equinix.openapi.fabric.ApiException;
import com.equinix.openapi.fabric.ApiResponse;
import com.equinix.openapi.fabric.Configuration;
import com.equinix.openapi.fabric.Pair;
import com.equinix.openapi.fabric.ProgressRequestBody;
import com.equinix.openapi.fabric.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.equinix.openapi.fabric.v4.model.Error;
import com.equinix.openapi.fabric.v4.model.GetRouteFilterRulesResponse;
import com.equinix.openapi.fabric.v4.model.RouteFilterRulesBase;
import com.equinix.openapi.fabric.v4.model.RouteFilterRulesChangeData;
import com.equinix.openapi.fabric.v4.model.RouteFilterRulesChangeDataResponse;
import com.equinix.openapi.fabric.v4.model.RouteFilterRulesData;
import com.equinix.openapi.fabric.v4.model.RouteFilterRulesPatchRequestItem;
import com.equinix.openapi.fabric.v4.model.RouteFilterRulesPostRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RouteFilterRulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RouteFilterRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RouteFilterRulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createRouteFilterRule
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRulesBase  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter Rule ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRouteFilterRuleCall(String routeFilterId, RouteFilterRulesBase routeFilterRulesBase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routeFilterRulesBase;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeFilters/{routeFilterId}/routeFilterRules"
            .replace("{" + "routeFilterId" + "}", localVarApiClient.escapeString(routeFilterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRouteFilterRuleValidateBeforeCall(String routeFilterId, RouteFilterRulesBase routeFilterRulesBase, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeFilterId' is set
        if (routeFilterId == null) {
            throw new ApiException("Missing the required parameter 'routeFilterId' when calling createRouteFilterRule(Async)");
        }

        // verify the required parameter 'routeFilterRulesBase' is set
        if (routeFilterRulesBase == null) {
            throw new ApiException("Missing the required parameter 'routeFilterRulesBase' when calling createRouteFilterRule(Async)");
        }

        return createRouteFilterRuleCall(routeFilterId, routeFilterRulesBase, _callback);

    }

    /**
     * Create Route Filter Rule
     * This API provides capability to create a Route Filter Rule
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRulesBase  (required)
     * @return RouteFilterRulesData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter Rule ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RouteFilterRulesData createRouteFilterRule(String routeFilterId, RouteFilterRulesBase routeFilterRulesBase) throws ApiException {
        ApiResponse<RouteFilterRulesData> localVarResp = createRouteFilterRuleWithHttpInfo(routeFilterId, routeFilterRulesBase);
        return localVarResp.getData();
    }

    /**
     * Create Route Filter Rule
     * This API provides capability to create a Route Filter Rule
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRulesBase  (required)
     * @return ApiResponse&lt;RouteFilterRulesData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter Rule ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteFilterRulesData> createRouteFilterRuleWithHttpInfo(String routeFilterId, RouteFilterRulesBase routeFilterRulesBase) throws ApiException {
        okhttp3.Call localVarCall = createRouteFilterRuleValidateBeforeCall(routeFilterId, routeFilterRulesBase, null);
        Type localVarReturnType = new TypeToken<RouteFilterRulesData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Route Filter Rule (asynchronously)
     * This API provides capability to create a Route Filter Rule
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRulesBase  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter Rule ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRouteFilterRuleAsync(String routeFilterId, RouteFilterRulesBase routeFilterRulesBase, final ApiCallback<RouteFilterRulesData> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRouteFilterRuleValidateBeforeCall(routeFilterId, routeFilterRulesBase, _callback);
        Type localVarReturnType = new TypeToken<RouteFilterRulesData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRouteFilterRulesInBulk
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRulesPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRouteFilterRulesInBulkCall(String routeFilterId, RouteFilterRulesPostRequest routeFilterRulesPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routeFilterRulesPostRequest;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/bulk"
            .replace("{" + "routeFilterId" + "}", localVarApiClient.escapeString(routeFilterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRouteFilterRulesInBulkValidateBeforeCall(String routeFilterId, RouteFilterRulesPostRequest routeFilterRulesPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeFilterId' is set
        if (routeFilterId == null) {
            throw new ApiException("Missing the required parameter 'routeFilterId' when calling createRouteFilterRulesInBulk(Async)");
        }

        // verify the required parameter 'routeFilterRulesPostRequest' is set
        if (routeFilterRulesPostRequest == null) {
            throw new ApiException("Missing the required parameter 'routeFilterRulesPostRequest' when calling createRouteFilterRulesInBulk(Async)");
        }

        return createRouteFilterRulesInBulkCall(routeFilterId, routeFilterRulesPostRequest, _callback);

    }

    /**
     * Bulk Create Route Filter Rules
     * This API provides capability to create bulk route filter rules
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRulesPostRequest  (required)
     * @return GetRouteFilterRulesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public GetRouteFilterRulesResponse createRouteFilterRulesInBulk(String routeFilterId, RouteFilterRulesPostRequest routeFilterRulesPostRequest) throws ApiException {
        ApiResponse<GetRouteFilterRulesResponse> localVarResp = createRouteFilterRulesInBulkWithHttpInfo(routeFilterId, routeFilterRulesPostRequest);
        return localVarResp.getData();
    }

    /**
     * Bulk Create Route Filter Rules
     * This API provides capability to create bulk route filter rules
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRulesPostRequest  (required)
     * @return ApiResponse&lt;GetRouteFilterRulesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRouteFilterRulesResponse> createRouteFilterRulesInBulkWithHttpInfo(String routeFilterId, RouteFilterRulesPostRequest routeFilterRulesPostRequest) throws ApiException {
        okhttp3.Call localVarCall = createRouteFilterRulesInBulkValidateBeforeCall(routeFilterId, routeFilterRulesPostRequest, null);
        Type localVarReturnType = new TypeToken<GetRouteFilterRulesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bulk Create Route Filter Rules (asynchronously)
     * This API provides capability to create bulk route filter rules
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRulesPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRouteFilterRulesInBulkAsync(String routeFilterId, RouteFilterRulesPostRequest routeFilterRulesPostRequest, final ApiCallback<GetRouteFilterRulesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRouteFilterRulesInBulkValidateBeforeCall(routeFilterId, routeFilterRulesPostRequest, _callback);
        Type localVarReturnType = new TypeToken<GetRouteFilterRulesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRouteFilterRuleByUuid
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRouteFilterRuleByUuidCall(String routeFilterId, String routeFilterRuleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}"
            .replace("{" + "routeFilterId" + "}", localVarApiClient.escapeString(routeFilterId.toString()))
            .replace("{" + "routeFilterRuleId" + "}", localVarApiClient.escapeString(routeFilterRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRouteFilterRuleByUuidValidateBeforeCall(String routeFilterId, String routeFilterRuleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeFilterId' is set
        if (routeFilterId == null) {
            throw new ApiException("Missing the required parameter 'routeFilterId' when calling deleteRouteFilterRuleByUuid(Async)");
        }

        // verify the required parameter 'routeFilterRuleId' is set
        if (routeFilterRuleId == null) {
            throw new ApiException("Missing the required parameter 'routeFilterRuleId' when calling deleteRouteFilterRuleByUuid(Async)");
        }

        return deleteRouteFilterRuleByUuidCall(routeFilterId, routeFilterRuleId, _callback);

    }

    /**
     * Delete Route Filter Rule
     * This API provides capability to delete a Route Filter Rule
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @return RouteFilterRulesData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RouteFilterRulesData deleteRouteFilterRuleByUuid(String routeFilterId, String routeFilterRuleId) throws ApiException {
        ApiResponse<RouteFilterRulesData> localVarResp = deleteRouteFilterRuleByUuidWithHttpInfo(routeFilterId, routeFilterRuleId);
        return localVarResp.getData();
    }

    /**
     * Delete Route Filter Rule
     * This API provides capability to delete a Route Filter Rule
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @return ApiResponse&lt;RouteFilterRulesData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteFilterRulesData> deleteRouteFilterRuleByUuidWithHttpInfo(String routeFilterId, String routeFilterRuleId) throws ApiException {
        okhttp3.Call localVarCall = deleteRouteFilterRuleByUuidValidateBeforeCall(routeFilterId, routeFilterRuleId, null);
        Type localVarReturnType = new TypeToken<RouteFilterRulesData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Route Filter Rule (asynchronously)
     * This API provides capability to delete a Route Filter Rule
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRouteFilterRuleByUuidAsync(String routeFilterId, String routeFilterRuleId, final ApiCallback<RouteFilterRulesData> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRouteFilterRuleByUuidValidateBeforeCall(routeFilterId, routeFilterRuleId, _callback);
        Type localVarReturnType = new TypeToken<RouteFilterRulesData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRouteFilterRuleByUuid
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteFilterRuleByUuidCall(String routeFilterId, String routeFilterRuleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}"
            .replace("{" + "routeFilterId" + "}", localVarApiClient.escapeString(routeFilterId.toString()))
            .replace("{" + "routeFilterRuleId" + "}", localVarApiClient.escapeString(routeFilterRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRouteFilterRuleByUuidValidateBeforeCall(String routeFilterId, String routeFilterRuleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeFilterId' is set
        if (routeFilterId == null) {
            throw new ApiException("Missing the required parameter 'routeFilterId' when calling getRouteFilterRuleByUuid(Async)");
        }

        // verify the required parameter 'routeFilterRuleId' is set
        if (routeFilterRuleId == null) {
            throw new ApiException("Missing the required parameter 'routeFilterRuleId' when calling getRouteFilterRuleByUuid(Async)");
        }

        return getRouteFilterRuleByUuidCall(routeFilterId, routeFilterRuleId, _callback);

    }

    /**
     * Get Route Filter Rule By UUID
     * This API provides capability to view a Route Filter Rule by UUID
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @return RouteFilterRulesData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RouteFilterRulesData getRouteFilterRuleByUuid(String routeFilterId, String routeFilterRuleId) throws ApiException {
        ApiResponse<RouteFilterRulesData> localVarResp = getRouteFilterRuleByUuidWithHttpInfo(routeFilterId, routeFilterRuleId);
        return localVarResp.getData();
    }

    /**
     * Get Route Filter Rule By UUID
     * This API provides capability to view a Route Filter Rule by UUID
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @return ApiResponse&lt;RouteFilterRulesData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteFilterRulesData> getRouteFilterRuleByUuidWithHttpInfo(String routeFilterId, String routeFilterRuleId) throws ApiException {
        okhttp3.Call localVarCall = getRouteFilterRuleByUuidValidateBeforeCall(routeFilterId, routeFilterRuleId, null);
        Type localVarReturnType = new TypeToken<RouteFilterRulesData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Route Filter Rule By UUID (asynchronously)
     * This API provides capability to view a Route Filter Rule by UUID
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteFilterRuleByUuidAsync(String routeFilterId, String routeFilterRuleId, final ApiCallback<RouteFilterRulesData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRouteFilterRuleByUuidValidateBeforeCall(routeFilterId, routeFilterRuleId, _callback);
        Type localVarReturnType = new TypeToken<RouteFilterRulesData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRouteFilterRuleChangeByUuid
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @param changeId Route Filter Rule Change UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Filter Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteFilterRuleChangeByUuidCall(String routeFilterId, String routeFilterRuleId, UUID changeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}/changes/{changeId}"
            .replace("{" + "routeFilterId" + "}", localVarApiClient.escapeString(routeFilterId.toString()))
            .replace("{" + "routeFilterRuleId" + "}", localVarApiClient.escapeString(routeFilterRuleId.toString()))
            .replace("{" + "changeId" + "}", localVarApiClient.escapeString(changeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRouteFilterRuleChangeByUuidValidateBeforeCall(String routeFilterId, String routeFilterRuleId, UUID changeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeFilterId' is set
        if (routeFilterId == null) {
            throw new ApiException("Missing the required parameter 'routeFilterId' when calling getRouteFilterRuleChangeByUuid(Async)");
        }

        // verify the required parameter 'routeFilterRuleId' is set
        if (routeFilterRuleId == null) {
            throw new ApiException("Missing the required parameter 'routeFilterRuleId' when calling getRouteFilterRuleChangeByUuid(Async)");
        }

        // verify the required parameter 'changeId' is set
        if (changeId == null) {
            throw new ApiException("Missing the required parameter 'changeId' when calling getRouteFilterRuleChangeByUuid(Async)");
        }

        return getRouteFilterRuleChangeByUuidCall(routeFilterId, routeFilterRuleId, changeId, _callback);

    }

    /**
     * Get Change By ID
     * This API provides capability to retrieve a specific Route Filter Rule&#39;s Changes
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @param changeId Route Filter Rule Change UUID (required)
     * @return RouteFilterRulesChangeData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Filter Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RouteFilterRulesChangeData getRouteFilterRuleChangeByUuid(String routeFilterId, String routeFilterRuleId, UUID changeId) throws ApiException {
        ApiResponse<RouteFilterRulesChangeData> localVarResp = getRouteFilterRuleChangeByUuidWithHttpInfo(routeFilterId, routeFilterRuleId, changeId);
        return localVarResp.getData();
    }

    /**
     * Get Change By ID
     * This API provides capability to retrieve a specific Route Filter Rule&#39;s Changes
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @param changeId Route Filter Rule Change UUID (required)
     * @return ApiResponse&lt;RouteFilterRulesChangeData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Filter Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteFilterRulesChangeData> getRouteFilterRuleChangeByUuidWithHttpInfo(String routeFilterId, String routeFilterRuleId, UUID changeId) throws ApiException {
        okhttp3.Call localVarCall = getRouteFilterRuleChangeByUuidValidateBeforeCall(routeFilterId, routeFilterRuleId, changeId, null);
        Type localVarReturnType = new TypeToken<RouteFilterRulesChangeData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Change By ID (asynchronously)
     * This API provides capability to retrieve a specific Route Filter Rule&#39;s Changes
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @param changeId Route Filter Rule Change UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Filter Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteFilterRuleChangeByUuidAsync(String routeFilterId, String routeFilterRuleId, UUID changeId, final ApiCallback<RouteFilterRulesChangeData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRouteFilterRuleChangeByUuidValidateBeforeCall(routeFilterId, routeFilterRuleId, changeId, _callback);
        Type localVarReturnType = new TypeToken<RouteFilterRulesChangeData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRouteFilterRuleChanges
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Filter Rule Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteFilterRuleChangesCall(String routeFilterId, String routeFilterRuleId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}/changes"
            .replace("{" + "routeFilterId" + "}", localVarApiClient.escapeString(routeFilterId.toString()))
            .replace("{" + "routeFilterRuleId" + "}", localVarApiClient.escapeString(routeFilterRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRouteFilterRuleChangesValidateBeforeCall(String routeFilterId, String routeFilterRuleId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeFilterId' is set
        if (routeFilterId == null) {
            throw new ApiException("Missing the required parameter 'routeFilterId' when calling getRouteFilterRuleChanges(Async)");
        }

        // verify the required parameter 'routeFilterRuleId' is set
        if (routeFilterRuleId == null) {
            throw new ApiException("Missing the required parameter 'routeFilterRuleId' when calling getRouteFilterRuleChanges(Async)");
        }

        return getRouteFilterRuleChangesCall(routeFilterId, routeFilterRuleId, offset, limit, _callback);

    }

    /**
     * Get All Changes
     * This API provides capability to retrieve all of a Route Filter Rule&#39;s Changes
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return RouteFilterRulesChangeDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Filter Rule Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RouteFilterRulesChangeDataResponse getRouteFilterRuleChanges(String routeFilterId, String routeFilterRuleId, Integer offset, Integer limit) throws ApiException {
        ApiResponse<RouteFilterRulesChangeDataResponse> localVarResp = getRouteFilterRuleChangesWithHttpInfo(routeFilterId, routeFilterRuleId, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get All Changes
     * This API provides capability to retrieve all of a Route Filter Rule&#39;s Changes
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return ApiResponse&lt;RouteFilterRulesChangeDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Filter Rule Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteFilterRulesChangeDataResponse> getRouteFilterRuleChangesWithHttpInfo(String routeFilterId, String routeFilterRuleId, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getRouteFilterRuleChangesValidateBeforeCall(routeFilterId, routeFilterRuleId, offset, limit, null);
        Type localVarReturnType = new TypeToken<RouteFilterRulesChangeDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Changes (asynchronously)
     * This API provides capability to retrieve all of a Route Filter Rule&#39;s Changes
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Route Filter Rule Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteFilterRuleChangesAsync(String routeFilterId, String routeFilterRuleId, Integer offset, Integer limit, final ApiCallback<RouteFilterRulesChangeDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRouteFilterRuleChangesValidateBeforeCall(routeFilterId, routeFilterRuleId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<RouteFilterRulesChangeDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRouteFilterRules
     * @param routeFilterId Route Filters Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter Rule ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteFilterRulesCall(String routeFilterId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeFilters/{routeFilterId}/routeFilterRules"
            .replace("{" + "routeFilterId" + "}", localVarApiClient.escapeString(routeFilterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRouteFilterRulesValidateBeforeCall(String routeFilterId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeFilterId' is set
        if (routeFilterId == null) {
            throw new ApiException("Missing the required parameter 'routeFilterId' when calling getRouteFilterRules(Async)");
        }

        return getRouteFilterRulesCall(routeFilterId, offset, limit, _callback);

    }

    /**
     * Get Route Filter Rules
     * This API provides capability to get all Route Filters Rules for Fabric
     * @param routeFilterId Route Filters Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return GetRouteFilterRulesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter Rule ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public GetRouteFilterRulesResponse getRouteFilterRules(String routeFilterId, Integer offset, Integer limit) throws ApiException {
        ApiResponse<GetRouteFilterRulesResponse> localVarResp = getRouteFilterRulesWithHttpInfo(routeFilterId, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get Route Filter Rules
     * This API provides capability to get all Route Filters Rules for Fabric
     * @param routeFilterId Route Filters Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return ApiResponse&lt;GetRouteFilterRulesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter Rule ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRouteFilterRulesResponse> getRouteFilterRulesWithHttpInfo(String routeFilterId, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getRouteFilterRulesValidateBeforeCall(routeFilterId, offset, limit, null);
        Type localVarReturnType = new TypeToken<GetRouteFilterRulesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Route Filter Rules (asynchronously)
     * This API provides capability to get all Route Filters Rules for Fabric
     * @param routeFilterId Route Filters Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter Rule ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRouteFilterRulesAsync(String routeFilterId, Integer offset, Integer limit, final ApiCallback<GetRouteFilterRulesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRouteFilterRulesValidateBeforeCall(routeFilterId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetRouteFilterRulesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchRouteFilterRuleByUuid
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @param routeFilterRulesPatchRequestItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchRouteFilterRuleByUuidCall(String routeFilterId, String routeFilterRuleId, List<RouteFilterRulesPatchRequestItem> routeFilterRulesPatchRequestItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routeFilterRulesPatchRequestItem;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}"
            .replace("{" + "routeFilterId" + "}", localVarApiClient.escapeString(routeFilterId.toString()))
            .replace("{" + "routeFilterRuleId" + "}", localVarApiClient.escapeString(routeFilterRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchRouteFilterRuleByUuidValidateBeforeCall(String routeFilterId, String routeFilterRuleId, List<RouteFilterRulesPatchRequestItem> routeFilterRulesPatchRequestItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeFilterId' is set
        if (routeFilterId == null) {
            throw new ApiException("Missing the required parameter 'routeFilterId' when calling patchRouteFilterRuleByUuid(Async)");
        }

        // verify the required parameter 'routeFilterRuleId' is set
        if (routeFilterRuleId == null) {
            throw new ApiException("Missing the required parameter 'routeFilterRuleId' when calling patchRouteFilterRuleByUuid(Async)");
        }

        // verify the required parameter 'routeFilterRulesPatchRequestItem' is set
        if (routeFilterRulesPatchRequestItem == null) {
            throw new ApiException("Missing the required parameter 'routeFilterRulesPatchRequestItem' when calling patchRouteFilterRuleByUuid(Async)");
        }

        return patchRouteFilterRuleByUuidCall(routeFilterId, routeFilterRuleId, routeFilterRulesPatchRequestItem, _callback);

    }

    /**
     * Patch Route Filter Rule
     * This API provides capability to partially update a Route Filter Rule
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @param routeFilterRulesPatchRequestItem  (required)
     * @return RouteFilterRulesData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RouteFilterRulesData patchRouteFilterRuleByUuid(String routeFilterId, String routeFilterRuleId, List<RouteFilterRulesPatchRequestItem> routeFilterRulesPatchRequestItem) throws ApiException {
        ApiResponse<RouteFilterRulesData> localVarResp = patchRouteFilterRuleByUuidWithHttpInfo(routeFilterId, routeFilterRuleId, routeFilterRulesPatchRequestItem);
        return localVarResp.getData();
    }

    /**
     * Patch Route Filter Rule
     * This API provides capability to partially update a Route Filter Rule
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @param routeFilterRulesPatchRequestItem  (required)
     * @return ApiResponse&lt;RouteFilterRulesData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteFilterRulesData> patchRouteFilterRuleByUuidWithHttpInfo(String routeFilterId, String routeFilterRuleId, List<RouteFilterRulesPatchRequestItem> routeFilterRulesPatchRequestItem) throws ApiException {
        okhttp3.Call localVarCall = patchRouteFilterRuleByUuidValidateBeforeCall(routeFilterId, routeFilterRuleId, routeFilterRulesPatchRequestItem, null);
        Type localVarReturnType = new TypeToken<RouteFilterRulesData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch Route Filter Rule (asynchronously)
     * This API provides capability to partially update a Route Filter Rule
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @param routeFilterRulesPatchRequestItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchRouteFilterRuleByUuidAsync(String routeFilterId, String routeFilterRuleId, List<RouteFilterRulesPatchRequestItem> routeFilterRulesPatchRequestItem, final ApiCallback<RouteFilterRulesData> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchRouteFilterRuleByUuidValidateBeforeCall(routeFilterId, routeFilterRuleId, routeFilterRulesPatchRequestItem, _callback);
        Type localVarReturnType = new TypeToken<RouteFilterRulesData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceRouteFilterRuleByUuid
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @param routeFilterRulesBase  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceRouteFilterRuleByUuidCall(String routeFilterId, String routeFilterRuleId, RouteFilterRulesBase routeFilterRulesBase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routeFilterRulesBase;

        // create path and map variables
        String localVarPath = "/fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}"
            .replace("{" + "routeFilterId" + "}", localVarApiClient.escapeString(routeFilterId.toString()))
            .replace("{" + "routeFilterRuleId" + "}", localVarApiClient.escapeString(routeFilterRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceRouteFilterRuleByUuidValidateBeforeCall(String routeFilterId, String routeFilterRuleId, RouteFilterRulesBase routeFilterRulesBase, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeFilterId' is set
        if (routeFilterId == null) {
            throw new ApiException("Missing the required parameter 'routeFilterId' when calling replaceRouteFilterRuleByUuid(Async)");
        }

        // verify the required parameter 'routeFilterRuleId' is set
        if (routeFilterRuleId == null) {
            throw new ApiException("Missing the required parameter 'routeFilterRuleId' when calling replaceRouteFilterRuleByUuid(Async)");
        }

        // verify the required parameter 'routeFilterRulesBase' is set
        if (routeFilterRulesBase == null) {
            throw new ApiException("Missing the required parameter 'routeFilterRulesBase' when calling replaceRouteFilterRuleByUuid(Async)");
        }

        return replaceRouteFilterRuleByUuidCall(routeFilterId, routeFilterRuleId, routeFilterRulesBase, _callback);

    }

    /**
     * Replace Route Filter Rule
     * This API provides capability to replace a Route Filter Rule completely
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @param routeFilterRulesBase  (required)
     * @return RouteFilterRulesData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RouteFilterRulesData replaceRouteFilterRuleByUuid(String routeFilterId, String routeFilterRuleId, RouteFilterRulesBase routeFilterRulesBase) throws ApiException {
        ApiResponse<RouteFilterRulesData> localVarResp = replaceRouteFilterRuleByUuidWithHttpInfo(routeFilterId, routeFilterRuleId, routeFilterRulesBase);
        return localVarResp.getData();
    }

    /**
     * Replace Route Filter Rule
     * This API provides capability to replace a Route Filter Rule completely
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @param routeFilterRulesBase  (required)
     * @return ApiResponse&lt;RouteFilterRulesData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteFilterRulesData> replaceRouteFilterRuleByUuidWithHttpInfo(String routeFilterId, String routeFilterRuleId, RouteFilterRulesBase routeFilterRulesBase) throws ApiException {
        okhttp3.Call localVarCall = replaceRouteFilterRuleByUuidValidateBeforeCall(routeFilterId, routeFilterRuleId, routeFilterRulesBase, null);
        Type localVarReturnType = new TypeToken<RouteFilterRulesData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace Route Filter Rule (asynchronously)
     * This API provides capability to replace a Route Filter Rule completely
     * @param routeFilterId Route Filters Id (required)
     * @param routeFilterRuleId Route  Filter  Rules Id (required)
     * @param routeFilterRulesBase  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route Filter ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceRouteFilterRuleByUuidAsync(String routeFilterId, String routeFilterRuleId, RouteFilterRulesBase routeFilterRulesBase, final ApiCallback<RouteFilterRulesData> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceRouteFilterRuleByUuidValidateBeforeCall(routeFilterId, routeFilterRuleId, routeFilterRulesBase, _callback);
        Type localVarReturnType = new TypeToken<RouteFilterRulesData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
