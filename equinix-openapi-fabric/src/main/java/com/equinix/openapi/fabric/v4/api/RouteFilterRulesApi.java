/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.v4.model.Error;
import com.equinix.openapi.fabric.v4.model.GetRouteFilterRulesResponse;
import com.equinix.openapi.fabric.v4.model.RouteFilterRulesBase;
import com.equinix.openapi.fabric.v4.model.RouteFilterRulesChangeData;
import com.equinix.openapi.fabric.v4.model.RouteFilterRulesChangeDataResponse;
import com.equinix.openapi.fabric.v4.model.RouteFilterRulesData;
import com.equinix.openapi.fabric.v4.model.RouteFilterRulesPatchRequestItem;
import com.equinix.openapi.fabric.v4.model.RouteFilterRulesPostRequest;
import java.util.UUID;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import static io.restassured.http.Method.*;

public class RouteFilterRulesApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private RouteFilterRulesApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static RouteFilterRulesApi routeFilterRules(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new RouteFilterRulesApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                createRouteFilterRule(),
                createRouteFilterRulesInBulk(),
                deleteRouteFilterRuleByUuid(),
                getRouteFilterRuleByUuid(),
                getRouteFilterRuleChangeByUuid(),
                getRouteFilterRuleChanges(),
                getRouteFilterRules(),
                patchRouteFilterRuleByUuid(),
                replaceRouteFilterRuleByUuid()
        );
    }

    public CreateRouteFilterRuleOper createRouteFilterRule() {
        return new CreateRouteFilterRuleOper(createReqSpec());
    }

    public CreateRouteFilterRulesInBulkOper createRouteFilterRulesInBulk() {
        return new CreateRouteFilterRulesInBulkOper(createReqSpec());
    }

    public DeleteRouteFilterRuleByUuidOper deleteRouteFilterRuleByUuid() {
        return new DeleteRouteFilterRuleByUuidOper(createReqSpec());
    }

    public GetRouteFilterRuleByUuidOper getRouteFilterRuleByUuid() {
        return new GetRouteFilterRuleByUuidOper(createReqSpec());
    }

    public GetRouteFilterRuleChangeByUuidOper getRouteFilterRuleChangeByUuid() {
        return new GetRouteFilterRuleChangeByUuidOper(createReqSpec());
    }

    public GetRouteFilterRuleChangesOper getRouteFilterRuleChanges() {
        return new GetRouteFilterRuleChangesOper(createReqSpec());
    }

    public GetRouteFilterRulesOper getRouteFilterRules() {
        return new GetRouteFilterRulesOper(createReqSpec());
    }

    public PatchRouteFilterRuleByUuidOper patchRouteFilterRuleByUuid() {
        return new PatchRouteFilterRuleByUuidOper(createReqSpec());
    }

    public ReplaceRouteFilterRuleByUuidOper replaceRouteFilterRuleByUuid() {
        return new ReplaceRouteFilterRuleByUuidOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public RouteFilterRulesApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Create RFRule
     * This API provides capability to create a Route Filter Rule
     *
     * @see #routeFilterIdPath Route Filters Id (required)
     * @see #body  (required)
     * return RouteFilterRulesData
     */
    public static class CreateRouteFilterRuleOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/routeFilters/{routeFilterId}/routeFilterRules";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateRouteFilterRuleOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/routeFilters/{routeFilterId}/routeFilterRules
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/routeFilters/{routeFilterId}/routeFilterRules
         * @param handler handler
         * @return RouteFilterRulesData
         */
        public RouteFilterRulesData executeAs(Function<Response, Response> handler) {
            TypeRef<RouteFilterRulesData> type = new TypeRef<RouteFilterRulesData>(){};
            return execute(handler).as(type);
        }

         /**
         * @param routeFilterRulesBase (RouteFilterRulesBase)  (required)
         * @return operation
         */
        public CreateRouteFilterRuleOper body(RouteFilterRulesBase routeFilterRulesBase) {
            reqSpec.setBody(routeFilterRulesBase);
            return this;
        }

        public static final String ROUTE_FILTER_ID_PATH = "routeFilterId";

        /**
         * @param routeFilterId (String) Route Filters Id (required)
         * @return operation
         */
        public CreateRouteFilterRuleOper routeFilterIdPath(Object routeFilterId) {
            reqSpec.addPathParam(ROUTE_FILTER_ID_PATH, routeFilterId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateRouteFilterRuleOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateRouteFilterRuleOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Bulk RFRules
     * This API provides capability to create bulk route filter rules
     *
     * @see #routeFilterIdPath Route Filters Id (required)
     * @see #body  (required)
     * return GetRouteFilterRulesResponse
     */
    public static class CreateRouteFilterRulesInBulkOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/bulk";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateRouteFilterRulesInBulkOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/bulk
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/bulk
         * @param handler handler
         * @return GetRouteFilterRulesResponse
         */
        public GetRouteFilterRulesResponse executeAs(Function<Response, Response> handler) {
            TypeRef<GetRouteFilterRulesResponse> type = new TypeRef<GetRouteFilterRulesResponse>(){};
            return execute(handler).as(type);
        }

         /**
         * @param routeFilterRulesPostRequest (RouteFilterRulesPostRequest)  (required)
         * @return operation
         */
        public CreateRouteFilterRulesInBulkOper body(RouteFilterRulesPostRequest routeFilterRulesPostRequest) {
            reqSpec.setBody(routeFilterRulesPostRequest);
            return this;
        }

        public static final String ROUTE_FILTER_ID_PATH = "routeFilterId";

        /**
         * @param routeFilterId (String) Route Filters Id (required)
         * @return operation
         */
        public CreateRouteFilterRulesInBulkOper routeFilterIdPath(Object routeFilterId) {
            reqSpec.addPathParam(ROUTE_FILTER_ID_PATH, routeFilterId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateRouteFilterRulesInBulkOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateRouteFilterRulesInBulkOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * DeleteRFRule
     * This API provides capability to delete a Route Filter Rule
     *
     * @see #routeFilterIdPath Route Filters Id (required)
     * @see #routeFilterRuleIdPath Route  Filter  Rules Id (required)
     * return RouteFilterRulesData
     */
    public static class DeleteRouteFilterRuleByUuidOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteRouteFilterRuleByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * DELETE /fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}
         * @param handler handler
         * @return RouteFilterRulesData
         */
        public RouteFilterRulesData executeAs(Function<Response, Response> handler) {
            TypeRef<RouteFilterRulesData> type = new TypeRef<RouteFilterRulesData>(){};
            return execute(handler).as(type);
        }

        public static final String ROUTE_FILTER_ID_PATH = "routeFilterId";

        /**
         * @param routeFilterId (String) Route Filters Id (required)
         * @return operation
         */
        public DeleteRouteFilterRuleByUuidOper routeFilterIdPath(Object routeFilterId) {
            reqSpec.addPathParam(ROUTE_FILTER_ID_PATH, routeFilterId);
            return this;
        }

        public static final String ROUTE_FILTER_RULE_ID_PATH = "routeFilterRuleId";

        /**
         * @param routeFilterRuleId (String) Route  Filter  Rules Id (required)
         * @return operation
         */
        public DeleteRouteFilterRuleByUuidOper routeFilterRuleIdPath(Object routeFilterRuleId) {
            reqSpec.addPathParam(ROUTE_FILTER_RULE_ID_PATH, routeFilterRuleId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteRouteFilterRuleByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteRouteFilterRuleByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * GetRFRule By UUID
     * This API provides capability to view a Route Filter Rule by UUID
     *
     * @see #routeFilterIdPath Route Filters Id (required)
     * @see #routeFilterRuleIdPath Route  Filter  Rules Id (required)
     * return RouteFilterRulesData
     */
    public static class GetRouteFilterRuleByUuidOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetRouteFilterRuleByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}
         * @param handler handler
         * @return RouteFilterRulesData
         */
        public RouteFilterRulesData executeAs(Function<Response, Response> handler) {
            TypeRef<RouteFilterRulesData> type = new TypeRef<RouteFilterRulesData>(){};
            return execute(handler).as(type);
        }

        public static final String ROUTE_FILTER_ID_PATH = "routeFilterId";

        /**
         * @param routeFilterId (String) Route Filters Id (required)
         * @return operation
         */
        public GetRouteFilterRuleByUuidOper routeFilterIdPath(Object routeFilterId) {
            reqSpec.addPathParam(ROUTE_FILTER_ID_PATH, routeFilterId);
            return this;
        }

        public static final String ROUTE_FILTER_RULE_ID_PATH = "routeFilterRuleId";

        /**
         * @param routeFilterRuleId (String) Route  Filter  Rules Id (required)
         * @return operation
         */
        public GetRouteFilterRuleByUuidOper routeFilterRuleIdPath(Object routeFilterRuleId) {
            reqSpec.addPathParam(ROUTE_FILTER_RULE_ID_PATH, routeFilterRuleId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetRouteFilterRuleByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetRouteFilterRuleByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Change By ID
     * This API provides capability to retrieve a specific Route Filter Rule&#39;s Changes
     *
     * @see #routeFilterIdPath Route Filters Id (required)
     * @see #routeFilterRuleIdPath Route  Filter  Rules Id (required)
     * @see #changeIdPath Route Filter Rule Change UUID (required)
     * return RouteFilterRulesChangeData
     */
    public static class GetRouteFilterRuleChangeByUuidOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}/changes/{changeId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetRouteFilterRuleChangeByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}/changes/{changeId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}/changes/{changeId}
         * @param handler handler
         * @return RouteFilterRulesChangeData
         */
        public RouteFilterRulesChangeData executeAs(Function<Response, Response> handler) {
            TypeRef<RouteFilterRulesChangeData> type = new TypeRef<RouteFilterRulesChangeData>(){};
            return execute(handler).as(type);
        }

        public static final String ROUTE_FILTER_ID_PATH = "routeFilterId";

        /**
         * @param routeFilterId (String) Route Filters Id (required)
         * @return operation
         */
        public GetRouteFilterRuleChangeByUuidOper routeFilterIdPath(Object routeFilterId) {
            reqSpec.addPathParam(ROUTE_FILTER_ID_PATH, routeFilterId);
            return this;
        }

        public static final String ROUTE_FILTER_RULE_ID_PATH = "routeFilterRuleId";

        /**
         * @param routeFilterRuleId (String) Route  Filter  Rules Id (required)
         * @return operation
         */
        public GetRouteFilterRuleChangeByUuidOper routeFilterRuleIdPath(Object routeFilterRuleId) {
            reqSpec.addPathParam(ROUTE_FILTER_RULE_ID_PATH, routeFilterRuleId);
            return this;
        }

        public static final String CHANGE_ID_PATH = "changeId";

        /**
         * @param changeId (UUID) Route Filter Rule Change UUID (required)
         * @return operation
         */
        public GetRouteFilterRuleChangeByUuidOper changeIdPath(Object changeId) {
            reqSpec.addPathParam(CHANGE_ID_PATH, changeId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetRouteFilterRuleChangeByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetRouteFilterRuleChangeByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get All Changes
     * This API provides capability to retrieve all of a Route Filter Rule&#39;s Changes
     *
     * @see #routeFilterIdPath Route Filters Id (required)
     * @see #routeFilterRuleIdPath Route  Filter  Rules Id (required)
     * @see #offsetQuery offset (optional)
     * @see #limitQuery number of records to fetch (optional)
     * return RouteFilterRulesChangeDataResponse
     */
    public static class GetRouteFilterRuleChangesOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}/changes";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetRouteFilterRuleChangesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}/changes
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}/changes
         * @param handler handler
         * @return RouteFilterRulesChangeDataResponse
         */
        public RouteFilterRulesChangeDataResponse executeAs(Function<Response, Response> handler) {
            TypeRef<RouteFilterRulesChangeDataResponse> type = new TypeRef<RouteFilterRulesChangeDataResponse>(){};
            return execute(handler).as(type);
        }

        public static final String ROUTE_FILTER_ID_PATH = "routeFilterId";

        /**
         * @param routeFilterId (String) Route Filters Id (required)
         * @return operation
         */
        public GetRouteFilterRuleChangesOper routeFilterIdPath(Object routeFilterId) {
            reqSpec.addPathParam(ROUTE_FILTER_ID_PATH, routeFilterId);
            return this;
        }

        public static final String ROUTE_FILTER_RULE_ID_PATH = "routeFilterRuleId";

        /**
         * @param routeFilterRuleId (String) Route  Filter  Rules Id (required)
         * @return operation
         */
        public GetRouteFilterRuleChangesOper routeFilterRuleIdPath(Object routeFilterRuleId) {
            reqSpec.addPathParam(ROUTE_FILTER_RULE_ID_PATH, routeFilterRuleId);
            return this;
        }

        public static final String OFFSET_QUERY = "offset";

        /**
         * @param offset (Integer) offset (optional)
         * @return operation
         */
        public GetRouteFilterRuleChangesOper offsetQuery(Object... offset) {
            reqSpec.addQueryParam(OFFSET_QUERY, offset);
            return this;
        }

        public static final String LIMIT_QUERY = "limit";

        /**
         * @param limit (Integer) number of records to fetch (optional)
         * @return operation
         */
        public GetRouteFilterRuleChangesOper limitQuery(Object... limit) {
            reqSpec.addQueryParam(LIMIT_QUERY, limit);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetRouteFilterRuleChangesOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetRouteFilterRuleChangesOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * GetRFRules
     * This API provides capability to get all Route Filters Rules for Fabric
     *
     * @see #routeFilterIdPath Route Filters Id (required)
     * @see #offsetQuery offset (optional)
     * @see #limitQuery number of records to fetch (optional)
     * return GetRouteFilterRulesResponse
     */
    public static class GetRouteFilterRulesOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/routeFilters/{routeFilterId}/routeFilterRules";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetRouteFilterRulesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/routeFilters/{routeFilterId}/routeFilterRules
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/routeFilters/{routeFilterId}/routeFilterRules
         * @param handler handler
         * @return GetRouteFilterRulesResponse
         */
        public GetRouteFilterRulesResponse executeAs(Function<Response, Response> handler) {
            TypeRef<GetRouteFilterRulesResponse> type = new TypeRef<GetRouteFilterRulesResponse>(){};
            return execute(handler).as(type);
        }

        public static final String ROUTE_FILTER_ID_PATH = "routeFilterId";

        /**
         * @param routeFilterId (String) Route Filters Id (required)
         * @return operation
         */
        public GetRouteFilterRulesOper routeFilterIdPath(Object routeFilterId) {
            reqSpec.addPathParam(ROUTE_FILTER_ID_PATH, routeFilterId);
            return this;
        }

        public static final String OFFSET_QUERY = "offset";

        /**
         * @param offset (Integer) offset (optional)
         * @return operation
         */
        public GetRouteFilterRulesOper offsetQuery(Object... offset) {
            reqSpec.addQueryParam(OFFSET_QUERY, offset);
            return this;
        }

        public static final String LIMIT_QUERY = "limit";

        /**
         * @param limit (Integer) number of records to fetch (optional)
         * @return operation
         */
        public GetRouteFilterRulesOper limitQuery(Object... limit) {
            reqSpec.addQueryParam(LIMIT_QUERY, limit);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetRouteFilterRulesOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetRouteFilterRulesOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * PatchRFilterRule
     * This API provides capability to partially update a Route Filter Rule
     *
     * @see #routeFilterIdPath Route Filters Id (required)
     * @see #routeFilterRuleIdPath Route  Filter  Rules Id (required)
     * @see #body  (required)
     * return RouteFilterRulesData
     */
    public static class PatchRouteFilterRuleByUuidOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PatchRouteFilterRuleByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}
         * @param handler handler
         * @return RouteFilterRulesData
         */
        public RouteFilterRulesData executeAs(Function<Response, Response> handler) {
            TypeRef<RouteFilterRulesData> type = new TypeRef<RouteFilterRulesData>(){};
            return execute(handler).as(type);
        }

         /**
         * @param routeFilterRulesPatchRequestItem (List&lt;RouteFilterRulesPatchRequestItem&gt;)  (required)
         * @return operation
         */
        public PatchRouteFilterRuleByUuidOper body(List<RouteFilterRulesPatchRequestItem> routeFilterRulesPatchRequestItem) {
            reqSpec.setBody(routeFilterRulesPatchRequestItem);
            return this;
        }

        public static final String ROUTE_FILTER_ID_PATH = "routeFilterId";

        /**
         * @param routeFilterId (String) Route Filters Id (required)
         * @return operation
         */
        public PatchRouteFilterRuleByUuidOper routeFilterIdPath(Object routeFilterId) {
            reqSpec.addPathParam(ROUTE_FILTER_ID_PATH, routeFilterId);
            return this;
        }

        public static final String ROUTE_FILTER_RULE_ID_PATH = "routeFilterRuleId";

        /**
         * @param routeFilterRuleId (String) Route  Filter  Rules Id (required)
         * @return operation
         */
        public PatchRouteFilterRuleByUuidOper routeFilterRuleIdPath(Object routeFilterRuleId) {
            reqSpec.addPathParam(ROUTE_FILTER_RULE_ID_PATH, routeFilterRuleId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PatchRouteFilterRuleByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PatchRouteFilterRuleByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * ReplaceRFRule
     * This API provides capability to replace a Route Filter Rule completely
     *
     * @see #routeFilterIdPath Route Filters Id (required)
     * @see #routeFilterRuleIdPath Route  Filter  Rules Id (required)
     * @see #body  (required)
     * return RouteFilterRulesData
     */
    public static class ReplaceRouteFilterRuleByUuidOper implements Oper {

        public static final Method REQ_METHOD = PUT;
        public static final String REQ_URI = "/fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ReplaceRouteFilterRuleByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PUT /fabric/v4/routeFilters/{routeFilterId}/routeFilterRules/{routeFilterRuleId}
         * @param handler handler
         * @return RouteFilterRulesData
         */
        public RouteFilterRulesData executeAs(Function<Response, Response> handler) {
            TypeRef<RouteFilterRulesData> type = new TypeRef<RouteFilterRulesData>(){};
            return execute(handler).as(type);
        }

         /**
         * @param routeFilterRulesBase (RouteFilterRulesBase)  (required)
         * @return operation
         */
        public ReplaceRouteFilterRuleByUuidOper body(RouteFilterRulesBase routeFilterRulesBase) {
            reqSpec.setBody(routeFilterRulesBase);
            return this;
        }

        public static final String ROUTE_FILTER_ID_PATH = "routeFilterId";

        /**
         * @param routeFilterId (String) Route Filters Id (required)
         * @return operation
         */
        public ReplaceRouteFilterRuleByUuidOper routeFilterIdPath(Object routeFilterId) {
            reqSpec.addPathParam(ROUTE_FILTER_ID_PATH, routeFilterId);
            return this;
        }

        public static final String ROUTE_FILTER_RULE_ID_PATH = "routeFilterRuleId";

        /**
         * @param routeFilterRuleId (String) Route  Filter  Rules Id (required)
         * @return operation
         */
        public ReplaceRouteFilterRuleByUuidOper routeFilterRuleIdPath(Object routeFilterRuleId) {
            reqSpec.addPathParam(ROUTE_FILTER_RULE_ID_PATH, routeFilterRuleId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ReplaceRouteFilterRuleByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ReplaceRouteFilterRuleByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
