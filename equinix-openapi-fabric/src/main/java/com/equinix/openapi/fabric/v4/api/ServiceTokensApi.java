/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.ApiCallback;
import com.equinix.openapi.fabric.ApiClient;
import com.equinix.openapi.fabric.ApiException;
import com.equinix.openapi.fabric.ApiResponse;
import com.equinix.openapi.fabric.Configuration;
import com.equinix.openapi.fabric.Pair;
import com.equinix.openapi.fabric.ProgressRequestBody;
import com.equinix.openapi.fabric.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import com.equinix.openapi.fabric.v4.model.Error;
import com.equinix.openapi.fabric.v4.model.ServiceToken;
import com.equinix.openapi.fabric.v4.model.ServiceTokenActionRequest;
import com.equinix.openapi.fabric.v4.model.ServiceTokenChangeOperation;
import com.equinix.openapi.fabric.v4.model.ServiceTokenSearchRequest;
import com.equinix.openapi.fabric.v4.model.ServiceTokens;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ServiceTokensApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServiceTokensApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServiceTokensApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createServiceToken
     * @param serviceToken  (required)
     * @param dryRun option to verify that API calls will succeed (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceTokenCall(ServiceToken serviceToken, Boolean dryRun, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceToken;

        // create path and map variables
        String localVarPath = "/fabric/v4/serviceTokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dryRun != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dryRun", dryRun));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createServiceTokenValidateBeforeCall(ServiceToken serviceToken, Boolean dryRun, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceToken' is set
        if (serviceToken == null) {
            throw new ApiException("Missing the required parameter 'serviceToken' when calling createServiceToken(Async)");
        }

        return createServiceTokenCall(serviceToken, dryRun, _callback);

    }

    /**
     * Create Service Token
     * Create Service Tokens generates Equinix Fabric? service tokens. These tokens authorize users to access protected resources and services.
     * @param serviceToken  (required)
     * @param dryRun option to verify that API calls will succeed (optional, default to false)
     * @return ServiceToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ServiceToken createServiceToken(ServiceToken serviceToken, Boolean dryRun) throws ApiException {
        ApiResponse<ServiceToken> localVarResp = createServiceTokenWithHttpInfo(serviceToken, dryRun);
        return localVarResp.getData();
    }

    /**
     * Create Service Token
     * Create Service Tokens generates Equinix Fabric? service tokens. These tokens authorize users to access protected resources and services.
     * @param serviceToken  (required)
     * @param dryRun option to verify that API calls will succeed (optional, default to false)
     * @return ApiResponse&lt;ServiceToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceToken> createServiceTokenWithHttpInfo(ServiceToken serviceToken, Boolean dryRun) throws ApiException {
        okhttp3.Call localVarCall = createServiceTokenValidateBeforeCall(serviceToken, dryRun, null);
        Type localVarReturnType = new TypeToken<ServiceToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Service Token (asynchronously)
     * Create Service Tokens generates Equinix Fabric? service tokens. These tokens authorize users to access protected resources and services.
     * @param serviceToken  (required)
     * @param dryRun option to verify that API calls will succeed (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceTokenAsync(ServiceToken serviceToken, Boolean dryRun, final ApiCallback<ServiceToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = createServiceTokenValidateBeforeCall(serviceToken, dryRun, _callback);
        Type localVarReturnType = new TypeToken<ServiceToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createServiceTokenAction
     * @param serviceTokenId Service Token UUID (required)
     * @param serviceTokenActionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceTokenActionCall(UUID serviceTokenId, ServiceTokenActionRequest serviceTokenActionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceTokenActionRequest;

        // create path and map variables
        String localVarPath = "/fabric/v4/serviceTokens/{serviceTokenId}/actions"
            .replace("{" + "serviceTokenId" + "}", localVarApiClient.escapeString(serviceTokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createServiceTokenActionValidateBeforeCall(UUID serviceTokenId, ServiceTokenActionRequest serviceTokenActionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceTokenId' is set
        if (serviceTokenId == null) {
            throw new ApiException("Missing the required parameter 'serviceTokenId' when calling createServiceTokenAction(Async)");
        }

        // verify the required parameter 'serviceTokenActionRequest' is set
        if (serviceTokenActionRequest == null) {
            throw new ApiException("Missing the required parameter 'serviceTokenActionRequest' when calling createServiceTokenAction(Async)");
        }

        return createServiceTokenActionCall(serviceTokenId, serviceTokenActionRequest, _callback);

    }

    /**
     * ServiceToken Actions
     * This API provides capability to accept/reject user&#39;s servicetokens
     * @param serviceTokenId Service Token UUID (required)
     * @param serviceTokenActionRequest  (required)
     * @return ServiceToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ServiceToken createServiceTokenAction(UUID serviceTokenId, ServiceTokenActionRequest serviceTokenActionRequest) throws ApiException {
        ApiResponse<ServiceToken> localVarResp = createServiceTokenActionWithHttpInfo(serviceTokenId, serviceTokenActionRequest);
        return localVarResp.getData();
    }

    /**
     * ServiceToken Actions
     * This API provides capability to accept/reject user&#39;s servicetokens
     * @param serviceTokenId Service Token UUID (required)
     * @param serviceTokenActionRequest  (required)
     * @return ApiResponse&lt;ServiceToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceToken> createServiceTokenActionWithHttpInfo(UUID serviceTokenId, ServiceTokenActionRequest serviceTokenActionRequest) throws ApiException {
        okhttp3.Call localVarCall = createServiceTokenActionValidateBeforeCall(serviceTokenId, serviceTokenActionRequest, null);
        Type localVarReturnType = new TypeToken<ServiceToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ServiceToken Actions (asynchronously)
     * This API provides capability to accept/reject user&#39;s servicetokens
     * @param serviceTokenId Service Token UUID (required)
     * @param serviceTokenActionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceTokenActionAsync(UUID serviceTokenId, ServiceTokenActionRequest serviceTokenActionRequest, final ApiCallback<ServiceToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = createServiceTokenActionValidateBeforeCall(serviceTokenId, serviceTokenActionRequest, _callback);
        Type localVarReturnType = new TypeToken<ServiceToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteServiceTokenByUuid
     * @param serviceTokenId Service Token UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceTokenByUuidCall(UUID serviceTokenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/serviceTokens/{serviceTokenId}"
            .replace("{" + "serviceTokenId" + "}", localVarApiClient.escapeString(serviceTokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteServiceTokenByUuidValidateBeforeCall(UUID serviceTokenId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceTokenId' is set
        if (serviceTokenId == null) {
            throw new ApiException("Missing the required parameter 'serviceTokenId' when calling deleteServiceTokenByUuid(Async)");
        }

        return deleteServiceTokenByUuidCall(serviceTokenId, _callback);

    }

    /**
     * Delete Token by uuid
     * Delete Service Tokens removes an Equinix Fabric service token corresponding to the specified uuid which are in INACTIVE state.
     * @param serviceTokenId Service Token UUID (required)
     * @return ServiceToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceToken deleteServiceTokenByUuid(UUID serviceTokenId) throws ApiException {
        ApiResponse<ServiceToken> localVarResp = deleteServiceTokenByUuidWithHttpInfo(serviceTokenId);
        return localVarResp.getData();
    }

    /**
     * Delete Token by uuid
     * Delete Service Tokens removes an Equinix Fabric service token corresponding to the specified uuid which are in INACTIVE state.
     * @param serviceTokenId Service Token UUID (required)
     * @return ApiResponse&lt;ServiceToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceToken> deleteServiceTokenByUuidWithHttpInfo(UUID serviceTokenId) throws ApiException {
        okhttp3.Call localVarCall = deleteServiceTokenByUuidValidateBeforeCall(serviceTokenId, null);
        Type localVarReturnType = new TypeToken<ServiceToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Token by uuid (asynchronously)
     * Delete Service Tokens removes an Equinix Fabric service token corresponding to the specified uuid which are in INACTIVE state.
     * @param serviceTokenId Service Token UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceTokenByUuidAsync(UUID serviceTokenId, final ApiCallback<ServiceToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteServiceTokenByUuidValidateBeforeCall(serviceTokenId, _callback);
        Type localVarReturnType = new TypeToken<ServiceToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServiceTokenByUuid
     * @param serviceTokenId Service Token UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceTokenByUuidCall(UUID serviceTokenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/serviceTokens/{serviceTokenId}"
            .replace("{" + "serviceTokenId" + "}", localVarApiClient.escapeString(serviceTokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceTokenByUuidValidateBeforeCall(UUID serviceTokenId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceTokenId' is set
        if (serviceTokenId == null) {
            throw new ApiException("Missing the required parameter 'serviceTokenId' when calling getServiceTokenByUuid(Async)");
        }

        return getServiceTokenByUuidCall(serviceTokenId, _callback);

    }

    /**
     * Get Token by uuid
     * Get Specified Service Tokens uses the uuid of an Equinix Fabric service token to return details about the token&#39;s type, state, location, bandwidth, and other key properties.
     * @param serviceTokenId Service Token UUID (required)
     * @return ServiceToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceToken getServiceTokenByUuid(UUID serviceTokenId) throws ApiException {
        ApiResponse<ServiceToken> localVarResp = getServiceTokenByUuidWithHttpInfo(serviceTokenId);
        return localVarResp.getData();
    }

    /**
     * Get Token by uuid
     * Get Specified Service Tokens uses the uuid of an Equinix Fabric service token to return details about the token&#39;s type, state, location, bandwidth, and other key properties.
     * @param serviceTokenId Service Token UUID (required)
     * @return ApiResponse&lt;ServiceToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceToken> getServiceTokenByUuidWithHttpInfo(UUID serviceTokenId) throws ApiException {
        okhttp3.Call localVarCall = getServiceTokenByUuidValidateBeforeCall(serviceTokenId, null);
        Type localVarReturnType = new TypeToken<ServiceToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Token by uuid (asynchronously)
     * Get Specified Service Tokens uses the uuid of an Equinix Fabric service token to return details about the token&#39;s type, state, location, bandwidth, and other key properties.
     * @param serviceTokenId Service Token UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceTokenByUuidAsync(UUID serviceTokenId, final ApiCallback<ServiceToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceTokenByUuidValidateBeforeCall(serviceTokenId, _callback);
        Type localVarReturnType = new TypeToken<ServiceToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServiceTokens
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceTokensCall(BigDecimal offset, BigDecimal limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/serviceTokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceTokensValidateBeforeCall(BigDecimal offset, BigDecimal limit, final ApiCallback _callback) throws ApiException {
        return getServiceTokensCall(offset, limit, _callback);

    }

    /**
     * Get All Tokens
     * Get All ServiceTokens creates a list of all Equinix Fabric service tokens associated with the subscriber&#39;s account.
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return ServiceTokens
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ServiceTokens getServiceTokens(BigDecimal offset, BigDecimal limit) throws ApiException {
        ApiResponse<ServiceTokens> localVarResp = getServiceTokensWithHttpInfo(offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get All Tokens
     * Get All ServiceTokens creates a list of all Equinix Fabric service tokens associated with the subscriber&#39;s account.
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return ApiResponse&lt;ServiceTokens&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceTokens> getServiceTokensWithHttpInfo(BigDecimal offset, BigDecimal limit) throws ApiException {
        okhttp3.Call localVarCall = getServiceTokensValidateBeforeCall(offset, limit, null);
        Type localVarReturnType = new TypeToken<ServiceTokens>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Tokens (asynchronously)
     * Get All ServiceTokens creates a list of all Equinix Fabric service tokens associated with the subscriber&#39;s account.
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceTokensAsync(BigDecimal offset, BigDecimal limit, final ApiCallback<ServiceTokens> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceTokensValidateBeforeCall(offset, limit, _callback);
        Type localVarReturnType = new TypeToken<ServiceTokens>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchServiceTokens
     * @param serviceTokenSearchRequest  (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchServiceTokensCall(ServiceTokenSearchRequest serviceTokenSearchRequest, BigDecimal offset, BigDecimal limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceTokenSearchRequest;

        // create path and map variables
        String localVarPath = "/fabric/v4/serviceTokens/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchServiceTokensValidateBeforeCall(ServiceTokenSearchRequest serviceTokenSearchRequest, BigDecimal offset, BigDecimal limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceTokenSearchRequest' is set
        if (serviceTokenSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'serviceTokenSearchRequest' when calling searchServiceTokens(Async)");
        }

        return searchServiceTokensCall(serviceTokenSearchRequest, offset, limit, _callback);

    }

    /**
     * Search servicetokens
     * The API provides capability to get list of user&#39;s servicetokens using search criteria, including optional filtering, pagination and sorting
     * @param serviceTokenSearchRequest  (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return ServiceTokens
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceTokens searchServiceTokens(ServiceTokenSearchRequest serviceTokenSearchRequest, BigDecimal offset, BigDecimal limit) throws ApiException {
        ApiResponse<ServiceTokens> localVarResp = searchServiceTokensWithHttpInfo(serviceTokenSearchRequest, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Search servicetokens
     * The API provides capability to get list of user&#39;s servicetokens using search criteria, including optional filtering, pagination and sorting
     * @param serviceTokenSearchRequest  (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return ApiResponse&lt;ServiceTokens&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceTokens> searchServiceTokensWithHttpInfo(ServiceTokenSearchRequest serviceTokenSearchRequest, BigDecimal offset, BigDecimal limit) throws ApiException {
        okhttp3.Call localVarCall = searchServiceTokensValidateBeforeCall(serviceTokenSearchRequest, offset, limit, null);
        Type localVarReturnType = new TypeToken<ServiceTokens>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search servicetokens (asynchronously)
     * The API provides capability to get list of user&#39;s servicetokens using search criteria, including optional filtering, pagination and sorting
     * @param serviceTokenSearchRequest  (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchServiceTokensAsync(ServiceTokenSearchRequest serviceTokenSearchRequest, BigDecimal offset, BigDecimal limit, final ApiCallback<ServiceTokens> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchServiceTokensValidateBeforeCall(serviceTokenSearchRequest, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<ServiceTokens>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateServiceTokenByUuid
     * @param serviceTokenId Service Token UUID (required)
     * @param serviceTokenChangeOperation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceTokenByUuidCall(UUID serviceTokenId, List<ServiceTokenChangeOperation> serviceTokenChangeOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceTokenChangeOperation;

        // create path and map variables
        String localVarPath = "/fabric/v4/serviceTokens/{serviceTokenId}"
            .replace("{" + "serviceTokenId" + "}", localVarApiClient.escapeString(serviceTokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateServiceTokenByUuidValidateBeforeCall(UUID serviceTokenId, List<ServiceTokenChangeOperation> serviceTokenChangeOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceTokenId' is set
        if (serviceTokenId == null) {
            throw new ApiException("Missing the required parameter 'serviceTokenId' when calling updateServiceTokenByUuid(Async)");
        }

        // verify the required parameter 'serviceTokenChangeOperation' is set
        if (serviceTokenChangeOperation == null) {
            throw new ApiException("Missing the required parameter 'serviceTokenChangeOperation' when calling updateServiceTokenByUuid(Async)");
        }

        return updateServiceTokenByUuidCall(serviceTokenId, serviceTokenChangeOperation, _callback);

    }

    /**
     * Update Token By ID
     * This API provides capability to update user&#39;s Service Token
     * @param serviceTokenId Service Token UUID (required)
     * @param serviceTokenChangeOperation  (required)
     * @return ServiceToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceToken updateServiceTokenByUuid(UUID serviceTokenId, List<ServiceTokenChangeOperation> serviceTokenChangeOperation) throws ApiException {
        ApiResponse<ServiceToken> localVarResp = updateServiceTokenByUuidWithHttpInfo(serviceTokenId, serviceTokenChangeOperation);
        return localVarResp.getData();
    }

    /**
     * Update Token By ID
     * This API provides capability to update user&#39;s Service Token
     * @param serviceTokenId Service Token UUID (required)
     * @param serviceTokenChangeOperation  (required)
     * @return ApiResponse&lt;ServiceToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceToken> updateServiceTokenByUuidWithHttpInfo(UUID serviceTokenId, List<ServiceTokenChangeOperation> serviceTokenChangeOperation) throws ApiException {
        okhttp3.Call localVarCall = updateServiceTokenByUuidValidateBeforeCall(serviceTokenId, serviceTokenChangeOperation, null);
        Type localVarReturnType = new TypeToken<ServiceToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Token By ID (asynchronously)
     * This API provides capability to update user&#39;s Service Token
     * @param serviceTokenId Service Token UUID (required)
     * @param serviceTokenChangeOperation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceTokenByUuidAsync(UUID serviceTokenId, List<ServiceTokenChangeOperation> serviceTokenChangeOperation, final ApiCallback<ServiceToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateServiceTokenByUuidValidateBeforeCall(serviceTokenId, serviceTokenChangeOperation, _callback);
        Type localVarReturnType = new TypeToken<ServiceToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
