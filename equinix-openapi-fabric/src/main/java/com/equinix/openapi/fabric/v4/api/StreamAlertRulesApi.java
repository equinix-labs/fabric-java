/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.ApiCallback;
import com.equinix.openapi.fabric.ApiClient;
import com.equinix.openapi.fabric.ApiException;
import com.equinix.openapi.fabric.ApiResponse;
import com.equinix.openapi.fabric.Configuration;
import com.equinix.openapi.fabric.Pair;
import com.equinix.openapi.fabric.ProgressRequestBody;
import com.equinix.openapi.fabric.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.equinix.openapi.fabric.v4.model.AlertRulePostRequest;
import com.equinix.openapi.fabric.v4.model.AlertRulePutRequest;
import com.equinix.openapi.fabric.v4.model.Error;
import com.equinix.openapi.fabric.v4.model.GetAllStreamAlertRuleResponse;
import com.equinix.openapi.fabric.v4.model.StreamAlertRule;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class StreamAlertRulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StreamAlertRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StreamAlertRulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createStreamAlertRules
     * @param streamId Stream UUID (required)
     * @param alertRulePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Alert Rules object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamAlertRulesCall(UUID streamId, AlertRulePostRequest alertRulePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = alertRulePostRequest;

        // create path and map variables
        String localVarPath = "/fabric/v4/streams/{streamId}/alertRules"
            .replace("{" + "streamId" + "}", localVarApiClient.escapeString(streamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStreamAlertRulesValidateBeforeCall(UUID streamId, AlertRulePostRequest alertRulePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'streamId' is set
        if (streamId == null) {
            throw new ApiException("Missing the required parameter 'streamId' when calling createStreamAlertRules(Async)");
        }

        // verify the required parameter 'alertRulePostRequest' is set
        if (alertRulePostRequest == null) {
            throw new ApiException("Missing the required parameter 'alertRulePostRequest' when calling createStreamAlertRules(Async)");
        }

        return createStreamAlertRulesCall(streamId, alertRulePostRequest, _callback);

    }

    /**
     * Create Stream Alert Rules
     * This API provides capability to create user&#39;s Stream Alert Rules
     * @param streamId Stream UUID (required)
     * @param alertRulePostRequest  (required)
     * @return StreamAlertRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Alert Rules object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public StreamAlertRule createStreamAlertRules(UUID streamId, AlertRulePostRequest alertRulePostRequest) throws ApiException {
        ApiResponse<StreamAlertRule> localVarResp = createStreamAlertRulesWithHttpInfo(streamId, alertRulePostRequest);
        return localVarResp.getData();
    }

    /**
     * Create Stream Alert Rules
     * This API provides capability to create user&#39;s Stream Alert Rules
     * @param streamId Stream UUID (required)
     * @param alertRulePostRequest  (required)
     * @return ApiResponse&lt;StreamAlertRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Alert Rules object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamAlertRule> createStreamAlertRulesWithHttpInfo(UUID streamId, AlertRulePostRequest alertRulePostRequest) throws ApiException {
        okhttp3.Call localVarCall = createStreamAlertRulesValidateBeforeCall(streamId, alertRulePostRequest, null);
        Type localVarReturnType = new TypeToken<StreamAlertRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Stream Alert Rules (asynchronously)
     * This API provides capability to create user&#39;s Stream Alert Rules
     * @param streamId Stream UUID (required)
     * @param alertRulePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Alert Rules object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamAlertRulesAsync(UUID streamId, AlertRulePostRequest alertRulePostRequest, final ApiCallback<StreamAlertRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStreamAlertRulesValidateBeforeCall(streamId, alertRulePostRequest, _callback);
        Type localVarReturnType = new TypeToken<StreamAlertRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStreamAlertRuleByUuid
     * @param streamId Stream UUID (required)
     * @param alertRuleId alert rule UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Alert Rules object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStreamAlertRuleByUuidCall(UUID streamId, UUID alertRuleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/streams/{streamId}/alertRules/{alertRuleId}"
            .replace("{" + "streamId" + "}", localVarApiClient.escapeString(streamId.toString()))
            .replace("{" + "alertRuleId" + "}", localVarApiClient.escapeString(alertRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStreamAlertRuleByUuidValidateBeforeCall(UUID streamId, UUID alertRuleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'streamId' is set
        if (streamId == null) {
            throw new ApiException("Missing the required parameter 'streamId' when calling deleteStreamAlertRuleByUuid(Async)");
        }

        // verify the required parameter 'alertRuleId' is set
        if (alertRuleId == null) {
            throw new ApiException("Missing the required parameter 'alertRuleId' when calling deleteStreamAlertRuleByUuid(Async)");
        }

        return deleteStreamAlertRuleByUuidCall(streamId, alertRuleId, _callback);

    }

    /**
     * Update Stream Alert Rules
     * This API provides capability to delete a user&#39;s stream alert rule
     * @param streamId Stream UUID (required)
     * @param alertRuleId alert rule UUID (required)
     * @return StreamAlertRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Alert Rules object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public StreamAlertRule deleteStreamAlertRuleByUuid(UUID streamId, UUID alertRuleId) throws ApiException {
        ApiResponse<StreamAlertRule> localVarResp = deleteStreamAlertRuleByUuidWithHttpInfo(streamId, alertRuleId);
        return localVarResp.getData();
    }

    /**
     * Update Stream Alert Rules
     * This API provides capability to delete a user&#39;s stream alert rule
     * @param streamId Stream UUID (required)
     * @param alertRuleId alert rule UUID (required)
     * @return ApiResponse&lt;StreamAlertRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Alert Rules object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamAlertRule> deleteStreamAlertRuleByUuidWithHttpInfo(UUID streamId, UUID alertRuleId) throws ApiException {
        okhttp3.Call localVarCall = deleteStreamAlertRuleByUuidValidateBeforeCall(streamId, alertRuleId, null);
        Type localVarReturnType = new TypeToken<StreamAlertRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Stream Alert Rules (asynchronously)
     * This API provides capability to delete a user&#39;s stream alert rule
     * @param streamId Stream UUID (required)
     * @param alertRuleId alert rule UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Alert Rules object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStreamAlertRuleByUuidAsync(UUID streamId, UUID alertRuleId, final ApiCallback<StreamAlertRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStreamAlertRuleByUuidValidateBeforeCall(streamId, alertRuleId, _callback);
        Type localVarReturnType = new TypeToken<StreamAlertRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStreamAlertRuleByUuid
     * @param streamId Stream UUID (required)
     * @param alertRuleId alert rule UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stream Alert Rules object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStreamAlertRuleByUuidCall(UUID streamId, UUID alertRuleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/streams/{streamId}/alertRules/{alertRuleId}"
            .replace("{" + "streamId" + "}", localVarApiClient.escapeString(streamId.toString()))
            .replace("{" + "alertRuleId" + "}", localVarApiClient.escapeString(alertRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStreamAlertRuleByUuidValidateBeforeCall(UUID streamId, UUID alertRuleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'streamId' is set
        if (streamId == null) {
            throw new ApiException("Missing the required parameter 'streamId' when calling getStreamAlertRuleByUuid(Async)");
        }

        // verify the required parameter 'alertRuleId' is set
        if (alertRuleId == null) {
            throw new ApiException("Missing the required parameter 'alertRuleId' when calling getStreamAlertRuleByUuid(Async)");
        }

        return getStreamAlertRuleByUuidCall(streamId, alertRuleId, _callback);

    }

    /**
     * Get Stream Alert Rules
     * This API provides capability to get user&#39;s stream alert rules
     * @param streamId Stream UUID (required)
     * @param alertRuleId alert rule UUID (required)
     * @return StreamAlertRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stream Alert Rules object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public StreamAlertRule getStreamAlertRuleByUuid(UUID streamId, UUID alertRuleId) throws ApiException {
        ApiResponse<StreamAlertRule> localVarResp = getStreamAlertRuleByUuidWithHttpInfo(streamId, alertRuleId);
        return localVarResp.getData();
    }

    /**
     * Get Stream Alert Rules
     * This API provides capability to get user&#39;s stream alert rules
     * @param streamId Stream UUID (required)
     * @param alertRuleId alert rule UUID (required)
     * @return ApiResponse&lt;StreamAlertRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stream Alert Rules object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamAlertRule> getStreamAlertRuleByUuidWithHttpInfo(UUID streamId, UUID alertRuleId) throws ApiException {
        okhttp3.Call localVarCall = getStreamAlertRuleByUuidValidateBeforeCall(streamId, alertRuleId, null);
        Type localVarReturnType = new TypeToken<StreamAlertRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Stream Alert Rules (asynchronously)
     * This API provides capability to get user&#39;s stream alert rules
     * @param streamId Stream UUID (required)
     * @param alertRuleId alert rule UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stream Alert Rules object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStreamAlertRuleByUuidAsync(UUID streamId, UUID alertRuleId, final ApiCallback<StreamAlertRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStreamAlertRuleByUuidValidateBeforeCall(streamId, alertRuleId, _callback);
        Type localVarReturnType = new TypeToken<StreamAlertRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStreamAlertRules
     * @param streamId Stream UUID (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stream Alert Rules object </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStreamAlertRulesCall(UUID streamId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/streams/{streamId}/alertRules"
            .replace("{" + "streamId" + "}", localVarApiClient.escapeString(streamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStreamAlertRulesValidateBeforeCall(UUID streamId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'streamId' is set
        if (streamId == null) {
            throw new ApiException("Missing the required parameter 'streamId' when calling getStreamAlertRules(Async)");
        }

        return getStreamAlertRulesCall(streamId, offset, limit, _callback);

    }

    /**
     * Get Stream Alert Rules
     * This API provides capability to retrieve stream alert rules
     * @param streamId Stream UUID (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return GetAllStreamAlertRuleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stream Alert Rules object </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public GetAllStreamAlertRuleResponse getStreamAlertRules(UUID streamId, Integer offset, Integer limit) throws ApiException {
        ApiResponse<GetAllStreamAlertRuleResponse> localVarResp = getStreamAlertRulesWithHttpInfo(streamId, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get Stream Alert Rules
     * This API provides capability to retrieve stream alert rules
     * @param streamId Stream UUID (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return ApiResponse&lt;GetAllStreamAlertRuleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stream Alert Rules object </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllStreamAlertRuleResponse> getStreamAlertRulesWithHttpInfo(UUID streamId, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getStreamAlertRulesValidateBeforeCall(streamId, offset, limit, null);
        Type localVarReturnType = new TypeToken<GetAllStreamAlertRuleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Stream Alert Rules (asynchronously)
     * This API provides capability to retrieve stream alert rules
     * @param streamId Stream UUID (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stream Alert Rules object </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStreamAlertRulesAsync(UUID streamId, Integer offset, Integer limit, final ApiCallback<GetAllStreamAlertRuleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStreamAlertRulesValidateBeforeCall(streamId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetAllStreamAlertRuleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStreamAlertRuleByUuid
     * @param streamId Stream UUID (required)
     * @param alertRuleId alert rule UUID (required)
     * @param alertRulePutRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Alert Rules object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStreamAlertRuleByUuidCall(UUID streamId, UUID alertRuleId, AlertRulePutRequest alertRulePutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = alertRulePutRequest;

        // create path and map variables
        String localVarPath = "/fabric/v4/streams/{streamId}/alertRules/{alertRuleId}"
            .replace("{" + "streamId" + "}", localVarApiClient.escapeString(streamId.toString()))
            .replace("{" + "alertRuleId" + "}", localVarApiClient.escapeString(alertRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStreamAlertRuleByUuidValidateBeforeCall(UUID streamId, UUID alertRuleId, AlertRulePutRequest alertRulePutRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'streamId' is set
        if (streamId == null) {
            throw new ApiException("Missing the required parameter 'streamId' when calling updateStreamAlertRuleByUuid(Async)");
        }

        // verify the required parameter 'alertRuleId' is set
        if (alertRuleId == null) {
            throw new ApiException("Missing the required parameter 'alertRuleId' when calling updateStreamAlertRuleByUuid(Async)");
        }

        // verify the required parameter 'alertRulePutRequest' is set
        if (alertRulePutRequest == null) {
            throw new ApiException("Missing the required parameter 'alertRulePutRequest' when calling updateStreamAlertRuleByUuid(Async)");
        }

        return updateStreamAlertRuleByUuidCall(streamId, alertRuleId, alertRulePutRequest, _callback);

    }

    /**
     * Update Stream Alert Rules
     * This API provides capability to update a user&#39;s stream alert rule
     * @param streamId Stream UUID (required)
     * @param alertRuleId alert rule UUID (required)
     * @param alertRulePutRequest  (required)
     * @return StreamAlertRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Alert Rules object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public StreamAlertRule updateStreamAlertRuleByUuid(UUID streamId, UUID alertRuleId, AlertRulePutRequest alertRulePutRequest) throws ApiException {
        ApiResponse<StreamAlertRule> localVarResp = updateStreamAlertRuleByUuidWithHttpInfo(streamId, alertRuleId, alertRulePutRequest);
        return localVarResp.getData();
    }

    /**
     * Update Stream Alert Rules
     * This API provides capability to update a user&#39;s stream alert rule
     * @param streamId Stream UUID (required)
     * @param alertRuleId alert rule UUID (required)
     * @param alertRulePutRequest  (required)
     * @return ApiResponse&lt;StreamAlertRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Alert Rules object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamAlertRule> updateStreamAlertRuleByUuidWithHttpInfo(UUID streamId, UUID alertRuleId, AlertRulePutRequest alertRulePutRequest) throws ApiException {
        okhttp3.Call localVarCall = updateStreamAlertRuleByUuidValidateBeforeCall(streamId, alertRuleId, alertRulePutRequest, null);
        Type localVarReturnType = new TypeToken<StreamAlertRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Stream Alert Rules (asynchronously)
     * This API provides capability to update a user&#39;s stream alert rule
     * @param streamId Stream UUID (required)
     * @param alertRuleId alert rule UUID (required)
     * @param alertRulePutRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Stream Alert Rules object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStreamAlertRuleByUuidAsync(UUID streamId, UUID alertRuleId, AlertRulePutRequest alertRulePutRequest, final ApiCallback<StreamAlertRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStreamAlertRuleByUuidValidateBeforeCall(streamId, alertRuleId, alertRulePutRequest, _callback);
        Type localVarReturnType = new TypeToken<StreamAlertRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
