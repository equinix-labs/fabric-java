/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.v4.model.*;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

import static io.restassured.http.Method.*;

public class ServiceProfilesApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private ServiceProfilesApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static ServiceProfilesApi serviceProfiles(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new ServiceProfilesApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                createServiceProfile(),
                deleteServiceProfileByUuid(),
                getServiceProfileByUuid(),
                getServiceProfileMetrosByUuid(),
                getServiceProfiles(),
                putServiceProfileByUuid(),
                searchServiceProfiles(),
                updateServiceProfileByUuid()
        );
    }

    public CreateServiceProfileOper createServiceProfile() {
        return new CreateServiceProfileOper(createReqSpec());
    }

    public DeleteServiceProfileByUuidOper deleteServiceProfileByUuid() {
        return new DeleteServiceProfileByUuidOper(createReqSpec());
    }

    public GetServiceProfileByUuidOper getServiceProfileByUuid() {
        return new GetServiceProfileByUuidOper(createReqSpec());
    }

    public GetServiceProfileMetrosByUuidOper getServiceProfileMetrosByUuid() {
        return new GetServiceProfileMetrosByUuidOper(createReqSpec());
    }

    public GetServiceProfilesOper getServiceProfiles() {
        return new GetServiceProfilesOper(createReqSpec());
    }

    public PutServiceProfileByUuidOper putServiceProfileByUuid() {
        return new PutServiceProfileByUuidOper(createReqSpec());
    }

    public SearchServiceProfilesOper searchServiceProfiles() {
        return new SearchServiceProfilesOper(createReqSpec());
    }

    public UpdateServiceProfileByUuidOper updateServiceProfileByUuid() {
        return new UpdateServiceProfileByUuidOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public ServiceProfilesApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Create Profile
     * Create Service Profile creates Equinix Fabric? Service Profile.
     *
     * @see #body  (required)
     * return ServiceProfile
     */
    public static class CreateServiceProfileOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/serviceProfiles";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateServiceProfileOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/serviceProfiles
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/serviceProfiles
         * @param handler handler
         * @return ServiceProfile
         */
        public ServiceProfile executeAs(Function<Response, Response> handler) {
            TypeRef<ServiceProfile> type = new TypeRef<ServiceProfile>(){};
            return execute(handler).as(type);
        }

         /**
         * @param serviceProfileRequest (ServiceProfileRequest)  (required)
         * @return operation
         */
        public CreateServiceProfileOper body(ServiceProfileRequest serviceProfileRequest) {
            reqSpec.setBody(serviceProfileRequest);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateServiceProfileOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateServiceProfileOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Delete Profile
     * delete Service Profile by UUID
     *
     * @see #serviceProfileIdPath Service Profile UUID (required)
     * return ServiceProfile
     */
    public static class DeleteServiceProfileByUuidOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/fabric/v4/serviceProfiles/{serviceProfileId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteServiceProfileByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /fabric/v4/serviceProfiles/{serviceProfileId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * DELETE /fabric/v4/serviceProfiles/{serviceProfileId}
         * @param handler handler
         * @return ServiceProfile
         */
        public ServiceProfile executeAs(Function<Response, Response> handler) {
            TypeRef<ServiceProfile> type = new TypeRef<ServiceProfile>(){};
            return execute(handler).as(type);
        }

        public static final String SERVICE_PROFILE_ID_PATH = "serviceProfileId";

        /**
         * @param serviceProfileId (UUID) Service Profile UUID (required)
         * @return operation
         */
        public DeleteServiceProfileByUuidOper serviceProfileIdPath(Object serviceProfileId) {
            reqSpec.addPathParam(SERVICE_PROFILE_ID_PATH, serviceProfileId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteServiceProfileByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteServiceProfileByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Profile
     * Get service profile by UUID. View Point parameter if set to zSide will give seller&#39;s view of the profile otherwise buyer&#39;s view.
     *
     * @see #serviceProfileIdPath Service Profile UUID (required)
     * @see #viewPointQuery flips view between buyer and seller representation (optional, default to aSide)
     * return ServiceProfile
     */
    public static class GetServiceProfileByUuidOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/serviceProfiles/{serviceProfileId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetServiceProfileByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/serviceProfiles/{serviceProfileId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/serviceProfiles/{serviceProfileId}
         * @param handler handler
         * @return ServiceProfile
         */
        public ServiceProfile executeAs(Function<Response, Response> handler) {
            TypeRef<ServiceProfile> type = new TypeRef<ServiceProfile>(){};
            return execute(handler).as(type);
        }

        public static final String SERVICE_PROFILE_ID_PATH = "serviceProfileId";

        /**
         * @param serviceProfileId (UUID) Service Profile UUID (required)
         * @return operation
         */
        public GetServiceProfileByUuidOper serviceProfileIdPath(Object serviceProfileId) {
            reqSpec.addPathParam(SERVICE_PROFILE_ID_PATH, serviceProfileId);
            return this;
        }

        public static final String VIEW_POINT_QUERY = "viewPoint";

        /**
         * @param viewPoint (String) flips view between buyer and seller representation (optional, default to aSide)
         * @return operation
         */
        public GetServiceProfileByUuidOper viewPointQuery(Object... viewPoint) {
            reqSpec.addQueryParam(VIEW_POINT_QUERY, viewPoint);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetServiceProfileByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetServiceProfileByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Profile Metros
     * Get service profile metros by UUID.
     *
     * @see #serviceProfileIdPath Service Profile UUID (required)
     * @see #offsetQuery offset (optional)
     * @see #limitQuery number of records to fetch (optional)
     * return ServiceMetros
     */
    public static class GetServiceProfileMetrosByUuidOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/serviceProfiles/{serviceProfileId}/metros";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetServiceProfileMetrosByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/serviceProfiles/{serviceProfileId}/metros
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/serviceProfiles/{serviceProfileId}/metros
         * @param handler handler
         * @return ServiceMetros
         */
        public ServiceMetros executeAs(Function<Response, Response> handler) {
            TypeRef<ServiceMetros> type = new TypeRef<ServiceMetros>(){};
            return execute(handler).as(type);
        }

        public static final String SERVICE_PROFILE_ID_PATH = "serviceProfileId";

        /**
         * @param serviceProfileId (UUID) Service Profile UUID (required)
         * @return operation
         */
        public GetServiceProfileMetrosByUuidOper serviceProfileIdPath(Object serviceProfileId) {
            reqSpec.addPathParam(SERVICE_PROFILE_ID_PATH, serviceProfileId);
            return this;
        }

        public static final String OFFSET_QUERY = "offset";

        /**
         * @param offset (Integer) offset (optional)
         * @return operation
         */
        public GetServiceProfileMetrosByUuidOper offsetQuery(Object... offset) {
            reqSpec.addQueryParam(OFFSET_QUERY, offset);
            return this;
        }

        public static final String LIMIT_QUERY = "limit";

        /**
         * @param limit (Integer) number of records to fetch (optional)
         * @return operation
         */
        public GetServiceProfileMetrosByUuidOper limitQuery(Object... limit) {
            reqSpec.addQueryParam(LIMIT_QUERY, limit);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetServiceProfileMetrosByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetServiceProfileMetrosByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get all Profiles
     * The API request returns all Equinix Fabric Service Profiles in accordance with the view point requested.
     *
     * @see #offsetQuery offset (optional)
     * @see #limitQuery number of records to fetch (optional)
     * @see #viewPointQuery flips view between buyer and seller representation (optional, default to aSide)
     * return ServiceProfiles
     */
    public static class GetServiceProfilesOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/serviceProfiles";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetServiceProfilesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/serviceProfiles
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/serviceProfiles
         * @param handler handler
         * @return ServiceProfiles
         */
        public ServiceProfiles executeAs(Function<Response, Response> handler) {
            TypeRef<ServiceProfiles> type = new TypeRef<ServiceProfiles>(){};
            return execute(handler).as(type);
        }

        public static final String OFFSET_QUERY = "offset";

        /**
         * @param offset (Integer) offset (optional)
         * @return operation
         */
        public GetServiceProfilesOper offsetQuery(Object... offset) {
            reqSpec.addQueryParam(OFFSET_QUERY, offset);
            return this;
        }

        public static final String LIMIT_QUERY = "limit";

        /**
         * @param limit (Integer) number of records to fetch (optional)
         * @return operation
         */
        public GetServiceProfilesOper limitQuery(Object... limit) {
            reqSpec.addQueryParam(LIMIT_QUERY, limit);
            return this;
        }

        public static final String VIEW_POINT_QUERY = "viewPoint";

        /**
         * @param viewPoint (String) flips view between buyer and seller representation (optional, default to aSide)
         * @return operation
         */
        public GetServiceProfilesOper viewPointQuery(Object... viewPoint) {
            reqSpec.addQueryParam(VIEW_POINT_QUERY, viewPoint);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetServiceProfilesOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetServiceProfilesOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Replace Profile
     * This API request replaces a service profile definition
     *
     * @see #serviceProfileIdPath Service Profile UUID (required)
     * @see #ifMatchHeader conditional request (required)
     * @see #body  (required)
     * return ServiceProfile
     */
    public static class PutServiceProfileByUuidOper implements Oper {

        public static final Method REQ_METHOD = PUT;
        public static final String REQ_URI = "/fabric/v4/serviceProfiles/{serviceProfileId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PutServiceProfileByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /fabric/v4/serviceProfiles/{serviceProfileId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PUT /fabric/v4/serviceProfiles/{serviceProfileId}
         * @param handler handler
         * @return ServiceProfile
         */
        public ServiceProfile executeAs(Function<Response, Response> handler) {
            TypeRef<ServiceProfile> type = new TypeRef<ServiceProfile>(){};
            return execute(handler).as(type);
        }

         /**
         * @param serviceProfileRequest (ServiceProfileRequest)  (required)
         * @return operation
         */
        public PutServiceProfileByUuidOper body(ServiceProfileRequest serviceProfileRequest) {
            reqSpec.setBody(serviceProfileRequest);
            return this;
        }

        public static final String IF_MATCH_HEADER = "If-Match";

        /**
         * @param ifMatch (String) conditional request (required)
         * @return operation
         */
        public PutServiceProfileByUuidOper ifMatchHeader(String ifMatch) {
            reqSpec.addHeader(IF_MATCH_HEADER, ifMatch);
            return this;
        }

        public static final String SERVICE_PROFILE_ID_PATH = "serviceProfileId";

        /**
         * @param serviceProfileId (UUID) Service Profile UUID (required)
         * @return operation
         */
        public PutServiceProfileByUuidOper serviceProfileIdPath(Object serviceProfileId) {
            reqSpec.addPathParam(SERVICE_PROFILE_ID_PATH, serviceProfileId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PutServiceProfileByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PutServiceProfileByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Profile Search
     * Search service profiles by search criteria
     *
     * @see #body  (required)
     * @see #viewPointQuery flips view between buyer and seller representation (optional, default to aSide)
     * return ServiceProfiles
     */
    public static class SearchServiceProfilesOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/serviceProfiles/search";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public SearchServiceProfilesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/serviceProfiles/search
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/serviceProfiles/search
         * @param handler handler
         * @return ServiceProfiles
         */
        public ServiceProfiles executeAs(Function<Response, Response> handler) {
            TypeRef<ServiceProfiles> type = new TypeRef<ServiceProfiles>(){};
            return execute(handler).as(type);
        }

         /**
         * @param serviceProfileSearchRequest (ServiceProfileSearchRequest)  (required)
         * @return operation
         */
        public SearchServiceProfilesOper body(ServiceProfileSearchRequest serviceProfileSearchRequest) {
            reqSpec.setBody(serviceProfileSearchRequest);
            return this;
        }

        public static final String VIEW_POINT_QUERY = "viewPoint";

        /**
         * @param viewPoint (String) flips view between buyer and seller representation (optional, default to aSide)
         * @return operation
         */
        public SearchServiceProfilesOper viewPointQuery(Object... viewPoint) {
            reqSpec.addQueryParam(VIEW_POINT_QUERY, viewPoint);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public SearchServiceProfilesOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public SearchServiceProfilesOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Update Profile
     * Update Service Profile by UUID
     *
     * @see #serviceProfileIdPath Service Profile UUID (required)
     * @see #ifMatchHeader conditional request (required)
     * @see #body  (required)
     * return ServiceProfile
     */
    public static class UpdateServiceProfileByUuidOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/fabric/v4/serviceProfiles/{serviceProfileId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateServiceProfileByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json-patch+json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /fabric/v4/serviceProfiles/{serviceProfileId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /fabric/v4/serviceProfiles/{serviceProfileId}
         * @param handler handler
         * @return ServiceProfile
         */
        public ServiceProfile executeAs(Function<Response, Response> handler) {
            TypeRef<ServiceProfile> type = new TypeRef<ServiceProfile>(){};
            return execute(handler).as(type);
        }

         /**
         * @param jsonPatchOperation (List&lt;JsonPatchOperation&gt;)  (required)
         * @return operation
         */
        public UpdateServiceProfileByUuidOper body(List<JsonPatchOperation> jsonPatchOperation) {
            reqSpec.setBody(jsonPatchOperation);
            return this;
        }

        public static final String IF_MATCH_HEADER = "If-Match";

        /**
         * @param ifMatch (String) conditional request (required)
         * @return operation
         */
        public UpdateServiceProfileByUuidOper ifMatchHeader(String ifMatch) {
            reqSpec.addHeader(IF_MATCH_HEADER, ifMatch);
            return this;
        }

        public static final String SERVICE_PROFILE_ID_PATH = "serviceProfileId";

        /**
         * @param serviceProfileId (UUID) Service Profile UUID (required)
         * @return operation
         */
        public UpdateServiceProfileByUuidOper serviceProfileIdPath(Object serviceProfileId) {
            reqSpec.addPathParam(SERVICE_PROFILE_ID_PATH, serviceProfileId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdateServiceProfileByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdateServiceProfileByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
