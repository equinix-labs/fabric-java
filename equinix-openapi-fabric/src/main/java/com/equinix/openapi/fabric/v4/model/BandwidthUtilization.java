/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import com.fasterxml.jackson.annotation.*;

import java.util.Objects;

/**
 * Bandwidth utilization statistics (octet counters-based)
 */
@JsonPropertyOrder({
  BandwidthUtilization.JSON_PROPERTY_UNIT,
  BandwidthUtilization.JSON_PROPERTY_METRIC_INTERVAL,
  BandwidthUtilization.JSON_PROPERTY_INBOUND,
  BandwidthUtilization.JSON_PROPERTY_OUTBOUND
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BandwidthUtilization {
  /**
   * Aggregated data transfer capacity. Possible values- Mbps, megabits (1 million bits) per second; Gbps, gigabits (1 billion bits) per second.
   */
  public enum UnitEnum {
    MBPS("Mbps");

    private String value;

    UnitEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static UnitEnum fromValue(String value) {
      for (UnitEnum b : UnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_UNIT = "unit";
  private UnitEnum unit;

  public static final String JSON_PROPERTY_METRIC_INTERVAL = "metricInterval";
  private String metricInterval;

  public static final String JSON_PROPERTY_INBOUND = "inbound";
  private Direction inbound;

  public static final String JSON_PROPERTY_OUTBOUND = "outbound";
  private Direction outbound;

  public BandwidthUtilization() {
  }

  public BandwidthUtilization unit(UnitEnum unit) {
    
    this.unit = unit;
    return this;
  }

   /**
   * Aggregated data transfer capacity. Possible values- Mbps, megabits (1 million bits) per second; Gbps, gigabits (1 billion bits) per second.
   * @return unit
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UnitEnum getUnit() {
    return unit;
  }


  @JsonProperty(JSON_PROPERTY_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnit(UnitEnum unit) {
    this.unit = unit;
  }


  public BandwidthUtilization metricInterval(String metricInterval) {
    
    this.metricInterval = metricInterval;
    return this;
  }

   /**
   * An interval formatted value, indicating the time-interval the metric objects within the response represent
   * @return metricInterval
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METRIC_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMetricInterval() {
    return metricInterval;
  }


  @JsonProperty(JSON_PROPERTY_METRIC_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetricInterval(String metricInterval) {
    this.metricInterval = metricInterval;
  }


  public BandwidthUtilization inbound(Direction inbound) {
    
    this.inbound = inbound;
    return this;
  }

   /**
   * Get inbound
   * @return inbound
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INBOUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Direction getInbound() {
    return inbound;
  }


  @JsonProperty(JSON_PROPERTY_INBOUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInbound(Direction inbound) {
    this.inbound = inbound;
  }


  public BandwidthUtilization outbound(Direction outbound) {
    
    this.outbound = outbound;
    return this;
  }

   /**
   * Get outbound
   * @return outbound
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTBOUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Direction getOutbound() {
    return outbound;
  }


  @JsonProperty(JSON_PROPERTY_OUTBOUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutbound(Direction outbound) {
    this.outbound = outbound;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BandwidthUtilization bandwidthUtilization = (BandwidthUtilization) o;
    return Objects.equals(this.unit, bandwidthUtilization.unit) &&
        Objects.equals(this.metricInterval, bandwidthUtilization.metricInterval) &&
        Objects.equals(this.inbound, bandwidthUtilization.inbound) &&
        Objects.equals(this.outbound, bandwidthUtilization.outbound);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unit, metricInterval, inbound, outbound);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BandwidthUtilization {\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    metricInterval: ").append(toIndentedString(metricInterval)).append("\n");
    sb.append("    inbound: ").append(toIndentedString(inbound)).append("\n");
    sb.append("    outbound: ").append(toIndentedString(outbound)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

