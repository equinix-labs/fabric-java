/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import java.util.Objects;
import java.util.Arrays;
import com.equinix.openapi.fabric.v4.model.FabricCloudRouterPrice;
import com.equinix.openapi.fabric.v4.model.IpBlockPrice;
import com.equinix.openapi.fabric.v4.model.PriceCategory;
import com.equinix.openapi.fabric.v4.model.PriceCharge;
import com.equinix.openapi.fabric.v4.model.ProductType;
import com.equinix.openapi.fabric.v4.model.SimplifiedAccount;
import com.equinix.openapi.fabric.v4.model.TimeServicePrice;
import com.equinix.openapi.fabric.v4.model.VirtualConnectionPrice;
import com.equinix.openapi.fabric.v4.model.VirtualPortPrice;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.equinix.openapi.fabric.JSON;

/**
 * Price
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Price {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ProductType type;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private SimplifiedAccount account;

  public static final String SERIALIZED_NAME_CHARGES = "charges";
  @SerializedName(SERIALIZED_NAME_CHARGES)
  private List<PriceCharge> charges = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  /**
   * In months. No value means unlimited
   */
  @JsonAdapter(TermLengthEnum.Adapter.class)
  public enum TermLengthEnum {
    NUMBER_12(12),
    
    NUMBER_24(24),
    
    NUMBER_36(36);

    private Integer value;

    TermLengthEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TermLengthEnum fromValue(Integer value) {
      for (TermLengthEnum b : TermLengthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TermLengthEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TermLengthEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TermLengthEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return TermLengthEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TERM_LENGTH = "termLength";
  @SerializedName(SERIALIZED_NAME_TERM_LENGTH)
  private TermLengthEnum termLength;

  public static final String SERIALIZED_NAME_CATGORY = "catgory";
  @SerializedName(SERIALIZED_NAME_CATGORY)
  private PriceCategory catgory;

  public static final String SERIALIZED_NAME_CONNECTION = "connection";
  @SerializedName(SERIALIZED_NAME_CONNECTION)
  private VirtualConnectionPrice connection;

  public static final String SERIALIZED_NAME_IP_BLOCK = "ipBlock";
  @SerializedName(SERIALIZED_NAME_IP_BLOCK)
  private IpBlockPrice ipBlock;

  public static final String SERIALIZED_NAME_ROUTER = "router";
  @SerializedName(SERIALIZED_NAME_ROUTER)
  private FabricCloudRouterPrice router;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private VirtualPortPrice port;

  public static final String SERIALIZED_NAME_TIME_SERVICE = "timeService";
  @SerializedName(SERIALIZED_NAME_TIME_SERVICE)
  private TimeServicePrice timeService;

  public Price() {
  }

  public Price href(String href) {
    
    this.href = href;
    return this;
  }

   /**
   * An absolute URL that returns specified pricing data
   * @return href
  **/
  @javax.annotation.Nullable

  public String getHref() {
    return href;
  }


  public void setHref(String href) {
    this.href = href;
  }


  public Price type(ProductType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable

  public ProductType getType() {
    return type;
  }


  public void setType(ProductType type) {
    this.type = type;
  }


  public Price code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * Equinix-assigned product code
   * @return code
  **/
  @javax.annotation.Nullable

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public Price name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Full product name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Price description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Product description
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Price account(SimplifiedAccount account) {
    
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @javax.annotation.Nullable

  public SimplifiedAccount getAccount() {
    return account;
  }


  public void setAccount(SimplifiedAccount account) {
    this.account = account;
  }


  public Price charges(List<PriceCharge> charges) {
    
    this.charges = charges;
    return this;
  }

  public Price addChargesItem(PriceCharge chargesItem) {
    if (this.charges == null) {
      this.charges = new ArrayList<>();
    }
    this.charges.add(chargesItem);
    return this;
  }

   /**
   * Get charges
   * @return charges
  **/
  @javax.annotation.Nullable

  public List<PriceCharge> getCharges() {
    return charges;
  }


  public void setCharges(List<PriceCharge> charges) {
    this.charges = charges;
  }


  public Price currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Product offering price currency
   * @return currency
  **/
  @javax.annotation.Nullable

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public Price termLength(TermLengthEnum termLength) {
    
    this.termLength = termLength;
    return this;
  }

   /**
   * In months. No value means unlimited
   * @return termLength
  **/
  @javax.annotation.Nullable

  public TermLengthEnum getTermLength() {
    return termLength;
  }


  public void setTermLength(TermLengthEnum termLength) {
    this.termLength = termLength;
  }


  public Price catgory(PriceCategory catgory) {
    
    this.catgory = catgory;
    return this;
  }

   /**
   * Get catgory
   * @return catgory
  **/
  @javax.annotation.Nullable

  public PriceCategory getCatgory() {
    return catgory;
  }


  public void setCatgory(PriceCategory catgory) {
    this.catgory = catgory;
  }


  public Price connection(VirtualConnectionPrice connection) {
    
    this.connection = connection;
    return this;
  }

   /**
   * Get connection
   * @return connection
  **/
  @javax.annotation.Nullable

  public VirtualConnectionPrice getConnection() {
    return connection;
  }


  public void setConnection(VirtualConnectionPrice connection) {
    this.connection = connection;
  }


  public Price ipBlock(IpBlockPrice ipBlock) {
    
    this.ipBlock = ipBlock;
    return this;
  }

   /**
   * Get ipBlock
   * @return ipBlock
  **/
  @javax.annotation.Nullable

  public IpBlockPrice getIpBlock() {
    return ipBlock;
  }


  public void setIpBlock(IpBlockPrice ipBlock) {
    this.ipBlock = ipBlock;
  }


  public Price router(FabricCloudRouterPrice router) {
    
    this.router = router;
    return this;
  }

   /**
   * Get router
   * @return router
  **/
  @javax.annotation.Nullable

  public FabricCloudRouterPrice getRouter() {
    return router;
  }


  public void setRouter(FabricCloudRouterPrice router) {
    this.router = router;
  }


  public Price port(VirtualPortPrice port) {
    
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @javax.annotation.Nullable

  public VirtualPortPrice getPort() {
    return port;
  }


  public void setPort(VirtualPortPrice port) {
    this.port = port;
  }


  public Price timeService(TimeServicePrice timeService) {
    
    this.timeService = timeService;
    return this;
  }

   /**
   * Get timeService
   * @return timeService
  **/
  @javax.annotation.Nullable

  public TimeServicePrice getTimeService() {
    return timeService;
  }


  public void setTimeService(TimeServicePrice timeService) {
    this.timeService = timeService;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Price instance itself
   */
  public Price putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Price price = (Price) o;
    return Objects.equals(this.href, price.href) &&
        Objects.equals(this.type, price.type) &&
        Objects.equals(this.code, price.code) &&
        Objects.equals(this.name, price.name) &&
        Objects.equals(this.description, price.description) &&
        Objects.equals(this.account, price.account) &&
        Objects.equals(this.charges, price.charges) &&
        Objects.equals(this.currency, price.currency) &&
        Objects.equals(this.termLength, price.termLength) &&
        Objects.equals(this.catgory, price.catgory) &&
        Objects.equals(this.connection, price.connection) &&
        Objects.equals(this.ipBlock, price.ipBlock) &&
        Objects.equals(this.router, price.router) &&
        Objects.equals(this.port, price.port) &&
        Objects.equals(this.timeService, price.timeService)&&
        Objects.equals(this.additionalProperties, price.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, type, code, name, description, account, charges, currency, termLength, catgory, connection, ipBlock, router, port, timeService, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Price {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    charges: ").append(toIndentedString(charges)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    termLength: ").append(toIndentedString(termLength)).append("\n");
    sb.append("    catgory: ").append(toIndentedString(catgory)).append("\n");
    sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
    sb.append("    ipBlock: ").append(toIndentedString(ipBlock)).append("\n");
    sb.append("    router: ").append(toIndentedString(router)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    timeService: ").append(toIndentedString(timeService)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("href");
    openapiFields.add("type");
    openapiFields.add("code");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("account");
    openapiFields.add("charges");
    openapiFields.add("currency");
    openapiFields.add("termLength");
    openapiFields.add("catgory");
    openapiFields.add("connection");
    openapiFields.add("ipBlock");
    openapiFields.add("router");
    openapiFields.add("port");
    openapiFields.add("timeService");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Price
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Price.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Price is not found in the empty JSON string", Price.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `account`
      if (jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) {
        SimplifiedAccount.validateJsonObject(jsonObj.getAsJsonObject("account"));
      }
      if (jsonObj.get("charges") != null && !jsonObj.get("charges").isJsonNull()) {
        JsonArray jsonArraycharges = jsonObj.getAsJsonArray("charges");
        if (jsonArraycharges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("charges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `charges` to be an array in the JSON string but got `%s`", jsonObj.get("charges").toString()));
          }

          // validate the optional field `charges` (array)
          for (int i = 0; i < jsonArraycharges.size(); i++) {
            PriceCharge.validateJsonObject(jsonArraycharges.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the optional field `connection`
      if (jsonObj.get("connection") != null && !jsonObj.get("connection").isJsonNull()) {
        VirtualConnectionPrice.validateJsonObject(jsonObj.getAsJsonObject("connection"));
      }
      // validate the optional field `ipBlock`
      if (jsonObj.get("ipBlock") != null && !jsonObj.get("ipBlock").isJsonNull()) {
        IpBlockPrice.validateJsonObject(jsonObj.getAsJsonObject("ipBlock"));
      }
      // validate the optional field `router`
      if (jsonObj.get("router") != null && !jsonObj.get("router").isJsonNull()) {
        FabricCloudRouterPrice.validateJsonObject(jsonObj.getAsJsonObject("router"));
      }
      // validate the optional field `port`
      if (jsonObj.get("port") != null && !jsonObj.get("port").isJsonNull()) {
        VirtualPortPrice.validateJsonObject(jsonObj.getAsJsonObject("port"));
      }
      // validate the optional field `timeService`
      if (jsonObj.get("timeService") != null && !jsonObj.get("timeService").isJsonNull()) {
        TimeServicePrice.validateJsonObject(jsonObj.getAsJsonObject("timeService"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Price.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Price' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Price> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Price.class));

       return (TypeAdapter<T>) new TypeAdapter<Price>() {
           @Override
           public void write(JsonWriter out, Price value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Price read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Price instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Price given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Price
  * @throws IOException if the JSON string is invalid with respect to Price
  */
  public static Price fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Price.class);
  }

 /**
  * Convert an instance of Price to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

