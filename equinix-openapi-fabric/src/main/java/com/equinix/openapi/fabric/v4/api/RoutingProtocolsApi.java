/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.v4.model.*;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

import static io.restassured.http.Method.*;

public class RoutingProtocolsApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private RoutingProtocolsApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static RoutingProtocolsApi routingProtocols(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new RoutingProtocolsApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                createConnectionRoutingProtocol(),
                createConnectionRoutingProtocolsInBulk(),
                deleteConnectionRoutingProtocolByUuid(),
                getConnectionRoutingProtocolAllBgpActions(),
                getConnectionRoutingProtocolByUuid(),
                getConnectionRoutingProtocols(),
                getConnectionRoutingProtocolsBgpActionByUuid(),
                getConnectionRoutingProtocolsChangeByUuid(),
                getConnectionRoutingProtocolsChanges(),
                patchConnectionRoutingProtocolByUuid(),
                postConnectionRoutingProtocolBgpActionByUuid(),
                replaceConnectionRoutingProtocolByUuid(),
                validateRoutingProtocol()
        );
    }

    public CreateConnectionRoutingProtocolOper createConnectionRoutingProtocol() {
        return new CreateConnectionRoutingProtocolOper(createReqSpec());
    }

    public CreateConnectionRoutingProtocolsInBulkOper createConnectionRoutingProtocolsInBulk() {
        return new CreateConnectionRoutingProtocolsInBulkOper(createReqSpec());
    }

    public DeleteConnectionRoutingProtocolByUuidOper deleteConnectionRoutingProtocolByUuid() {
        return new DeleteConnectionRoutingProtocolByUuidOper(createReqSpec());
    }

    public GetConnectionRoutingProtocolAllBgpActionsOper getConnectionRoutingProtocolAllBgpActions() {
        return new GetConnectionRoutingProtocolAllBgpActionsOper(createReqSpec());
    }

    public GetConnectionRoutingProtocolByUuidOper getConnectionRoutingProtocolByUuid() {
        return new GetConnectionRoutingProtocolByUuidOper(createReqSpec());
    }

    public GetConnectionRoutingProtocolsOper getConnectionRoutingProtocols() {
        return new GetConnectionRoutingProtocolsOper(createReqSpec());
    }

    public GetConnectionRoutingProtocolsBgpActionByUuidOper getConnectionRoutingProtocolsBgpActionByUuid() {
        return new GetConnectionRoutingProtocolsBgpActionByUuidOper(createReqSpec());
    }

    public GetConnectionRoutingProtocolsChangeByUuidOper getConnectionRoutingProtocolsChangeByUuid() {
        return new GetConnectionRoutingProtocolsChangeByUuidOper(createReqSpec());
    }

    public GetConnectionRoutingProtocolsChangesOper getConnectionRoutingProtocolsChanges() {
        return new GetConnectionRoutingProtocolsChangesOper(createReqSpec());
    }

    public PatchConnectionRoutingProtocolByUuidOper patchConnectionRoutingProtocolByUuid() {
        return new PatchConnectionRoutingProtocolByUuidOper(createReqSpec());
    }

    public PostConnectionRoutingProtocolBgpActionByUuidOper postConnectionRoutingProtocolBgpActionByUuid() {
        return new PostConnectionRoutingProtocolBgpActionByUuidOper(createReqSpec());
    }

    public ReplaceConnectionRoutingProtocolByUuidOper replaceConnectionRoutingProtocolByUuid() {
        return new ReplaceConnectionRoutingProtocolByUuidOper(createReqSpec());
    }

    public ValidateRoutingProtocolOper validateRoutingProtocol() {
        return new ValidateRoutingProtocolOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public RoutingProtocolsApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Create Protocol
     * This API provides capability to create Routing Protocol for connections
     *
     * @see #connectionIdPath Connection Id (required)
     * @see #body  (required)
     * return RoutingProtocolData
     */
    public static class CreateConnectionRoutingProtocolOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/connections/{connectionId}/routingProtocols";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateConnectionRoutingProtocolOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/connections/{connectionId}/routingProtocols
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/connections/{connectionId}/routingProtocols
         * @param handler handler
         * @return RoutingProtocolData
         */
        public RoutingProtocolData executeAs(Function<Response, Response> handler) {
            TypeRef<RoutingProtocolData> type = new TypeRef<RoutingProtocolData>(){};
            return execute(handler).as(type);
        }

         /**
         * @param routingProtocolBase (RoutingProtocolBase)  (required)
         * @return operation
         */
        public CreateConnectionRoutingProtocolOper body(RoutingProtocolBase routingProtocolBase) {
            reqSpec.setBody(routingProtocolBase);
            return this;
        }

        public static final String CONNECTION_ID_PATH = "connectionId";

        /**
         * @param connectionId (String) Connection Id (required)
         * @return operation
         */
        public CreateConnectionRoutingProtocolOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateConnectionRoutingProtocolOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateConnectionRoutingProtocolOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Bulk Create Protocol
     * This API provides capability to create Routing Protocol for connections
     *
     * @see #connectionIdPath Connection Id (required)
     * @see #body  (required)
     * return GetResponse
     */
    public static class CreateConnectionRoutingProtocolsInBulkOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/connections/{connectionId}/routingProtocols/bulk";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateConnectionRoutingProtocolsInBulkOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/connections/{connectionId}/routingProtocols/bulk
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/connections/{connectionId}/routingProtocols/bulk
         * @param handler handler
         * @return GetResponse
         */
        public GetResponse executeAs(Function<Response, Response> handler) {
            TypeRef<GetResponse> type = new TypeRef<GetResponse>(){};
            return execute(handler).as(type);
        }

         /**
         * @param connectionRoutingProtocolPostRequest (ConnectionRoutingProtocolPostRequest)  (required)
         * @return operation
         */
        public CreateConnectionRoutingProtocolsInBulkOper body(ConnectionRoutingProtocolPostRequest connectionRoutingProtocolPostRequest) {
            reqSpec.setBody(connectionRoutingProtocolPostRequest);
            return this;
        }

        public static final String CONNECTION_ID_PATH = "connectionId";

        /**
         * @param connectionId (String) Connection Id (required)
         * @return operation
         */
        public CreateConnectionRoutingProtocolsInBulkOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateConnectionRoutingProtocolsInBulkOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateConnectionRoutingProtocolsInBulkOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Delete Protocol
     * This API provides capability to delete Routing Protocols on virtual connection
     *
     * @see #routingProtocolIdPath Routing Protocol Id (required)
     * @see #connectionIdPath Connection Id (required)
     * return RoutingProtocolData
     */
    public static class DeleteConnectionRoutingProtocolByUuidOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteConnectionRoutingProtocolByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * DELETE /fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}
         * @param handler handler
         * @return RoutingProtocolData
         */
        public RoutingProtocolData executeAs(Function<Response, Response> handler) {
            TypeRef<RoutingProtocolData> type = new TypeRef<RoutingProtocolData>(){};
            return execute(handler).as(type);
        }

        public static final String ROUTING_PROTOCOL_ID_PATH = "routingProtocolId";

        /**
         * @param routingProtocolId (UUID) Routing Protocol Id (required)
         * @return operation
         */
        public DeleteConnectionRoutingProtocolByUuidOper routingProtocolIdPath(Object routingProtocolId) {
            reqSpec.addPathParam(ROUTING_PROTOCOL_ID_PATH, routingProtocolId);
            return this;
        }

        public static final String CONNECTION_ID_PATH = "connectionId";

        /**
         * @param connectionId (String) Connection Id (required)
         * @return operation
         */
        public DeleteConnectionRoutingProtocolByUuidOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteConnectionRoutingProtocolByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteConnectionRoutingProtocolByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get BGP Actions
     * This API provides capability to get all BGP actions status
     *
     * @see #routingProtocolIdPath Routing Protocol Id (required)
     * @see #connectionIdPath Connection Id (required)
     * @see #offsetQuery offset (optional)
     * @see #limitQuery number of records to fetch (optional)
     * return BGPActionsBulkData
     */
    public static class GetConnectionRoutingProtocolAllBgpActionsOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}/actions";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetConnectionRoutingProtocolAllBgpActionsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}/actions
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}/actions
         * @param handler handler
         * @return BGPActionsBulkData
         */
        public BGPActionsBulkData executeAs(Function<Response, Response> handler) {
            TypeRef<BGPActionsBulkData> type = new TypeRef<BGPActionsBulkData>(){};
            return execute(handler).as(type);
        }

        public static final String ROUTING_PROTOCOL_ID_PATH = "routingProtocolId";

        /**
         * @param routingProtocolId (UUID) Routing Protocol Id (required)
         * @return operation
         */
        public GetConnectionRoutingProtocolAllBgpActionsOper routingProtocolIdPath(Object routingProtocolId) {
            reqSpec.addPathParam(ROUTING_PROTOCOL_ID_PATH, routingProtocolId);
            return this;
        }

        public static final String CONNECTION_ID_PATH = "connectionId";

        /**
         * @param connectionId (String) Connection Id (required)
         * @return operation
         */
        public GetConnectionRoutingProtocolAllBgpActionsOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        public static final String OFFSET_QUERY = "offset";

        /**
         * @param offset (Integer) offset (optional)
         * @return operation
         */
        public GetConnectionRoutingProtocolAllBgpActionsOper offsetQuery(Object... offset) {
            reqSpec.addQueryParam(OFFSET_QUERY, offset);
            return this;
        }

        public static final String LIMIT_QUERY = "limit";

        /**
         * @param limit (Integer) number of records to fetch (optional)
         * @return operation
         */
        public GetConnectionRoutingProtocolAllBgpActionsOper limitQuery(Object... limit) {
            reqSpec.addQueryParam(LIMIT_QUERY, limit);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetConnectionRoutingProtocolAllBgpActionsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetConnectionRoutingProtocolAllBgpActionsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Protocol
     * This API provides capability to accept/reject user&#39;s virtual connection
     *
     * @see #routingProtocolIdPath Routing Protocol Id (required)
     * @see #connectionIdPath Connection Id (required)
     * return RoutingProtocolData
     */
    public static class GetConnectionRoutingProtocolByUuidOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetConnectionRoutingProtocolByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}
         * @param handler handler
         * @return RoutingProtocolData
         */
        public RoutingProtocolData executeAs(Function<Response, Response> handler) {
            TypeRef<RoutingProtocolData> type = new TypeRef<RoutingProtocolData>(){};
            return execute(handler).as(type);
        }

        public static final String ROUTING_PROTOCOL_ID_PATH = "routingProtocolId";

        /**
         * @param routingProtocolId (UUID) Routing Protocol Id (required)
         * @return operation
         */
        public GetConnectionRoutingProtocolByUuidOper routingProtocolIdPath(Object routingProtocolId) {
            reqSpec.addPathParam(ROUTING_PROTOCOL_ID_PATH, routingProtocolId);
            return this;
        }

        public static final String CONNECTION_ID_PATH = "connectionId";

        /**
         * @param connectionId (String) Connection Id (required)
         * @return operation
         */
        public GetConnectionRoutingProtocolByUuidOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetConnectionRoutingProtocolByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetConnectionRoutingProtocolByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * GetRoutingProtocols
     * This API provides capability to get Routing Protocols for connections
     *
     * @see #connectionIdPath Connection Id (required)
     * @see #offsetQuery offset (optional)
     * @see #limitQuery number of records to fetch (optional)
     * return GetResponse
     */
    public static class GetConnectionRoutingProtocolsOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/connections/{connectionId}/routingProtocols";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetConnectionRoutingProtocolsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/connections/{connectionId}/routingProtocols
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/connections/{connectionId}/routingProtocols
         * @param handler handler
         * @return GetResponse
         */
        public GetResponse executeAs(Function<Response, Response> handler) {
            TypeRef<GetResponse> type = new TypeRef<GetResponse>(){};
            return execute(handler).as(type);
        }

        public static final String CONNECTION_ID_PATH = "connectionId";

        /**
         * @param connectionId (String) Connection Id (required)
         * @return operation
         */
        public GetConnectionRoutingProtocolsOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        public static final String OFFSET_QUERY = "offset";

        /**
         * @param offset (Integer) offset (optional)
         * @return operation
         */
        public GetConnectionRoutingProtocolsOper offsetQuery(Object... offset) {
            reqSpec.addQueryParam(OFFSET_QUERY, offset);
            return this;
        }

        public static final String LIMIT_QUERY = "limit";

        /**
         * @param limit (Integer) number of records to fetch (optional)
         * @return operation
         */
        public GetConnectionRoutingProtocolsOper limitQuery(Object... limit) {
            reqSpec.addQueryParam(LIMIT_QUERY, limit);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetConnectionRoutingProtocolsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetConnectionRoutingProtocolsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get BGP Action
     * This API provides capability to retrieve specific BGP action
     *
     * @see #connectionIdPath Connection Id (required)
     * @see #routingProtocolIdPath Routing Protocol Id (required)
     * @see #actionIdPath BGP Action UUID (required)
     * return BGPActionData
     */
    public static class GetConnectionRoutingProtocolsBgpActionByUuidOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}/actions/{actionId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetConnectionRoutingProtocolsBgpActionByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}/actions/{actionId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}/actions/{actionId}
         * @param handler handler
         * @return BGPActionData
         */
        public BGPActionData executeAs(Function<Response, Response> handler) {
            TypeRef<BGPActionData> type = new TypeRef<BGPActionData>(){};
            return execute(handler).as(type);
        }

        public static final String CONNECTION_ID_PATH = "connectionId";

        /**
         * @param connectionId (String) Connection Id (required)
         * @return operation
         */
        public GetConnectionRoutingProtocolsBgpActionByUuidOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        public static final String ROUTING_PROTOCOL_ID_PATH = "routingProtocolId";

        /**
         * @param routingProtocolId (UUID) Routing Protocol Id (required)
         * @return operation
         */
        public GetConnectionRoutingProtocolsBgpActionByUuidOper routingProtocolIdPath(Object routingProtocolId) {
            reqSpec.addPathParam(ROUTING_PROTOCOL_ID_PATH, routingProtocolId);
            return this;
        }

        public static final String ACTION_ID_PATH = "actionId";

        /**
         * @param actionId (UUID) BGP Action UUID (required)
         * @return operation
         */
        public GetConnectionRoutingProtocolsBgpActionByUuidOper actionIdPath(Object actionId) {
            reqSpec.addPathParam(ACTION_ID_PATH, actionId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetConnectionRoutingProtocolsBgpActionByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetConnectionRoutingProtocolsBgpActionByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Change By ID
     * This API provides capability to retrieve specific Routing Protocol Change
     *
     * @see #connectionIdPath Connection Id (required)
     * @see #routingProtocolIdPath Routing Protocol Id (required)
     * @see #changeIdPath Routing Protocol Change UUID (required)
     * return RoutingProtocolChangeData
     */
    public static class GetConnectionRoutingProtocolsChangeByUuidOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}/changes/{changeId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetConnectionRoutingProtocolsChangeByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}/changes/{changeId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}/changes/{changeId}
         * @param handler handler
         * @return RoutingProtocolChangeData
         */
        public RoutingProtocolChangeData executeAs(Function<Response, Response> handler) {
            TypeRef<RoutingProtocolChangeData> type = new TypeRef<RoutingProtocolChangeData>(){};
            return execute(handler).as(type);
        }

        public static final String CONNECTION_ID_PATH = "connectionId";

        /**
         * @param connectionId (String) Connection Id (required)
         * @return operation
         */
        public GetConnectionRoutingProtocolsChangeByUuidOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        public static final String ROUTING_PROTOCOL_ID_PATH = "routingProtocolId";

        /**
         * @param routingProtocolId (UUID) Routing Protocol Id (required)
         * @return operation
         */
        public GetConnectionRoutingProtocolsChangeByUuidOper routingProtocolIdPath(Object routingProtocolId) {
            reqSpec.addPathParam(ROUTING_PROTOCOL_ID_PATH, routingProtocolId);
            return this;
        }

        public static final String CHANGE_ID_PATH = "changeId";

        /**
         * @param changeId (UUID) Routing Protocol Change UUID (required)
         * @return operation
         */
        public GetConnectionRoutingProtocolsChangeByUuidOper changeIdPath(Object changeId) {
            reqSpec.addPathParam(CHANGE_ID_PATH, changeId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetConnectionRoutingProtocolsChangeByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetConnectionRoutingProtocolsChangeByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Changes
     * This API provides capability to retrieve user&#39;s Routing Protocol Changes
     *
     * @see #connectionIdPath Connection Id (required)
     * @see #routingProtocolIdPath Routing Protocol Id (required)
     * @see #offsetQuery offset (optional)
     * @see #limitQuery number of records to fetch (optional)
     * return RoutingProtocolChangeDataResponse
     */
    public static class GetConnectionRoutingProtocolsChangesOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}/changes";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetConnectionRoutingProtocolsChangesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}/changes
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}/changes
         * @param handler handler
         * @return RoutingProtocolChangeDataResponse
         */
        public RoutingProtocolChangeDataResponse executeAs(Function<Response, Response> handler) {
            TypeRef<RoutingProtocolChangeDataResponse> type = new TypeRef<RoutingProtocolChangeDataResponse>(){};
            return execute(handler).as(type);
        }

        public static final String CONNECTION_ID_PATH = "connectionId";

        /**
         * @param connectionId (String) Connection Id (required)
         * @return operation
         */
        public GetConnectionRoutingProtocolsChangesOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        public static final String ROUTING_PROTOCOL_ID_PATH = "routingProtocolId";

        /**
         * @param routingProtocolId (UUID) Routing Protocol Id (required)
         * @return operation
         */
        public GetConnectionRoutingProtocolsChangesOper routingProtocolIdPath(Object routingProtocolId) {
            reqSpec.addPathParam(ROUTING_PROTOCOL_ID_PATH, routingProtocolId);
            return this;
        }

        public static final String OFFSET_QUERY = "offset";

        /**
         * @param offset (Integer) offset (optional)
         * @return operation
         */
        public GetConnectionRoutingProtocolsChangesOper offsetQuery(Object... offset) {
            reqSpec.addQueryParam(OFFSET_QUERY, offset);
            return this;
        }

        public static final String LIMIT_QUERY = "limit";

        /**
         * @param limit (Integer) number of records to fetch (optional)
         * @return operation
         */
        public GetConnectionRoutingProtocolsChangesOper limitQuery(Object... limit) {
            reqSpec.addQueryParam(LIMIT_QUERY, limit);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetConnectionRoutingProtocolsChangesOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetConnectionRoutingProtocolsChangesOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Patch Protocol
     * This API provides capability to partially update Routing Protocols on a virtual connection
     *
     * @see #routingProtocolIdPath Routing Protocol Id (required)
     * @see #connectionIdPath Connection Id (required)
     * @see #body  (required)
     * return RoutingProtocolData
     */
    public static class PatchConnectionRoutingProtocolByUuidOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PatchConnectionRoutingProtocolByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}
         * @param handler handler
         * @return RoutingProtocolData
         */
        public RoutingProtocolData executeAs(Function<Response, Response> handler) {
            TypeRef<RoutingProtocolData> type = new TypeRef<RoutingProtocolData>(){};
            return execute(handler).as(type);
        }

         /**
         * @param connectionChangeOperation (List&lt;ConnectionChangeOperation&gt;)  (required)
         * @return operation
         */
        public PatchConnectionRoutingProtocolByUuidOper body(List<ConnectionChangeOperation> connectionChangeOperation) {
            reqSpec.setBody(connectionChangeOperation);
            return this;
        }

        public static final String ROUTING_PROTOCOL_ID_PATH = "routingProtocolId";

        /**
         * @param routingProtocolId (UUID) Routing Protocol Id (required)
         * @return operation
         */
        public PatchConnectionRoutingProtocolByUuidOper routingProtocolIdPath(Object routingProtocolId) {
            reqSpec.addPathParam(ROUTING_PROTOCOL_ID_PATH, routingProtocolId);
            return this;
        }

        public static final String CONNECTION_ID_PATH = "connectionId";

        /**
         * @param connectionId (String) Connection Id (required)
         * @return operation
         */
        public PatchConnectionRoutingProtocolByUuidOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PatchConnectionRoutingProtocolByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PatchConnectionRoutingProtocolByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Clear/Reset BGP
     * This API provides capability to clear/reset Routing Protocols BGP session
     *
     * @see #routingProtocolIdPath Routing Protocol Id (required)
     * @see #connectionIdPath Connection Id (required)
     * @see #body  (required)
     * return BGPActionData
     */
    public static class PostConnectionRoutingProtocolBgpActionByUuidOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}/actions";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PostConnectionRoutingProtocolBgpActionByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}/actions
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}/actions
         * @param handler handler
         * @return BGPActionData
         */
        public BGPActionData executeAs(Function<Response, Response> handler) {
            TypeRef<BGPActionData> type = new TypeRef<BGPActionData>(){};
            return execute(handler).as(type);
        }

         /**
         * @param bgPActionRequest (BGPActionRequest)  (required)
         * @return operation
         */
        public PostConnectionRoutingProtocolBgpActionByUuidOper body(BGPActionRequest bgPActionRequest) {
            reqSpec.setBody(bgPActionRequest);
            return this;
        }

        public static final String ROUTING_PROTOCOL_ID_PATH = "routingProtocolId";

        /**
         * @param routingProtocolId (UUID) Routing Protocol Id (required)
         * @return operation
         */
        public PostConnectionRoutingProtocolBgpActionByUuidOper routingProtocolIdPath(Object routingProtocolId) {
            reqSpec.addPathParam(ROUTING_PROTOCOL_ID_PATH, routingProtocolId);
            return this;
        }

        public static final String CONNECTION_ID_PATH = "connectionId";

        /**
         * @param connectionId (String) Connection Id (required)
         * @return operation
         */
        public PostConnectionRoutingProtocolBgpActionByUuidOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PostConnectionRoutingProtocolBgpActionByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PostConnectionRoutingProtocolBgpActionByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Replace Protocol
     * This API provides capability to replace complete Routing Protocols on a virtual connection
     *
     * @see #routingProtocolIdPath Routing Protocol Id (required)
     * @see #connectionIdPath Connection Id (required)
     * @see #body  (required)
     * return RoutingProtocolData
     */
    public static class ReplaceConnectionRoutingProtocolByUuidOper implements Oper {

        public static final Method REQ_METHOD = PUT;
        public static final String REQ_URI = "/fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ReplaceConnectionRoutingProtocolByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PUT /fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}
         * @param handler handler
         * @return RoutingProtocolData
         */
        public RoutingProtocolData executeAs(Function<Response, Response> handler) {
            TypeRef<RoutingProtocolData> type = new TypeRef<RoutingProtocolData>(){};
            return execute(handler).as(type);
        }

         /**
         * @param routingProtocolBase (RoutingProtocolBase)  (required)
         * @return operation
         */
        public ReplaceConnectionRoutingProtocolByUuidOper body(RoutingProtocolBase routingProtocolBase) {
            reqSpec.setBody(routingProtocolBase);
            return this;
        }

        public static final String ROUTING_PROTOCOL_ID_PATH = "routingProtocolId";

        /**
         * @param routingProtocolId (UUID) Routing Protocol Id (required)
         * @return operation
         */
        public ReplaceConnectionRoutingProtocolByUuidOper routingProtocolIdPath(Object routingProtocolId) {
            reqSpec.addPathParam(ROUTING_PROTOCOL_ID_PATH, routingProtocolId);
            return this;
        }

        public static final String CONNECTION_ID_PATH = "connectionId";

        /**
         * @param connectionId (String) Connection Id (required)
         * @return operation
         */
        public ReplaceConnectionRoutingProtocolByUuidOper connectionIdPath(Object connectionId) {
            reqSpec.addPathParam(CONNECTION_ID_PATH, connectionId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ReplaceConnectionRoutingProtocolByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ReplaceConnectionRoutingProtocolByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Validate Subnet
     * This API provides capability to validate all subnets associated with any connection in the given FCR
     *
     * @see #routerIdPath Cloud Router UUID (required)
     * @see #body  (required)
     * return ValidateSubnetResponse
     */
    public static class ValidateRoutingProtocolOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/routers/{routerId}/validate";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ValidateRoutingProtocolOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/routers/{routerId}/validate
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/routers/{routerId}/validate
         * @param handler handler
         * @return ValidateSubnetResponse
         */
        public ValidateSubnetResponse executeAs(Function<Response, Response> handler) {
            TypeRef<ValidateSubnetResponse> type = new TypeRef<ValidateSubnetResponse>(){};
            return execute(handler).as(type);
        }

         /**
         * @param validateRequest (ValidateRequest)  (required)
         * @return operation
         */
        public ValidateRoutingProtocolOper body(ValidateRequest validateRequest) {
            reqSpec.setBody(validateRequest);
            return this;
        }

        public static final String ROUTER_ID_PATH = "routerId";

        /**
         * @param routerId (UUID) Cloud Router UUID (required)
         * @return operation
         */
        public ValidateRoutingProtocolOper routerIdPath(Object routerId) {
            reqSpec.addPathParam(ROUTER_ID_PATH, routerId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ValidateRoutingProtocolOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ValidateRoutingProtocolOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
