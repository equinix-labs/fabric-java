/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import com.equinix.openapi.fabric.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * Connection link protocol configuration - QINQ
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LinkProtocolQinq {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private LinkProtocolType type;

  public static final String SERIALIZED_NAME_INNER_TAG_PROTOCOL_ID = "innerTagProtocolId";
  @SerializedName(SERIALIZED_NAME_INNER_TAG_PROTOCOL_ID)
  private Integer innerTagProtocolId;

  public static final String SERIALIZED_NAME_OUTER_TAG_PROTOCOL_ID = "outerTagProtocolId";
  @SerializedName(SERIALIZED_NAME_OUTER_TAG_PROTOCOL_ID)
  private Integer outerTagProtocolId;

  public static final String SERIALIZED_NAME_VLAN_C_TAG = "vlanCTag";
  @SerializedName(SERIALIZED_NAME_VLAN_C_TAG)
  private Integer vlanCTag;

  public static final String SERIALIZED_NAME_VLAN_S_TAG = "vlanSTag";
  @SerializedName(SERIALIZED_NAME_VLAN_S_TAG)
  private Integer vlanSTag;

  public static final String SERIALIZED_NAME_VLAN_C_TAG_MIN = "vlanCTagMin";
  @SerializedName(SERIALIZED_NAME_VLAN_C_TAG_MIN)
  private Integer vlanCTagMin;

  public static final String SERIALIZED_NAME_VLAN_C_TAG_MAX = "vlanCTagMax";
  @SerializedName(SERIALIZED_NAME_VLAN_C_TAG_MAX)
  private Integer vlanCTagMax;

  public static final String SERIALIZED_NAME_SUB_INTERFACE = "subInterface";
  @SerializedName(SERIALIZED_NAME_SUB_INTERFACE)
  private Integer subInterface;

  public LinkProtocolQinq() {
  }

  public LinkProtocolQinq type(LinkProtocolType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable

  public LinkProtocolType getType() {
    return type;
  }


  public void setType(LinkProtocolType type) {
    this.type = type;
  }


  public LinkProtocolQinq innerTagProtocolId(Integer innerTagProtocolId) {
    
    this.innerTagProtocolId = innerTagProtocolId;
    return this;
  }

   /**
   * Inner tag protocol identifier
   * @return innerTagProtocolId
  **/
  @javax.annotation.Nonnull

  public Integer getInnerTagProtocolId() {
    return innerTagProtocolId;
  }


  public void setInnerTagProtocolId(Integer innerTagProtocolId) {
    this.innerTagProtocolId = innerTagProtocolId;
  }


  public LinkProtocolQinq outerTagProtocolId(Integer outerTagProtocolId) {
    
    this.outerTagProtocolId = outerTagProtocolId;
    return this;
  }

   /**
   * Outer tag protocol identifier
   * @return outerTagProtocolId
  **/
  @javax.annotation.Nonnull

  public Integer getOuterTagProtocolId() {
    return outerTagProtocolId;
  }


  public void setOuterTagProtocolId(Integer outerTagProtocolId) {
    this.outerTagProtocolId = outerTagProtocolId;
  }


  public LinkProtocolQinq vlanCTag(Integer vlanCTag) {
    
    this.vlanCTag = vlanCTag;
    return this;
  }

   /**
   * Inner tag, i.e., C-VLAN tag
   * @return vlanCTag
  **/
  @javax.annotation.Nonnull

  public Integer getVlanCTag() {
    return vlanCTag;
  }


  public void setVlanCTag(Integer vlanCTag) {
    this.vlanCTag = vlanCTag;
  }


  public LinkProtocolQinq vlanSTag(Integer vlanSTag) {
    
    this.vlanSTag = vlanSTag;
    return this;
  }

   /**
   * Outer tag, i.e., S-VLAN tag
   * @return vlanSTag
  **/
  @javax.annotation.Nonnull

  public Integer getVlanSTag() {
    return vlanSTag;
  }


  public void setVlanSTag(Integer vlanSTag) {
    this.vlanSTag = vlanSTag;
  }


  public LinkProtocolQinq vlanCTagMin(Integer vlanCTagMin) {
    
    this.vlanCTagMin = vlanCTagMin;
    return this;
  }

   /**
   * Outer tag Min value specified for QINQ connections
   * @return vlanCTagMin
  **/
  @javax.annotation.Nullable

  public Integer getVlanCTagMin() {
    return vlanCTagMin;
  }


  public void setVlanCTagMin(Integer vlanCTagMin) {
    this.vlanCTagMin = vlanCTagMin;
  }


  public LinkProtocolQinq vlanCTagMax(Integer vlanCTagMax) {
    
    this.vlanCTagMax = vlanCTagMax;
    return this;
  }

   /**
   * Outer tag Max value specified for QINQ connections
   * @return vlanCTagMax
  **/
  @javax.annotation.Nullable

  public Integer getVlanCTagMax() {
    return vlanCTagMax;
  }


  public void setVlanCTagMax(Integer vlanCTagMax) {
    this.vlanCTagMax = vlanCTagMax;
  }


  public LinkProtocolQinq subInterface(Integer subInterface) {
    
    this.subInterface = subInterface;
    return this;
  }

   /**
   * Subinterface identifier
   * @return subInterface
  **/
  @javax.annotation.Nullable

  public Integer getSubInterface() {
    return subInterface;
  }


  public void setSubInterface(Integer subInterface) {
    this.subInterface = subInterface;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LinkProtocolQinq instance itself
   */
  public LinkProtocolQinq putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinkProtocolQinq linkProtocolQinq = (LinkProtocolQinq) o;
    return Objects.equals(this.type, linkProtocolQinq.type) &&
        Objects.equals(this.innerTagProtocolId, linkProtocolQinq.innerTagProtocolId) &&
        Objects.equals(this.outerTagProtocolId, linkProtocolQinq.outerTagProtocolId) &&
        Objects.equals(this.vlanCTag, linkProtocolQinq.vlanCTag) &&
        Objects.equals(this.vlanSTag, linkProtocolQinq.vlanSTag) &&
        Objects.equals(this.vlanCTagMin, linkProtocolQinq.vlanCTagMin) &&
        Objects.equals(this.vlanCTagMax, linkProtocolQinq.vlanCTagMax) &&
        Objects.equals(this.subInterface, linkProtocolQinq.subInterface)&&
        Objects.equals(this.additionalProperties, linkProtocolQinq.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, innerTagProtocolId, outerTagProtocolId, vlanCTag, vlanSTag, vlanCTagMin, vlanCTagMax, subInterface, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinkProtocolQinq {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    innerTagProtocolId: ").append(toIndentedString(innerTagProtocolId)).append("\n");
    sb.append("    outerTagProtocolId: ").append(toIndentedString(outerTagProtocolId)).append("\n");
    sb.append("    vlanCTag: ").append(toIndentedString(vlanCTag)).append("\n");
    sb.append("    vlanSTag: ").append(toIndentedString(vlanSTag)).append("\n");
    sb.append("    vlanCTagMin: ").append(toIndentedString(vlanCTagMin)).append("\n");
    sb.append("    vlanCTagMax: ").append(toIndentedString(vlanCTagMax)).append("\n");
    sb.append("    subInterface: ").append(toIndentedString(subInterface)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("innerTagProtocolId");
    openapiFields.add("outerTagProtocolId");
    openapiFields.add("vlanCTag");
    openapiFields.add("vlanSTag");
    openapiFields.add("vlanCTagMin");
    openapiFields.add("vlanCTagMax");
    openapiFields.add("subInterface");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("innerTagProtocolId");
    openapiRequiredFields.add("outerTagProtocolId");
    openapiRequiredFields.add("vlanCTag");
    openapiRequiredFields.add("vlanSTag");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LinkProtocolQinq
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LinkProtocolQinq.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LinkProtocolQinq is not found in the empty JSON string", LinkProtocolQinq.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LinkProtocolQinq.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LinkProtocolQinq.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LinkProtocolQinq' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LinkProtocolQinq> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LinkProtocolQinq.class));

       return (TypeAdapter<T>) new TypeAdapter<LinkProtocolQinq>() {
           @Override
           public void write(JsonWriter out, LinkProtocolQinq value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LinkProtocolQinq read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LinkProtocolQinq instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LinkProtocolQinq given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LinkProtocolQinq
  * @throws IOException if the JSON string is invalid with respect to LinkProtocolQinq
  */
  public static LinkProtocolQinq fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LinkProtocolQinq.class);
  }

 /**
  * Convert an instance of LinkProtocolQinq to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

