/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import com.fasterxml.jackson.annotation.*;

import java.util.Objects;

/**
 * List of criteria for selecting network access points with optimal efficiency, security, compatibility, and availability.
 */
@JsonPropertyOrder({
  AccessPointSelector.JSON_PROPERTY_TYPE,
  AccessPointSelector.JSON_PROPERTY_PORT,
  AccessPointSelector.JSON_PROPERTY_LINK_PROTOCOL
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AccessPointSelector {
  /**
   * Type of Access point
   */
  public enum TypeEnum {
    COLO("COLO");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_PORT = "port";
  private SimplifiedMetadataEntity port;

  public static final String JSON_PROPERTY_LINK_PROTOCOL = "linkProtocol";
  private LinkProtocol linkProtocol;

  public AccessPointSelector() {
  }

  public AccessPointSelector type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of Access point
   * @return type
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public AccessPointSelector port(SimplifiedMetadataEntity port) {
    
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SimplifiedMetadataEntity getPort() {
    return port;
  }


  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPort(SimplifiedMetadataEntity port) {
    this.port = port;
  }


  public AccessPointSelector linkProtocol(LinkProtocol linkProtocol) {
    
    this.linkProtocol = linkProtocol;
    return this;
  }

   /**
   * Get linkProtocol
   * @return linkProtocol
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINK_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LinkProtocol getLinkProtocol() {
    return linkProtocol;
  }


  @JsonProperty(JSON_PROPERTY_LINK_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLinkProtocol(LinkProtocol linkProtocol) {
    this.linkProtocol = linkProtocol;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessPointSelector accessPointSelector = (AccessPointSelector) o;
    return Objects.equals(this.type, accessPointSelector.type) &&
        Objects.equals(this.port, accessPointSelector.port) &&
        Objects.equals(this.linkProtocol, accessPointSelector.linkProtocol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, port, linkProtocol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessPointSelector {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    linkProtocol: ").append(toIndentedString(linkProtocol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

