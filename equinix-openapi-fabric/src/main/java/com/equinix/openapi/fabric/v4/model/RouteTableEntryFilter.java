/*
 * Equinix Fabric API v4
 * Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>
 *
 * The version of the OpenAPI document: 4.10
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import java.util.Objects;
import java.util.Arrays;
import com.equinix.openapi.fabric.v4.model.RouteTableEntryOrFilter;
import com.equinix.openapi.fabric.v4.model.RouteTableEntrySimpleExpression;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import com.equinix.openapi.fabric.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RouteTableEntryFilter extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(RouteTableEntryFilter.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RouteTableEntryFilter.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'RouteTableEntryFilter' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<RouteTableEntryOrFilter> adapterRouteTableEntryOrFilter = gson.getDelegateAdapter(this, TypeToken.get(RouteTableEntryOrFilter.class));
            final TypeAdapter<RouteTableEntrySimpleExpression> adapterRouteTableEntrySimpleExpression = gson.getDelegateAdapter(this, TypeToken.get(RouteTableEntrySimpleExpression.class));

            return (TypeAdapter<T>) new TypeAdapter<RouteTableEntryFilter>() {
                @Override
                public void write(JsonWriter out, RouteTableEntryFilter value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `RouteTableEntryOrFilter`
                    if (value.getActualInstance() instanceof RouteTableEntryOrFilter) {
                        JsonObject obj = adapterRouteTableEntryOrFilter.toJsonTree((RouteTableEntryOrFilter)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `RouteTableEntrySimpleExpression`
                    if (value.getActualInstance() instanceof RouteTableEntrySimpleExpression) {
                        JsonObject obj = adapterRouteTableEntrySimpleExpression.toJsonTree((RouteTableEntrySimpleExpression)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: RouteTableEntryOrFilter, RouteTableEntrySimpleExpression");
                }

                @Override
                public RouteTableEntryFilter read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    // deserialize RouteTableEntryOrFilter
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RouteTableEntryOrFilter.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'RouteTableEntryOrFilter'");
                        RouteTableEntryFilter ret = new RouteTableEntryFilter();
                        ret.setActualInstance(adapterRouteTableEntryOrFilter.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'RouteTableEntryOrFilter'", e);
                    }

                    // deserialize RouteTableEntrySimpleExpression
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RouteTableEntrySimpleExpression.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'RouteTableEntrySimpleExpression'");
                        RouteTableEntryFilter ret = new RouteTableEntryFilter();
                        ret.setActualInstance(adapterRouteTableEntrySimpleExpression.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'RouteTableEntrySimpleExpression'", e);
                    }


                    throw new IOException(String.format("Failed deserialization for RouteTableEntryFilter: no class matched. JSON: %s", jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public RouteTableEntryFilter() {
        super("anyOf", Boolean.FALSE);
    }

    public RouteTableEntryFilter(RouteTableEntryOrFilter o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RouteTableEntryFilter(RouteTableEntrySimpleExpression o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("RouteTableEntryOrFilter", new GenericType<RouteTableEntryOrFilter>() {
        });
        schemas.put("RouteTableEntrySimpleExpression", new GenericType<RouteTableEntrySimpleExpression>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return RouteTableEntryFilter.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * RouteTableEntryOrFilter, RouteTableEntrySimpleExpression
     *
     * It could be an instance of the 'anyOf' schemas.
     * The anyOf child schemas may themselves be a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof RouteTableEntryOrFilter) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RouteTableEntrySimpleExpression) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be RouteTableEntryOrFilter, RouteTableEntrySimpleExpression");
    }

    /**
     * Get the actual instance, which can be the following:
     * RouteTableEntryOrFilter, RouteTableEntrySimpleExpression
     *
     * @return The actual instance (RouteTableEntryOrFilter, RouteTableEntrySimpleExpression)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `RouteTableEntryOrFilter`. If the actual instance is not `RouteTableEntryOrFilter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RouteTableEntryOrFilter`
     * @throws ClassCastException if the instance is not `RouteTableEntryOrFilter`
     */
    public RouteTableEntryOrFilter getRouteTableEntryOrFilter() throws ClassCastException {
        return (RouteTableEntryOrFilter)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RouteTableEntrySimpleExpression`. If the actual instance is not `RouteTableEntrySimpleExpression`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RouteTableEntrySimpleExpression`
     * @throws ClassCastException if the instance is not `RouteTableEntrySimpleExpression`
     */
    public RouteTableEntrySimpleExpression getRouteTableEntrySimpleExpression() throws ClassCastException {
        return (RouteTableEntrySimpleExpression)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RouteTableEntryFilter
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate anyOf schemas one by one
    int validCount = 0;
    // validate the json string with RouteTableEntryOrFilter
    try {
      RouteTableEntryOrFilter.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with RouteTableEntrySimpleExpression
    try {
      RouteTableEntrySimpleExpression.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    if (validCount == 0) {
      throw new IOException(String.format("The JSON string is invalid for RouteTableEntryFilter with anyOf schemas: RouteTableEntryOrFilter, RouteTableEntrySimpleExpression. JSON: %s", jsonObj.toString()));
    }
  }

 /**
  * Create an instance of RouteTableEntryFilter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RouteTableEntryFilter
  * @throws IOException if the JSON string is invalid with respect to RouteTableEntryFilter
  */
  public static RouteTableEntryFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RouteTableEntryFilter.class);
  }

 /**
  * Convert an instance of RouteTableEntryFilter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

