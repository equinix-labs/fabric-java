/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import java.util.Objects;
import java.util.Arrays;
import com.equinix.openapi.fabric.v4.model.PhysicalPortType;
import com.equinix.openapi.fabric.v4.model.PortAdditionalInfo;
import com.equinix.openapi.fabric.v4.model.PortDemarcationPoint;
import com.equinix.openapi.fabric.v4.model.PortLoa;
import com.equinix.openapi.fabric.v4.model.PortOperation;
import com.equinix.openapi.fabric.v4.model.PortOrder;
import com.equinix.openapi.fabric.v4.model.PortState;
import com.equinix.openapi.fabric.v4.model.PortTether;
import com.equinix.openapi.fabric.v4.model.SimplifiedAccount;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Physical Port specification
 */
@JsonPropertyOrder({
  PhysicalPort.JSON_PROPERTY_TYPE,
  PhysicalPort.JSON_PROPERTY_ID,
  PhysicalPort.JSON_PROPERTY_HREF,
  PhysicalPort.JSON_PROPERTY_STATE,
  PhysicalPort.JSON_PROPERTY_ACCOUNT,
  PhysicalPort.JSON_PROPERTY_INTERFACE_SPEED,
  PhysicalPort.JSON_PROPERTY_INTERFACE_TYPE,
  PhysicalPort.JSON_PROPERTY_TETHER,
  PhysicalPort.JSON_PROPERTY_DEMARCATION_POINT,
  PhysicalPort.JSON_PROPERTY_ADDITIONAL_INFO,
  PhysicalPort.JSON_PROPERTY_ORDER,
  PhysicalPort.JSON_PROPERTY_OPERATION,
  PhysicalPort.JSON_PROPERTY_LOAS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PhysicalPort {
  public static final String JSON_PROPERTY_TYPE = "type";
  private PhysicalPortType type;

  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_HREF = "href";
  private URI href;

  public static final String JSON_PROPERTY_STATE = "state";
  private PortState state;

  public static final String JSON_PROPERTY_ACCOUNT = "account";
  private SimplifiedAccount account;

  public static final String JSON_PROPERTY_INTERFACE_SPEED = "interfaceSpeed";
  private Integer interfaceSpeed;

  public static final String JSON_PROPERTY_INTERFACE_TYPE = "interfaceType";
  private String interfaceType;

  public static final String JSON_PROPERTY_TETHER = "tether";
  private PortTether tether;

  public static final String JSON_PROPERTY_DEMARCATION_POINT = "demarcationPoint";
  private PortDemarcationPoint demarcationPoint;

  public static final String JSON_PROPERTY_ADDITIONAL_INFO = "additionalInfo";
  private List<PortAdditionalInfo> additionalInfo = new ArrayList<>();

  public static final String JSON_PROPERTY_ORDER = "order";
  private PortOrder order;

  public static final String JSON_PROPERTY_OPERATION = "operation";
  private PortOperation operation;

  public static final String JSON_PROPERTY_LOAS = "loas";
  private List<PortLoa> loas = new ArrayList<>();

  public PhysicalPort() {
  }

  @JsonCreator
  public PhysicalPort(
    @JsonProperty(JSON_PROPERTY_HREF) URI href
  ) {
    this();
    this.href = href;
  }

  public PhysicalPort type(PhysicalPortType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PhysicalPortType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(PhysicalPortType type) {
    this.type = type;
  }


  public PhysicalPort id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Equinix assigned response attribute for Physical Port Id
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Integer id) {
    this.id = id;
  }


   /**
   * Equinix assigned response attribute for an absolute URL that is the subject of the link&#39;s context.
   * @return href
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getHref() {
    return href;
  }




  public PhysicalPort state(PortState state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortState getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setState(PortState state) {
    this.state = state;
  }


  public PhysicalPort account(SimplifiedAccount account) {
    
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SimplifiedAccount getAccount() {
    return account;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccount(SimplifiedAccount account) {
    this.account = account;
  }


  public PhysicalPort interfaceSpeed(Integer interfaceSpeed) {
    
    this.interfaceSpeed = interfaceSpeed;
    return this;
  }

   /**
   * Physical Port Speed in Mbps
   * minimum: 0
   * @return interfaceSpeed
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERFACE_SPEED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInterfaceSpeed() {
    return interfaceSpeed;
  }


  @JsonProperty(JSON_PROPERTY_INTERFACE_SPEED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInterfaceSpeed(Integer interfaceSpeed) {
    this.interfaceSpeed = interfaceSpeed;
  }


  public PhysicalPort interfaceType(String interfaceType) {
    
    this.interfaceType = interfaceType;
    return this;
  }

   /**
   * Physical Port Interface Type
   * @return interfaceType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERFACE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInterfaceType() {
    return interfaceType;
  }


  @JsonProperty(JSON_PROPERTY_INTERFACE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInterfaceType(String interfaceType) {
    this.interfaceType = interfaceType;
  }


  public PhysicalPort tether(PortTether tether) {
    
    this.tether = tether;
    return this;
  }

   /**
   * Get tether
   * @return tether
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TETHER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortTether getTether() {
    return tether;
  }


  @JsonProperty(JSON_PROPERTY_TETHER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTether(PortTether tether) {
    this.tether = tether;
  }


  public PhysicalPort demarcationPoint(PortDemarcationPoint demarcationPoint) {
    
    this.demarcationPoint = demarcationPoint;
    return this;
  }

   /**
   * Get demarcationPoint
   * @return demarcationPoint
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEMARCATION_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortDemarcationPoint getDemarcationPoint() {
    return demarcationPoint;
  }


  @JsonProperty(JSON_PROPERTY_DEMARCATION_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDemarcationPoint(PortDemarcationPoint demarcationPoint) {
    this.demarcationPoint = demarcationPoint;
  }


  public PhysicalPort additionalInfo(List<PortAdditionalInfo> additionalInfo) {
    
    this.additionalInfo = additionalInfo;
    return this;
  }

  public PhysicalPort addAdditionalInfoItem(PortAdditionalInfo additionalInfoItem) {
    if (this.additionalInfo == null) {
      this.additionalInfo = new ArrayList<>();
    }
    this.additionalInfo.add(additionalInfoItem);
    return this;
  }

   /**
   * Physical Port additional information
   * @return additionalInfo
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PortAdditionalInfo> getAdditionalInfo() {
    return additionalInfo;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalInfo(List<PortAdditionalInfo> additionalInfo) {
    this.additionalInfo = additionalInfo;
  }


  public PhysicalPort order(PortOrder order) {
    
    this.order = order;
    return this;
  }

   /**
   * Get order
   * @return order
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortOrder getOrder() {
    return order;
  }


  @JsonProperty(JSON_PROPERTY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrder(PortOrder order) {
    this.order = order;
  }


  public PhysicalPort operation(PortOperation operation) {
    
    this.operation = operation;
    return this;
  }

   /**
   * Get operation
   * @return operation
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortOperation getOperation() {
    return operation;
  }


  @JsonProperty(JSON_PROPERTY_OPERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperation(PortOperation operation) {
    this.operation = operation;
  }


  public PhysicalPort loas(List<PortLoa> loas) {
    
    this.loas = loas;
    return this;
  }

  public PhysicalPort addLoasItem(PortLoa loasItem) {
    if (this.loas == null) {
      this.loas = new ArrayList<>();
    }
    this.loas.add(loasItem);
    return this;
  }

   /**
   * Port Loas
   * @return loas
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PortLoa> getLoas() {
    return loas;
  }


  @JsonProperty(JSON_PROPERTY_LOAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoas(List<PortLoa> loas) {
    this.loas = loas;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhysicalPort physicalPort = (PhysicalPort) o;
    return Objects.equals(this.type, physicalPort.type) &&
        Objects.equals(this.id, physicalPort.id) &&
        Objects.equals(this.href, physicalPort.href) &&
        Objects.equals(this.state, physicalPort.state) &&
        Objects.equals(this.account, physicalPort.account) &&
        Objects.equals(this.interfaceSpeed, physicalPort.interfaceSpeed) &&
        Objects.equals(this.interfaceType, physicalPort.interfaceType) &&
        Objects.equals(this.tether, physicalPort.tether) &&
        Objects.equals(this.demarcationPoint, physicalPort.demarcationPoint) &&
        Objects.equals(this.additionalInfo, physicalPort.additionalInfo) &&
        Objects.equals(this.order, physicalPort.order) &&
        Objects.equals(this.operation, physicalPort.operation) &&
        Objects.equals(this.loas, physicalPort.loas);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, id, href, state, account, interfaceSpeed, interfaceType, tether, demarcationPoint, additionalInfo, order, operation, loas);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhysicalPort {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    interfaceSpeed: ").append(toIndentedString(interfaceSpeed)).append("\n");
    sb.append("    interfaceType: ").append(toIndentedString(interfaceType)).append("\n");
    sb.append("    tether: ").append(toIndentedString(tether)).append("\n");
    sb.append("    demarcationPoint: ").append(toIndentedString(demarcationPoint)).append("\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    loas: ").append(toIndentedString(loas)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

