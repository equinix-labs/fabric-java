/*
 * Equinix Fabric API v4
 * Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>
 *
 * The version of the OpenAPI document: 4.10
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import java.util.Objects;
import java.util.Arrays;
import com.equinix.openapi.fabric.v4.model.AdditionalInfo;
import com.equinix.openapi.fabric.v4.model.Changelog;
import com.equinix.openapi.fabric.v4.model.LinkProtocolConnection;
import com.equinix.openapi.fabric.v4.model.LinkProtocolRequestType;
import com.equinix.openapi.fabric.v4.model.LinkProtocolServiceToken;
import com.equinix.openapi.fabric.v4.model.LinkProtocolState;
import com.equinix.openapi.fabric.v4.model.SubInterface;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.equinix.openapi.fabric.JSON;

/**
 * Link Protocol response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LinkProtocolResponse {
  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UUID uuid;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private LinkProtocolState state;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private LinkProtocolRequestType type;

  public static final String SERIALIZED_NAME_VLAN_TAG = "vlanTag";
  @SerializedName(SERIALIZED_NAME_VLAN_TAG)
  private Integer vlanTag;

  public static final String SERIALIZED_NAME_VLAN_TAG_MIN = "vlanTagMin";
  @SerializedName(SERIALIZED_NAME_VLAN_TAG_MIN)
  private Integer vlanTagMin;

  public static final String SERIALIZED_NAME_VLAN_TAG_MAX = "vlanTagMax";
  @SerializedName(SERIALIZED_NAME_VLAN_TAG_MAX)
  private Integer vlanTagMax;

  public static final String SERIALIZED_NAME_VLAN_S_TAG = "vlanSTag";
  @SerializedName(SERIALIZED_NAME_VLAN_S_TAG)
  private Integer vlanSTag;

  public static final String SERIALIZED_NAME_VLAN_C_TAG = "vlanCTag";
  @SerializedName(SERIALIZED_NAME_VLAN_C_TAG)
  private Integer vlanCTag;

  public static final String SERIALIZED_NAME_VLAN_C_TAG_MIN = "vlanCTagMin";
  @SerializedName(SERIALIZED_NAME_VLAN_C_TAG_MIN)
  private Integer vlanCTagMin;

  public static final String SERIALIZED_NAME_VLAN_C_TAG_MAX = "vlanCTagMax";
  @SerializedName(SERIALIZED_NAME_VLAN_C_TAG_MAX)
  private Integer vlanCTagMax;

  public static final String SERIALIZED_NAME_SUB_INTERFACE = "subInterface";
  @SerializedName(SERIALIZED_NAME_SUB_INTERFACE)
  private SubInterface subInterface;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFO = "additionalInfo";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFO)
  private List<AdditionalInfo> additionalInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONNECTION = "connection";
  @SerializedName(SERIALIZED_NAME_CONNECTION)
  private LinkProtocolConnection connection;

  public static final String SERIALIZED_NAME_SERVICE_TOKEN = "serviceToken";
  @SerializedName(SERIALIZED_NAME_SERVICE_TOKEN)
  private LinkProtocolServiceToken serviceToken;

  public static final String SERIALIZED_NAME_CHANGE_LOG = "changeLog";
  @SerializedName(SERIALIZED_NAME_CHANGE_LOG)
  private Changelog changeLog;

  public LinkProtocolResponse() {
  }

  public LinkProtocolResponse uuid(UUID uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Equinix-assigned network identifier
   * @return uuid
  **/
  @javax.annotation.Nullable

  public UUID getUuid() {
    return uuid;
  }


  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }


  public LinkProtocolResponse state(LinkProtocolState state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable

  public LinkProtocolState getState() {
    return state;
  }


  public void setState(LinkProtocolState state) {
    this.state = state;
  }


  public LinkProtocolResponse type(LinkProtocolRequestType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable

  public LinkProtocolRequestType getType() {
    return type;
  }


  public void setType(LinkProtocolRequestType type) {
    this.type = type;
  }


  public LinkProtocolResponse vlanTag(Integer vlanTag) {
    
    this.vlanTag = vlanTag;
    return this;
  }

   /**
   * Get vlanTag
   * @return vlanTag
  **/
  @javax.annotation.Nullable

  public Integer getVlanTag() {
    return vlanTag;
  }


  public void setVlanTag(Integer vlanTag) {
    this.vlanTag = vlanTag;
  }


  public LinkProtocolResponse vlanTagMin(Integer vlanTagMin) {
    
    this.vlanTagMin = vlanTagMin;
    return this;
  }

   /**
   * Get vlanTagMin
   * @return vlanTagMin
  **/
  @javax.annotation.Nullable

  public Integer getVlanTagMin() {
    return vlanTagMin;
  }


  public void setVlanTagMin(Integer vlanTagMin) {
    this.vlanTagMin = vlanTagMin;
  }


  public LinkProtocolResponse vlanTagMax(Integer vlanTagMax) {
    
    this.vlanTagMax = vlanTagMax;
    return this;
  }

   /**
   * Get vlanTagMax
   * @return vlanTagMax
  **/
  @javax.annotation.Nullable

  public Integer getVlanTagMax() {
    return vlanTagMax;
  }


  public void setVlanTagMax(Integer vlanTagMax) {
    this.vlanTagMax = vlanTagMax;
  }


  public LinkProtocolResponse vlanSTag(Integer vlanSTag) {
    
    this.vlanSTag = vlanSTag;
    return this;
  }

   /**
   * Get vlanSTag
   * @return vlanSTag
  **/
  @javax.annotation.Nullable

  public Integer getVlanSTag() {
    return vlanSTag;
  }


  public void setVlanSTag(Integer vlanSTag) {
    this.vlanSTag = vlanSTag;
  }


  public LinkProtocolResponse vlanCTag(Integer vlanCTag) {
    
    this.vlanCTag = vlanCTag;
    return this;
  }

   /**
   * Get vlanCTag
   * @return vlanCTag
  **/
  @javax.annotation.Nullable

  public Integer getVlanCTag() {
    return vlanCTag;
  }


  public void setVlanCTag(Integer vlanCTag) {
    this.vlanCTag = vlanCTag;
  }


  public LinkProtocolResponse vlanCTagMin(Integer vlanCTagMin) {
    
    this.vlanCTagMin = vlanCTagMin;
    return this;
  }

   /**
   * Get vlanCTagMin
   * @return vlanCTagMin
  **/
  @javax.annotation.Nullable

  public Integer getVlanCTagMin() {
    return vlanCTagMin;
  }


  public void setVlanCTagMin(Integer vlanCTagMin) {
    this.vlanCTagMin = vlanCTagMin;
  }


  public LinkProtocolResponse vlanCTagMax(Integer vlanCTagMax) {
    
    this.vlanCTagMax = vlanCTagMax;
    return this;
  }

   /**
   * Get vlanCTagMax
   * @return vlanCTagMax
  **/
  @javax.annotation.Nullable

  public Integer getVlanCTagMax() {
    return vlanCTagMax;
  }


  public void setVlanCTagMax(Integer vlanCTagMax) {
    this.vlanCTagMax = vlanCTagMax;
  }


  public LinkProtocolResponse subInterface(SubInterface subInterface) {
    
    this.subInterface = subInterface;
    return this;
  }

   /**
   * Get subInterface
   * @return subInterface
  **/
  @javax.annotation.Nullable

  public SubInterface getSubInterface() {
    return subInterface;
  }


  public void setSubInterface(SubInterface subInterface) {
    this.subInterface = subInterface;
  }


  public LinkProtocolResponse additionalInfo(List<AdditionalInfo> additionalInfo) {
    
    this.additionalInfo = additionalInfo;
    return this;
  }

  public LinkProtocolResponse addAdditionalInfoItem(AdditionalInfo additionalInfoItem) {
    if (this.additionalInfo == null) {
      this.additionalInfo = new ArrayList<>();
    }
    this.additionalInfo.add(additionalInfoItem);
    return this;
  }

   /**
   * Get additionalInfo
   * @return additionalInfo
  **/
  @javax.annotation.Nullable

  public List<AdditionalInfo> getAdditionalInfo() {
    return additionalInfo;
  }


  public void setAdditionalInfo(List<AdditionalInfo> additionalInfo) {
    this.additionalInfo = additionalInfo;
  }


  public LinkProtocolResponse connection(LinkProtocolConnection connection) {
    
    this.connection = connection;
    return this;
  }

   /**
   * Get connection
   * @return connection
  **/
  @javax.annotation.Nullable

  public LinkProtocolConnection getConnection() {
    return connection;
  }


  public void setConnection(LinkProtocolConnection connection) {
    this.connection = connection;
  }


  public LinkProtocolResponse serviceToken(LinkProtocolServiceToken serviceToken) {
    
    this.serviceToken = serviceToken;
    return this;
  }

   /**
   * Get serviceToken
   * @return serviceToken
  **/
  @javax.annotation.Nullable

  public LinkProtocolServiceToken getServiceToken() {
    return serviceToken;
  }


  public void setServiceToken(LinkProtocolServiceToken serviceToken) {
    this.serviceToken = serviceToken;
  }


  public LinkProtocolResponse changeLog(Changelog changeLog) {
    
    this.changeLog = changeLog;
    return this;
  }

   /**
   * Get changeLog
   * @return changeLog
  **/
  @javax.annotation.Nullable

  public Changelog getChangeLog() {
    return changeLog;
  }


  public void setChangeLog(Changelog changeLog) {
    this.changeLog = changeLog;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LinkProtocolResponse instance itself
   */
  public LinkProtocolResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinkProtocolResponse linkProtocolResponse = (LinkProtocolResponse) o;
    return Objects.equals(this.uuid, linkProtocolResponse.uuid) &&
        Objects.equals(this.state, linkProtocolResponse.state) &&
        Objects.equals(this.type, linkProtocolResponse.type) &&
        Objects.equals(this.vlanTag, linkProtocolResponse.vlanTag) &&
        Objects.equals(this.vlanTagMin, linkProtocolResponse.vlanTagMin) &&
        Objects.equals(this.vlanTagMax, linkProtocolResponse.vlanTagMax) &&
        Objects.equals(this.vlanSTag, linkProtocolResponse.vlanSTag) &&
        Objects.equals(this.vlanCTag, linkProtocolResponse.vlanCTag) &&
        Objects.equals(this.vlanCTagMin, linkProtocolResponse.vlanCTagMin) &&
        Objects.equals(this.vlanCTagMax, linkProtocolResponse.vlanCTagMax) &&
        Objects.equals(this.subInterface, linkProtocolResponse.subInterface) &&
        Objects.equals(this.additionalInfo, linkProtocolResponse.additionalInfo) &&
        Objects.equals(this.connection, linkProtocolResponse.connection) &&
        Objects.equals(this.serviceToken, linkProtocolResponse.serviceToken) &&
        Objects.equals(this.changeLog, linkProtocolResponse.changeLog)&&
        Objects.equals(this.additionalProperties, linkProtocolResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, state, type, vlanTag, vlanTagMin, vlanTagMax, vlanSTag, vlanCTag, vlanCTagMin, vlanCTagMax, subInterface, additionalInfo, connection, serviceToken, changeLog, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinkProtocolResponse {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vlanTag: ").append(toIndentedString(vlanTag)).append("\n");
    sb.append("    vlanTagMin: ").append(toIndentedString(vlanTagMin)).append("\n");
    sb.append("    vlanTagMax: ").append(toIndentedString(vlanTagMax)).append("\n");
    sb.append("    vlanSTag: ").append(toIndentedString(vlanSTag)).append("\n");
    sb.append("    vlanCTag: ").append(toIndentedString(vlanCTag)).append("\n");
    sb.append("    vlanCTagMin: ").append(toIndentedString(vlanCTagMin)).append("\n");
    sb.append("    vlanCTagMax: ").append(toIndentedString(vlanCTagMax)).append("\n");
    sb.append("    subInterface: ").append(toIndentedString(subInterface)).append("\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
    sb.append("    serviceToken: ").append(toIndentedString(serviceToken)).append("\n");
    sb.append("    changeLog: ").append(toIndentedString(changeLog)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uuid");
    openapiFields.add("state");
    openapiFields.add("type");
    openapiFields.add("vlanTag");
    openapiFields.add("vlanTagMin");
    openapiFields.add("vlanTagMax");
    openapiFields.add("vlanSTag");
    openapiFields.add("vlanCTag");
    openapiFields.add("vlanCTagMin");
    openapiFields.add("vlanCTagMax");
    openapiFields.add("subInterface");
    openapiFields.add("additionalInfo");
    openapiFields.add("connection");
    openapiFields.add("serviceToken");
    openapiFields.add("changeLog");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LinkProtocolResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LinkProtocolResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LinkProtocolResponse is not found in the empty JSON string", LinkProtocolResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      // validate the optional field `subInterface`
      if (jsonObj.get("subInterface") != null && !jsonObj.get("subInterface").isJsonNull()) {
        SubInterface.validateJsonObject(jsonObj.getAsJsonObject("subInterface"));
      }
      if (jsonObj.get("additionalInfo") != null && !jsonObj.get("additionalInfo").isJsonNull()) {
        JsonArray jsonArrayadditionalInfo = jsonObj.getAsJsonArray("additionalInfo");
        if (jsonArrayadditionalInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalInfo` to be an array in the JSON string but got `%s`", jsonObj.get("additionalInfo").toString()));
          }

          // validate the optional field `additionalInfo` (array)
          for (int i = 0; i < jsonArrayadditionalInfo.size(); i++) {
            AdditionalInfo.validateJsonObject(jsonArrayadditionalInfo.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `connection`
      if (jsonObj.get("connection") != null && !jsonObj.get("connection").isJsonNull()) {
        LinkProtocolConnection.validateJsonObject(jsonObj.getAsJsonObject("connection"));
      }
      // validate the optional field `serviceToken`
      if (jsonObj.get("serviceToken") != null && !jsonObj.get("serviceToken").isJsonNull()) {
        LinkProtocolServiceToken.validateJsonObject(jsonObj.getAsJsonObject("serviceToken"));
      }
      // validate the optional field `changeLog`
      if (jsonObj.get("changeLog") != null && !jsonObj.get("changeLog").isJsonNull()) {
        Changelog.validateJsonObject(jsonObj.getAsJsonObject("changeLog"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LinkProtocolResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LinkProtocolResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LinkProtocolResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LinkProtocolResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<LinkProtocolResponse>() {
           @Override
           public void write(JsonWriter out, LinkProtocolResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LinkProtocolResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LinkProtocolResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LinkProtocolResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LinkProtocolResponse
  * @throws IOException if the JSON string is invalid with respect to LinkProtocolResponse
  */
  public static LinkProtocolResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LinkProtocolResponse.class);
  }

 /**
  * Convert an instance of LinkProtocolResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

