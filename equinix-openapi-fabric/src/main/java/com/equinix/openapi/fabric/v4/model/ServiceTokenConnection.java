/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import com.fasterxml.jackson.annotation.*;

import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

/**
 * Service Token Connection Type Information
 */
@JsonPropertyOrder({
  ServiceTokenConnection.JSON_PROPERTY_TYPE,
  ServiceTokenConnection.JSON_PROPERTY_HREF,
  ServiceTokenConnection.JSON_PROPERTY_UUID,
  ServiceTokenConnection.JSON_PROPERTY_ALLOW_REMOTE_CONNECTION,
  ServiceTokenConnection.JSON_PROPERTY_BANDWIDTH_LIMIT,
  ServiceTokenConnection.JSON_PROPERTY_SUPPORTED_BANDWIDTHS,
  ServiceTokenConnection.JSON_PROPERTY_A_SIDE,
  ServiceTokenConnection.JSON_PROPERTY_Z_SIDE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ServiceTokenConnection {
  /**
   * Type of Connection
   */
  public enum TypeEnum {
    EVPL_VC("EVPL_VC");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_HREF = "href";
  private URI href;

  public static final String JSON_PROPERTY_UUID = "uuid";
  private UUID uuid;

  public static final String JSON_PROPERTY_ALLOW_REMOTE_CONNECTION = "allowRemoteConnection";
  private Boolean allowRemoteConnection = false;

  public static final String JSON_PROPERTY_BANDWIDTH_LIMIT = "bandwidthLimit";
  private Integer bandwidthLimit;

  public static final String JSON_PROPERTY_SUPPORTED_BANDWIDTHS = "supportedBandwidths";
  private List<Integer> supportedBandwidths = new ArrayList<>();

  public static final String JSON_PROPERTY_A_SIDE = "aSide";
  private ServiceTokenSide aSide;

  public static final String JSON_PROPERTY_Z_SIDE = "zSide";
  private ServiceTokenSide zSide;

  public ServiceTokenConnection() {
  }

  @JsonCreator
  public ServiceTokenConnection(
    @JsonProperty(JSON_PROPERTY_HREF) URI href
  ) {
    this();
    this.href = href;
  }

  public ServiceTokenConnection type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of Connection
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


   /**
   * An absolute URL that is the subject of the link&#39;s context.
   * @return href
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getHref() {
    return href;
  }




  public ServiceTokenConnection uuid(UUID uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Equinix-assigned connection identifier
   * @return uuid
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getUuid() {
    return uuid;
  }


  @JsonProperty(JSON_PROPERTY_UUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }


  public ServiceTokenConnection allowRemoteConnection(Boolean allowRemoteConnection) {
    
    this.allowRemoteConnection = allowRemoteConnection;
    return this;
  }

   /**
   * Authorization to connect remotely
   * @return allowRemoteConnection
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_REMOTE_CONNECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAllowRemoteConnection() {
    return allowRemoteConnection;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_REMOTE_CONNECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowRemoteConnection(Boolean allowRemoteConnection) {
    this.allowRemoteConnection = allowRemoteConnection;
  }


  public ServiceTokenConnection bandwidthLimit(Integer bandwidthLimit) {
    
    this.bandwidthLimit = bandwidthLimit;
    return this;
  }

   /**
   * Connection bandwidth limit in Mbps
   * minimum: 0
   * maximum: 100000
   * @return bandwidthLimit
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BANDWIDTH_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getBandwidthLimit() {
    return bandwidthLimit;
  }


  @JsonProperty(JSON_PROPERTY_BANDWIDTH_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBandwidthLimit(Integer bandwidthLimit) {
    this.bandwidthLimit = bandwidthLimit;
  }


  public ServiceTokenConnection supportedBandwidths(List<Integer> supportedBandwidths) {
    
    this.supportedBandwidths = supportedBandwidths;
    return this;
  }

  public ServiceTokenConnection addSupportedBandwidthsItem(Integer supportedBandwidthsItem) {
    if (this.supportedBandwidths == null) {
      this.supportedBandwidths = new ArrayList<>();
    }
    this.supportedBandwidths.add(supportedBandwidthsItem);
    return this;
  }

   /**
   * List of permitted bandwidths.
   * @return supportedBandwidths
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUPPORTED_BANDWIDTHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Integer> getSupportedBandwidths() {
    return supportedBandwidths;
  }


  @JsonProperty(JSON_PROPERTY_SUPPORTED_BANDWIDTHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSupportedBandwidths(List<Integer> supportedBandwidths) {
    this.supportedBandwidths = supportedBandwidths;
  }


  public ServiceTokenConnection aSide(ServiceTokenSide aSide) {
    
    this.aSide = aSide;
    return this;
  }

   /**
   * Get aSide
   * @return aSide
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_A_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ServiceTokenSide getaSide() {
    return aSide;
  }


  @JsonProperty(JSON_PROPERTY_A_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setaSide(ServiceTokenSide aSide) {
    this.aSide = aSide;
  }


  public ServiceTokenConnection zSide(ServiceTokenSide zSide) {
    
    this.zSide = zSide;
    return this;
  }

   /**
   * Get zSide
   * @return zSide
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_Z_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ServiceTokenSide getzSide() {
    return zSide;
  }


  @JsonProperty(JSON_PROPERTY_Z_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setzSide(ServiceTokenSide zSide) {
    this.zSide = zSide;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceTokenConnection serviceTokenConnection = (ServiceTokenConnection) o;
    return Objects.equals(this.type, serviceTokenConnection.type) &&
        Objects.equals(this.href, serviceTokenConnection.href) &&
        Objects.equals(this.uuid, serviceTokenConnection.uuid) &&
        Objects.equals(this.allowRemoteConnection, serviceTokenConnection.allowRemoteConnection) &&
        Objects.equals(this.bandwidthLimit, serviceTokenConnection.bandwidthLimit) &&
        Objects.equals(this.supportedBandwidths, serviceTokenConnection.supportedBandwidths) &&
        Objects.equals(this.aSide, serviceTokenConnection.aSide) &&
        Objects.equals(this.zSide, serviceTokenConnection.zSide);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, href, uuid, allowRemoteConnection, bandwidthLimit, supportedBandwidths, aSide, zSide);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceTokenConnection {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    allowRemoteConnection: ").append(toIndentedString(allowRemoteConnection)).append("\n");
    sb.append("    bandwidthLimit: ").append(toIndentedString(bandwidthLimit)).append("\n");
    sb.append("    supportedBandwidths: ").append(toIndentedString(supportedBandwidths)).append("\n");
    sb.append("    aSide: ").append(toIndentedString(aSide)).append("\n");
    sb.append("    zSide: ").append(toIndentedString(zSide)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

