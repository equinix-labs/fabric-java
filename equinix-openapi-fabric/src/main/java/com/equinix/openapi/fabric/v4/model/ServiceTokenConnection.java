/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import com.equinix.openapi.fabric.JSON;
import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.net.URI;
import java.util.*;

/**
 * Service Token Connection Type Information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ServiceTokenConnection {
  /**
   * Type of Connection
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    EVPL_VC("EVPL_VC");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UUID uuid;

  public static final String SERIALIZED_NAME_ALLOW_REMOTE_CONNECTION = "allowRemoteConnection";
  @SerializedName(SERIALIZED_NAME_ALLOW_REMOTE_CONNECTION)
  private Boolean allowRemoteConnection = false;

  public static final String SERIALIZED_NAME_BANDWIDTH_LIMIT = "bandwidthLimit";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_LIMIT)
  private Integer bandwidthLimit;

  public static final String SERIALIZED_NAME_SUPPORTED_BANDWIDTHS = "supportedBandwidths";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_BANDWIDTHS)
  private List<Integer> supportedBandwidths = new ArrayList<>();

  public static final String SERIALIZED_NAME_A_SIDE = "aSide";
  @SerializedName(SERIALIZED_NAME_A_SIDE)
  private ServiceTokenSide aSide;

  public static final String SERIALIZED_NAME_Z_SIDE = "zSide";
  @SerializedName(SERIALIZED_NAME_Z_SIDE)
  private ServiceTokenSide zSide;

  public ServiceTokenConnection() {
  }

  
  public ServiceTokenConnection(
     URI href
  ) {
    this();
    this.href = href;
  }

  public ServiceTokenConnection type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of Connection
   * @return type
  **/
  @javax.annotation.Nonnull

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


   /**
   * An absolute URL that is the subject of the link&#39;s context.
   * @return href
  **/
  @javax.annotation.Nullable

  public URI getHref() {
    return href;
  }




  public ServiceTokenConnection uuid(UUID uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Equinix-assigned connection identifier
   * @return uuid
  **/
  @javax.annotation.Nullable

  public UUID getUuid() {
    return uuid;
  }


  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }


  public ServiceTokenConnection allowRemoteConnection(Boolean allowRemoteConnection) {
    
    this.allowRemoteConnection = allowRemoteConnection;
    return this;
  }

   /**
   * Authorization to connect remotely
   * @return allowRemoteConnection
  **/
  @javax.annotation.Nullable

  public Boolean getAllowRemoteConnection() {
    return allowRemoteConnection;
  }


  public void setAllowRemoteConnection(Boolean allowRemoteConnection) {
    this.allowRemoteConnection = allowRemoteConnection;
  }


  public ServiceTokenConnection bandwidthLimit(Integer bandwidthLimit) {
    
    this.bandwidthLimit = bandwidthLimit;
    return this;
  }

   /**
   * Connection bandwidth limit in Mbps
   * minimum: 0
   * maximum: 100000
   * @return bandwidthLimit
  **/
  @javax.annotation.Nullable

  public Integer getBandwidthLimit() {
    return bandwidthLimit;
  }


  public void setBandwidthLimit(Integer bandwidthLimit) {
    this.bandwidthLimit = bandwidthLimit;
  }


  public ServiceTokenConnection supportedBandwidths(List<Integer> supportedBandwidths) {
    
    this.supportedBandwidths = supportedBandwidths;
    return this;
  }

  public ServiceTokenConnection addSupportedBandwidthsItem(Integer supportedBandwidthsItem) {
    if (this.supportedBandwidths == null) {
      this.supportedBandwidths = new ArrayList<>();
    }
    this.supportedBandwidths.add(supportedBandwidthsItem);
    return this;
  }

   /**
   * List of permitted bandwidths.
   * @return supportedBandwidths
  **/
  @javax.annotation.Nullable

  public List<Integer> getSupportedBandwidths() {
    return supportedBandwidths;
  }


  public void setSupportedBandwidths(List<Integer> supportedBandwidths) {
    this.supportedBandwidths = supportedBandwidths;
  }


  public ServiceTokenConnection aSide(ServiceTokenSide aSide) {
    
    this.aSide = aSide;
    return this;
  }

   /**
   * Get aSide
   * @return aSide
  **/
  @javax.annotation.Nullable

  public ServiceTokenSide getaSide() {
    return aSide;
  }


  public void setaSide(ServiceTokenSide aSide) {
    this.aSide = aSide;
  }


  public ServiceTokenConnection zSide(ServiceTokenSide zSide) {
    
    this.zSide = zSide;
    return this;
  }

   /**
   * Get zSide
   * @return zSide
  **/
  @javax.annotation.Nullable

  public ServiceTokenSide getzSide() {
    return zSide;
  }


  public void setzSide(ServiceTokenSide zSide) {
    this.zSide = zSide;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ServiceTokenConnection instance itself
   */
  public ServiceTokenConnection putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceTokenConnection serviceTokenConnection = (ServiceTokenConnection) o;
    return Objects.equals(this.type, serviceTokenConnection.type) &&
        Objects.equals(this.href, serviceTokenConnection.href) &&
        Objects.equals(this.uuid, serviceTokenConnection.uuid) &&
        Objects.equals(this.allowRemoteConnection, serviceTokenConnection.allowRemoteConnection) &&
        Objects.equals(this.bandwidthLimit, serviceTokenConnection.bandwidthLimit) &&
        Objects.equals(this.supportedBandwidths, serviceTokenConnection.supportedBandwidths) &&
        Objects.equals(this.aSide, serviceTokenConnection.aSide) &&
        Objects.equals(this.zSide, serviceTokenConnection.zSide)&&
        Objects.equals(this.additionalProperties, serviceTokenConnection.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, href, uuid, allowRemoteConnection, bandwidthLimit, supportedBandwidths, aSide, zSide, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceTokenConnection {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    allowRemoteConnection: ").append(toIndentedString(allowRemoteConnection)).append("\n");
    sb.append("    bandwidthLimit: ").append(toIndentedString(bandwidthLimit)).append("\n");
    sb.append("    supportedBandwidths: ").append(toIndentedString(supportedBandwidths)).append("\n");
    sb.append("    aSide: ").append(toIndentedString(aSide)).append("\n");
    sb.append("    zSide: ").append(toIndentedString(zSide)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("href");
    openapiFields.add("uuid");
    openapiFields.add("allowRemoteConnection");
    openapiFields.add("bandwidthLimit");
    openapiFields.add("supportedBandwidths");
    openapiFields.add("aSide");
    openapiFields.add("zSide");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ServiceTokenConnection
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ServiceTokenConnection.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceTokenConnection is not found in the empty JSON string", ServiceTokenConnection.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServiceTokenConnection.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedBandwidths") != null && !jsonObj.get("supportedBandwidths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedBandwidths` to be an array in the JSON string but got `%s`", jsonObj.get("supportedBandwidths").toString()));
      }
      // validate the optional field `aSide`
      if (jsonObj.get("aSide") != null && !jsonObj.get("aSide").isJsonNull()) {
        ServiceTokenSide.validateJsonObject(jsonObj.getAsJsonObject("aSide"));
      }
      // validate the optional field `zSide`
      if (jsonObj.get("zSide") != null && !jsonObj.get("zSide").isJsonNull()) {
        ServiceTokenSide.validateJsonObject(jsonObj.getAsJsonObject("zSide"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceTokenConnection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceTokenConnection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceTokenConnection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceTokenConnection.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceTokenConnection>() {
           @Override
           public void write(JsonWriter out, ServiceTokenConnection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceTokenConnection read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ServiceTokenConnection instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ServiceTokenConnection given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ServiceTokenConnection
  * @throws IOException if the JSON string is invalid with respect to ServiceTokenConnection
  */
  public static ServiceTokenConnection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceTokenConnection.class);
  }

 /**
  * Convert an instance of ServiceTokenConnection to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

