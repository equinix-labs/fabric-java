/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import java.util.Objects;
import java.util.Arrays;
import com.equinix.openapi.fabric.v4.model.ResourceSelector;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.equinix.openapi.fabric.JSON;

/**
 * Create Stream Alert Rules
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AlertRulePutRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled = true;

  /**
   * Stream alert rule metric name
   */
  @JsonAdapter(MetricNameEnum.Adapter.class)
  public enum MetricNameEnum {
    CONNECTION_BANDWIDTH_TX_USAGE("equinix.fabric.connection.bandwidth_tx.usage"),
    
    CONNECTION_BANDWIDTH_RX_USAGE("equinix.fabric.connection.bandwidth_rx.usage"),
    
    PORT_BANDWIDTH_TX_USAGE("equinix.fabric.port.bandwidth_tx.usage"),
    
    PORT_BANDWIDTH_RX_USAGE("equinix.fabric.port.bandwidth_rx.usage"),
    
    PORT_PACKETS_ERRED_TX_COUNT("equinix.fabric.port.packets_erred_tx.count"),
    
    PORT_PACKETS_ERRED_RX_COUNT("equinix.fabric.port.packets_erred_rx.count"),
    
    PORT_PACKETS_DROPPED_TX_COUNT("equinix.fabric.port.packets_dropped_tx.count"),
    
    PORT_PACKETS_DROPPED_RX_COUNT("equinix.fabric.port.packets_dropped_rx.count"),
    
    METRO_SOURCE_METRO_CODE___DESTINATION_METRO_CODE_LATENCY("equinix.fabric.metro.<source_metro_code>_<destination_metro_code>.latency");

    private String value;

    MetricNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetricNameEnum fromValue(String value) {
      for (MetricNameEnum b : MetricNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MetricNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetricNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetricNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MetricNameEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_METRIC_NAME = "metricName";
  @SerializedName(SERIALIZED_NAME_METRIC_NAME)
  private MetricNameEnum metricName;

  public static final String SERIALIZED_NAME_RESOURCE_SELECTOR = "resourceSelector";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SELECTOR)
  private ResourceSelector resourceSelector;

  /**
   * Stream alert rule metric operand
   */
  @JsonAdapter(OperandEnum.Adapter.class)
  public enum OperandEnum {
    ABOVE("ABOVE"),
    
    BELOW("BELOW");

    private String value;

    OperandEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperandEnum fromValue(String value) {
      for (OperandEnum b : OperandEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperandEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperandEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperandEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperandEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPERAND = "operand";
  @SerializedName(SERIALIZED_NAME_OPERAND)
  private OperandEnum operand;

  public static final String SERIALIZED_NAME_WINDOW_SIZE = "windowSize";
  @SerializedName(SERIALIZED_NAME_WINDOW_SIZE)
  private String windowSize;

  public static final String SERIALIZED_NAME_WARNING_THRESHOLD = "warningThreshold";
  @SerializedName(SERIALIZED_NAME_WARNING_THRESHOLD)
  private String warningThreshold;

  public static final String SERIALIZED_NAME_CRITICAL_THRESHOLD = "criticalThreshold";
  @SerializedName(SERIALIZED_NAME_CRITICAL_THRESHOLD)
  private String criticalThreshold;

  public AlertRulePutRequest() {
  }

  public AlertRulePutRequest name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Customer-provided stream name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public AlertRulePutRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Customer-provided stream description
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public AlertRulePutRequest enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Stream alert rule enabled status
   * @return enabled
  **/
  @javax.annotation.Nullable

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public AlertRulePutRequest metricName(MetricNameEnum metricName) {
    
    this.metricName = metricName;
    return this;
  }

   /**
   * Stream alert rule metric name
   * @return metricName
  **/
  @javax.annotation.Nullable

  public MetricNameEnum getMetricName() {
    return metricName;
  }


  public void setMetricName(MetricNameEnum metricName) {
    this.metricName = metricName;
  }


  public AlertRulePutRequest resourceSelector(ResourceSelector resourceSelector) {
    
    this.resourceSelector = resourceSelector;
    return this;
  }

   /**
   * Get resourceSelector
   * @return resourceSelector
  **/
  @javax.annotation.Nullable

  public ResourceSelector getResourceSelector() {
    return resourceSelector;
  }


  public void setResourceSelector(ResourceSelector resourceSelector) {
    this.resourceSelector = resourceSelector;
  }


  public AlertRulePutRequest operand(OperandEnum operand) {
    
    this.operand = operand;
    return this;
  }

   /**
   * Stream alert rule metric operand
   * @return operand
  **/
  @javax.annotation.Nullable

  public OperandEnum getOperand() {
    return operand;
  }


  public void setOperand(OperandEnum operand) {
    this.operand = operand;
  }


  public AlertRulePutRequest windowSize(String windowSize) {
    
    this.windowSize = windowSize;
    return this;
  }

   /**
   * Stream alert rule metric window size
   * @return windowSize
  **/
  @javax.annotation.Nullable

  public String getWindowSize() {
    return windowSize;
  }


  public void setWindowSize(String windowSize) {
    this.windowSize = windowSize;
  }


  public AlertRulePutRequest warningThreshold(String warningThreshold) {
    
    this.warningThreshold = warningThreshold;
    return this;
  }

   /**
   * Stream alert rule metric warning threshold
   * @return warningThreshold
  **/
  @javax.annotation.Nullable

  public String getWarningThreshold() {
    return warningThreshold;
  }


  public void setWarningThreshold(String warningThreshold) {
    this.warningThreshold = warningThreshold;
  }


  public AlertRulePutRequest criticalThreshold(String criticalThreshold) {
    
    this.criticalThreshold = criticalThreshold;
    return this;
  }

   /**
   * Stream alert rule metric critical threshold
   * @return criticalThreshold
  **/
  @javax.annotation.Nullable

  public String getCriticalThreshold() {
    return criticalThreshold;
  }


  public void setCriticalThreshold(String criticalThreshold) {
    this.criticalThreshold = criticalThreshold;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AlertRulePutRequest instance itself
   */
  public AlertRulePutRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertRulePutRequest alertRulePutRequest = (AlertRulePutRequest) o;
    return Objects.equals(this.name, alertRulePutRequest.name) &&
        Objects.equals(this.description, alertRulePutRequest.description) &&
        Objects.equals(this.enabled, alertRulePutRequest.enabled) &&
        Objects.equals(this.metricName, alertRulePutRequest.metricName) &&
        Objects.equals(this.resourceSelector, alertRulePutRequest.resourceSelector) &&
        Objects.equals(this.operand, alertRulePutRequest.operand) &&
        Objects.equals(this.windowSize, alertRulePutRequest.windowSize) &&
        Objects.equals(this.warningThreshold, alertRulePutRequest.warningThreshold) &&
        Objects.equals(this.criticalThreshold, alertRulePutRequest.criticalThreshold)&&
        Objects.equals(this.additionalProperties, alertRulePutRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, enabled, metricName, resourceSelector, operand, windowSize, warningThreshold, criticalThreshold, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertRulePutRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    metricName: ").append(toIndentedString(metricName)).append("\n");
    sb.append("    resourceSelector: ").append(toIndentedString(resourceSelector)).append("\n");
    sb.append("    operand: ").append(toIndentedString(operand)).append("\n");
    sb.append("    windowSize: ").append(toIndentedString(windowSize)).append("\n");
    sb.append("    warningThreshold: ").append(toIndentedString(warningThreshold)).append("\n");
    sb.append("    criticalThreshold: ").append(toIndentedString(criticalThreshold)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("enabled");
    openapiFields.add("metricName");
    openapiFields.add("resourceSelector");
    openapiFields.add("operand");
    openapiFields.add("windowSize");
    openapiFields.add("warningThreshold");
    openapiFields.add("criticalThreshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AlertRulePutRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AlertRulePutRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertRulePutRequest is not found in the empty JSON string", AlertRulePutRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("metricName") != null && !jsonObj.get("metricName").isJsonNull()) && !jsonObj.get("metricName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metricName").toString()));
      }
      // validate the optional field `resourceSelector`
      if (jsonObj.get("resourceSelector") != null && !jsonObj.get("resourceSelector").isJsonNull()) {
        ResourceSelector.validateJsonObject(jsonObj.getAsJsonObject("resourceSelector"));
      }
      if ((jsonObj.get("operand") != null && !jsonObj.get("operand").isJsonNull()) && !jsonObj.get("operand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operand").toString()));
      }
      if ((jsonObj.get("windowSize") != null && !jsonObj.get("windowSize").isJsonNull()) && !jsonObj.get("windowSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `windowSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("windowSize").toString()));
      }
      if ((jsonObj.get("warningThreshold") != null && !jsonObj.get("warningThreshold").isJsonNull()) && !jsonObj.get("warningThreshold").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warningThreshold` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warningThreshold").toString()));
      }
      if ((jsonObj.get("criticalThreshold") != null && !jsonObj.get("criticalThreshold").isJsonNull()) && !jsonObj.get("criticalThreshold").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `criticalThreshold` to be a primitive type in the JSON string but got `%s`", jsonObj.get("criticalThreshold").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertRulePutRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertRulePutRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertRulePutRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertRulePutRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertRulePutRequest>() {
           @Override
           public void write(JsonWriter out, AlertRulePutRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertRulePutRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AlertRulePutRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AlertRulePutRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AlertRulePutRequest
  * @throws IOException if the JSON string is invalid with respect to AlertRulePutRequest
  */
  public static AlertRulePutRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertRulePutRequest.class);
  }

 /**
  * Convert an instance of AlertRulePutRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

