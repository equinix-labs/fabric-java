/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.util.Objects;

/**
 * BGPConnectionIpv6
 */
@JsonPropertyOrder({
  BGPConnectionIpv6.JSON_PROPERTY_CUSTOMER_PEER_IP,
  BGPConnectionIpv6.JSON_PROPERTY_EQUINIX_PEER_IP,
  BGPConnectionIpv6.JSON_PROPERTY_ENABLED,
  BGPConnectionIpv6.JSON_PROPERTY_OUTBOUND_A_S_PREPEND_COUNT,
  BGPConnectionIpv6.JSON_PROPERTY_OPERATION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BGPConnectionIpv6 {
  public static final String JSON_PROPERTY_CUSTOMER_PEER_IP = "customerPeerIp";
  private String customerPeerIp;

  public static final String JSON_PROPERTY_EQUINIX_PEER_IP = "equinixPeerIp";
  private String equinixPeerIp;

  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled;

  public static final String JSON_PROPERTY_OUTBOUND_A_S_PREPEND_COUNT = "outboundASPrependCount";
  private Long outboundASPrependCount;

  public static final String JSON_PROPERTY_OPERATION = "operation";
  private BGPConnectionOperation operation;

  public BGPConnectionIpv6() {
  }

  public BGPConnectionIpv6 customerPeerIp(String customerPeerIp) {
    
    this.customerPeerIp = customerPeerIp;
    return this;
  }

   /**
   * Customer side peering ip
   * @return customerPeerIp
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CUSTOMER_PEER_IP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCustomerPeerIp() {
    return customerPeerIp;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOMER_PEER_IP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCustomerPeerIp(String customerPeerIp) {
    this.customerPeerIp = customerPeerIp;
  }


  public BGPConnectionIpv6 equinixPeerIp(String equinixPeerIp) {
    
    this.equinixPeerIp = equinixPeerIp;
    return this;
  }

   /**
   * Equinix side peering ip
   * @return equinixPeerIp
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EQUINIX_PEER_IP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEquinixPeerIp() {
    return equinixPeerIp;
  }


  @JsonProperty(JSON_PROPERTY_EQUINIX_PEER_IP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEquinixPeerIp(String equinixPeerIp) {
    this.equinixPeerIp = equinixPeerIp;
  }


  public BGPConnectionIpv6 enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Admin status for the BGP session
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getEnabled() {
    return enabled;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public BGPConnectionIpv6 outboundASPrependCount(Long outboundASPrependCount) {
    
    this.outboundASPrependCount = outboundASPrependCount;
    return this;
  }

   /**
   * AS path prepend count
   * @return outboundASPrependCount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTBOUND_A_S_PREPEND_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getOutboundASPrependCount() {
    return outboundASPrependCount;
  }


  @JsonProperty(JSON_PROPERTY_OUTBOUND_A_S_PREPEND_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutboundASPrependCount(Long outboundASPrependCount) {
    this.outboundASPrependCount = outboundASPrependCount;
  }


  public BGPConnectionIpv6 operation(BGPConnectionOperation operation) {
    
    this.operation = operation;
    return this;
  }

   /**
   * Get operation
   * @return operation
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BGPConnectionOperation getOperation() {
    return operation;
  }


  @JsonProperty(JSON_PROPERTY_OPERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperation(BGPConnectionOperation operation) {
    this.operation = operation;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BGPConnectionIpv6 bgPConnectionIpv6 = (BGPConnectionIpv6) o;
    return Objects.equals(this.customerPeerIp, bgPConnectionIpv6.customerPeerIp) &&
        Objects.equals(this.equinixPeerIp, bgPConnectionIpv6.equinixPeerIp) &&
        Objects.equals(this.enabled, bgPConnectionIpv6.enabled) &&
        Objects.equals(this.outboundASPrependCount, bgPConnectionIpv6.outboundASPrependCount) &&
        Objects.equals(this.operation, bgPConnectionIpv6.operation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerPeerIp, equinixPeerIp, enabled, outboundASPrependCount, operation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BGPConnectionIpv6 {\n");
    sb.append("    customerPeerIp: ").append(toIndentedString(customerPeerIp)).append("\n");
    sb.append("    equinixPeerIp: ").append(toIndentedString(equinixPeerIp)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    outboundASPrependCount: ").append(toIndentedString(outboundASPrependCount)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

