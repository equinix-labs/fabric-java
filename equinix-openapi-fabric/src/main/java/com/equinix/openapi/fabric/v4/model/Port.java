/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import java.util.Objects;
import java.util.Arrays;
import com.equinix.openapi.fabric.v4.model.Changelog;
import com.equinix.openapi.fabric.v4.model.PhysicalPort;
import com.equinix.openapi.fabric.v4.model.PortAdditionalInfo;
import com.equinix.openapi.fabric.v4.model.PortDemarcationPoint;
import com.equinix.openapi.fabric.v4.model.PortDevice;
import com.equinix.openapi.fabric.v4.model.PortEncapsulation;
import com.equinix.openapi.fabric.v4.model.PortInterface;
import com.equinix.openapi.fabric.v4.model.PortLag;
import com.equinix.openapi.fabric.v4.model.PortLoa;
import com.equinix.openapi.fabric.v4.model.PortNotification;
import com.equinix.openapi.fabric.v4.model.PortOperation;
import com.equinix.openapi.fabric.v4.model.PortOrder;
import com.equinix.openapi.fabric.v4.model.PortRedundancy;
import com.equinix.openapi.fabric.v4.model.PortSettings;
import com.equinix.openapi.fabric.v4.model.PortState;
import com.equinix.openapi.fabric.v4.model.PortType;
import com.equinix.openapi.fabric.v4.model.Project;
import com.equinix.openapi.fabric.v4.model.SimplifiedAccount;
import com.equinix.openapi.fabric.v4.model.SimplifiedLocation;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.equinix.openapi.fabric.JSON;

/**
 * Port specification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Port {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private PortType type;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UUID uuid;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PHYSICAL_PORTS_SPEED = "physicalPortsSpeed";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_PORTS_SPEED)
  private Integer physicalPortsSpeed;

  public static final String SERIALIZED_NAME_CONNECTIONS_COUNT = "connectionsCount";
  @SerializedName(SERIALIZED_NAME_CONNECTIONS_COUNT)
  private Integer connectionsCount;

  /**
   * Physical Ports Type
   */
  @JsonAdapter(PhysicalPortsTypeEnum.Adapter.class)
  public enum PhysicalPortsTypeEnum {
    _1000BASE_LX("1000BASE_LX"),
    
    _10GBASE_LR("10GBASE_LR"),
    
    _100GBASE_LR4("100GBASE_LR4"),
    
    _10GBASE_ER("10GBASE_ER"),
    
    _1000BASE_SX("1000BASE_SX");

    private String value;

    PhysicalPortsTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhysicalPortsTypeEnum fromValue(String value) {
      for (PhysicalPortsTypeEnum b : PhysicalPortsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhysicalPortsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhysicalPortsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhysicalPortsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhysicalPortsTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PHYSICAL_PORTS_TYPE = "physicalPortsType";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_PORTS_TYPE)
  private PhysicalPortsTypeEnum physicalPortsType;

  public static final String SERIALIZED_NAME_PHYSICAL_PORTS_COUNT = "physicalPortsCount";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_PORTS_COUNT)
  private Integer physicalPortsCount;

  /**
   * Port connectivity type
   */
  @JsonAdapter(ConnectivitySourceTypeEnum.Adapter.class)
  public enum ConnectivitySourceTypeEnum {
    COLO("COLO"),
    
    BMMR("BMMR"),
    
    REMOTE("REMOTE");

    private String value;

    ConnectivitySourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectivitySourceTypeEnum fromValue(String value) {
      for (ConnectivitySourceTypeEnum b : ConnectivitySourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectivitySourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectivitySourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectivitySourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectivitySourceTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONNECTIVITY_SOURCE_TYPE = "connectivitySourceType";
  @SerializedName(SERIALIZED_NAME_CONNECTIVITY_SOURCE_TYPE)
  private ConnectivitySourceTypeEnum connectivitySourceType;

  /**
   * Gets or Sets bmmrType
   */
  @JsonAdapter(BmmrTypeEnum.Adapter.class)
  public enum BmmrTypeEnum {
    SELF("SELF"),
    
    EQUINIX("EQUINIX");

    private String value;

    BmmrTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BmmrTypeEnum fromValue(String value) {
      for (BmmrTypeEnum b : BmmrTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BmmrTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BmmrTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BmmrTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BmmrTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BMMR_TYPE = "bmmrType";
  @SerializedName(SERIALIZED_NAME_BMMR_TYPE)
  private BmmrTypeEnum bmmrType;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private Project project;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private PortState state;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private PortOrder order;

  public static final String SERIALIZED_NAME_CVP_ID = "cvpId";
  @SerializedName(SERIALIZED_NAME_CVP_ID)
  private String cvpId;

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private PortOperation operation;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private SimplifiedAccount account;

  public static final String SERIALIZED_NAME_CHANGELOG = "changelog";
  @SerializedName(SERIALIZED_NAME_CHANGELOG)
  private Changelog changelog;

  /**
   * Port service Type
   */
  @JsonAdapter(ServiceTypeEnum.Adapter.class)
  public enum ServiceTypeEnum {
    EPL("EPL"),
    
    MSP("MSP");

    private String value;

    ServiceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceTypeEnum fromValue(String value) {
      for (ServiceTypeEnum b : ServiceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServiceTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SERVICE_TYPE = "serviceType";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE)
  private ServiceTypeEnum serviceType;

  public static final String SERIALIZED_NAME_BANDWIDTH = "bandwidth";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH)
  private Integer bandwidth;

  public static final String SERIALIZED_NAME_AVAILABLE_BANDWIDTH = "availableBandwidth";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_BANDWIDTH)
  private Integer availableBandwidth;

  public static final String SERIALIZED_NAME_USED_BANDWIDTH = "usedBandwidth";
  @SerializedName(SERIALIZED_NAME_USED_BANDWIDTH)
  private Integer usedBandwidth;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private SimplifiedLocation location;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private PortDevice device;

  public static final String SERIALIZED_NAME_INTERFACE = "interface";
  @SerializedName(SERIALIZED_NAME_INTERFACE)
  private PortInterface _interface;

  public static final String SERIALIZED_NAME_DEMARCATION_POINT_IBX = "demarcationPointIbx";
  @SerializedName(SERIALIZED_NAME_DEMARCATION_POINT_IBX)
  private String demarcationPointIbx;

  public static final String SERIALIZED_NAME_TETHER_IBX = "tetherIbx";
  @SerializedName(SERIALIZED_NAME_TETHER_IBX)
  private String tetherIbx;

  public static final String SERIALIZED_NAME_DEMARCATION_POINT = "demarcationPoint";
  @SerializedName(SERIALIZED_NAME_DEMARCATION_POINT)
  private PortDemarcationPoint demarcationPoint;

  public static final String SERIALIZED_NAME_REDUNDANCY = "redundancy";
  @SerializedName(SERIALIZED_NAME_REDUNDANCY)
  private PortRedundancy redundancy;

  public static final String SERIALIZED_NAME_ENCAPSULATION = "encapsulation";
  @SerializedName(SERIALIZED_NAME_ENCAPSULATION)
  private PortEncapsulation encapsulation;

  public static final String SERIALIZED_NAME_LAG_ENABLED = "lagEnabled";
  @SerializedName(SERIALIZED_NAME_LAG_ENABLED)
  private Boolean lagEnabled;

  public static final String SERIALIZED_NAME_LAG = "lag";
  @SerializedName(SERIALIZED_NAME_LAG)
  private PortLag lag;

  public static final String SERIALIZED_NAME_ASN = "asn";
  @SerializedName(SERIALIZED_NAME_ASN)
  private Integer asn;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private PortSettings settings;

  public static final String SERIALIZED_NAME_PHYSICAL_PORT_QUANTITY = "physicalPortQuantity";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_PORT_QUANTITY)
  private Integer physicalPortQuantity;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private List<PortNotification> notifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_INFO = "additionalInfo";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFO)
  private List<PortAdditionalInfo> additionalInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHYSICAL_PORTS = "physicalPorts";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_PORTS)
  private List<PhysicalPort> physicalPorts = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOAS = "loas";
  @SerializedName(SERIALIZED_NAME_LOAS)
  private List<PortLoa> loas = new ArrayList<>();

  public Port() {
  }

  
  public Port(
     URI href
  ) {
    this();
    this.href = href;
  }

  public Port type(PortType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull

  public PortType getType() {
    return type;
  }


  public void setType(PortType type) {
    this.type = type;
  }


  public Port id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Equinix assigned response attribute for Port Id
   * @return id
  **/
  @javax.annotation.Nullable

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


   /**
   * Equinix assigned response attribute for an absolute URL that is the subject of the link&#39;s context.
   * @return href
  **/
  @javax.annotation.Nullable

  public URI getHref() {
    return href;
  }




  public Port uuid(UUID uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Equinix assigned response attribute for  port identifier
   * @return uuid
  **/
  @javax.annotation.Nullable

  public UUID getUuid() {
    return uuid;
  }


  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }


  public Port name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Equinix assigned response attribute for Port name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Port description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Equinix assigned response attribute for Port description
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Port physicalPortsSpeed(Integer physicalPortsSpeed) {
    
    this.physicalPortsSpeed = physicalPortsSpeed;
    return this;
  }

   /**
   * Physical Ports Speed in Mbps
   * minimum: 0
   * @return physicalPortsSpeed
  **/
  @javax.annotation.Nonnull

  public Integer getPhysicalPortsSpeed() {
    return physicalPortsSpeed;
  }


  public void setPhysicalPortsSpeed(Integer physicalPortsSpeed) {
    this.physicalPortsSpeed = physicalPortsSpeed;
  }


  public Port connectionsCount(Integer connectionsCount) {
    
    this.connectionsCount = connectionsCount;
    return this;
  }

   /**
   * Equinix assigned response attribute for Connection count
   * minimum: 0
   * @return connectionsCount
  **/
  @javax.annotation.Nullable

  public Integer getConnectionsCount() {
    return connectionsCount;
  }


  public void setConnectionsCount(Integer connectionsCount) {
    this.connectionsCount = connectionsCount;
  }


  public Port physicalPortsType(PhysicalPortsTypeEnum physicalPortsType) {
    
    this.physicalPortsType = physicalPortsType;
    return this;
  }

   /**
   * Physical Ports Type
   * @return physicalPortsType
  **/
  @javax.annotation.Nonnull

  public PhysicalPortsTypeEnum getPhysicalPortsType() {
    return physicalPortsType;
  }


  public void setPhysicalPortsType(PhysicalPortsTypeEnum physicalPortsType) {
    this.physicalPortsType = physicalPortsType;
  }


  public Port physicalPortsCount(Integer physicalPortsCount) {
    
    this.physicalPortsCount = physicalPortsCount;
    return this;
  }

   /**
   * Get physicalPortsCount
   * @return physicalPortsCount
  **/
  @javax.annotation.Nullable

  public Integer getPhysicalPortsCount() {
    return physicalPortsCount;
  }


  public void setPhysicalPortsCount(Integer physicalPortsCount) {
    this.physicalPortsCount = physicalPortsCount;
  }


  public Port connectivitySourceType(ConnectivitySourceTypeEnum connectivitySourceType) {
    
    this.connectivitySourceType = connectivitySourceType;
    return this;
  }

   /**
   * Port connectivity type
   * @return connectivitySourceType
  **/
  @javax.annotation.Nonnull

  public ConnectivitySourceTypeEnum getConnectivitySourceType() {
    return connectivitySourceType;
  }


  public void setConnectivitySourceType(ConnectivitySourceTypeEnum connectivitySourceType) {
    this.connectivitySourceType = connectivitySourceType;
  }


  public Port bmmrType(BmmrTypeEnum bmmrType) {
    
    this.bmmrType = bmmrType;
    return this;
  }

   /**
   * Get bmmrType
   * @return bmmrType
  **/
  @javax.annotation.Nullable

  public BmmrTypeEnum getBmmrType() {
    return bmmrType;
  }


  public void setBmmrType(BmmrTypeEnum bmmrType) {
    this.bmmrType = bmmrType;
  }


  public Port project(Project project) {
    
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @javax.annotation.Nullable

  public Project getProject() {
    return project;
  }


  public void setProject(Project project) {
    this.project = project;
  }


  public Port state(PortState state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable

  public PortState getState() {
    return state;
  }


  public void setState(PortState state) {
    this.state = state;
  }


  public Port order(PortOrder order) {
    
    this.order = order;
    return this;
  }

   /**
   * Get order
   * @return order
  **/
  @javax.annotation.Nullable

  public PortOrder getOrder() {
    return order;
  }


  public void setOrder(PortOrder order) {
    this.order = order;
  }


  public Port cvpId(String cvpId) {
    
    this.cvpId = cvpId;
    return this;
  }

   /**
   * Equinix assigned response attribute for Unique ID for a virtual port.
   * @return cvpId
  **/
  @javax.annotation.Nullable

  public String getCvpId() {
    return cvpId;
  }


  public void setCvpId(String cvpId) {
    this.cvpId = cvpId;
  }


  public Port operation(PortOperation operation) {
    
    this.operation = operation;
    return this;
  }

   /**
   * Get operation
   * @return operation
  **/
  @javax.annotation.Nullable

  public PortOperation getOperation() {
    return operation;
  }


  public void setOperation(PortOperation operation) {
    this.operation = operation;
  }


  public Port account(SimplifiedAccount account) {
    
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @javax.annotation.Nonnull

  public SimplifiedAccount getAccount() {
    return account;
  }


  public void setAccount(SimplifiedAccount account) {
    this.account = account;
  }


  public Port changelog(Changelog changelog) {
    
    this.changelog = changelog;
    return this;
  }

   /**
   * Get changelog
   * @return changelog
  **/
  @javax.annotation.Nullable

  public Changelog getChangelog() {
    return changelog;
  }


  public void setChangelog(Changelog changelog) {
    this.changelog = changelog;
  }


  public Port serviceType(ServiceTypeEnum serviceType) {
    
    this.serviceType = serviceType;
    return this;
  }

   /**
   * Port service Type
   * @return serviceType
  **/
  @javax.annotation.Nullable

  public ServiceTypeEnum getServiceType() {
    return serviceType;
  }


  public void setServiceType(ServiceTypeEnum serviceType) {
    this.serviceType = serviceType;
  }


  public Port bandwidth(Integer bandwidth) {
    
    this.bandwidth = bandwidth;
    return this;
  }

   /**
   * Equinix assigned response attribute for Port bandwidth in Mbps
   * minimum: 0
   * @return bandwidth
  **/
  @javax.annotation.Nullable

  public Integer getBandwidth() {
    return bandwidth;
  }


  public void setBandwidth(Integer bandwidth) {
    this.bandwidth = bandwidth;
  }


  public Port availableBandwidth(Integer availableBandwidth) {
    
    this.availableBandwidth = availableBandwidth;
    return this;
  }

   /**
   * Equinix assigned response attribute for Port available bandwidth in Mbps
   * minimum: 0
   * @return availableBandwidth
  **/
  @javax.annotation.Nullable

  public Integer getAvailableBandwidth() {
    return availableBandwidth;
  }


  public void setAvailableBandwidth(Integer availableBandwidth) {
    this.availableBandwidth = availableBandwidth;
  }


  public Port usedBandwidth(Integer usedBandwidth) {
    
    this.usedBandwidth = usedBandwidth;
    return this;
  }

   /**
   * Equinix assigned response attribute for Port used bandwidth in Mbps
   * minimum: 0
   * @return usedBandwidth
  **/
  @javax.annotation.Nullable

  public Integer getUsedBandwidth() {
    return usedBandwidth;
  }


  public void setUsedBandwidth(Integer usedBandwidth) {
    this.usedBandwidth = usedBandwidth;
  }


  public Port location(SimplifiedLocation location) {
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nonnull

  public SimplifiedLocation getLocation() {
    return location;
  }


  public void setLocation(SimplifiedLocation location) {
    this.location = location;
  }


  public Port device(PortDevice device) {
    
    this.device = device;
    return this;
  }

   /**
   * Get device
   * @return device
  **/
  @javax.annotation.Nullable

  public PortDevice getDevice() {
    return device;
  }


  public void setDevice(PortDevice device) {
    this.device = device;
  }


  public Port _interface(PortInterface _interface) {
    
    this._interface = _interface;
    return this;
  }

   /**
   * Get _interface
   * @return _interface
  **/
  @javax.annotation.Nullable

  public PortInterface getInterface() {
    return _interface;
  }


  public void setInterface(PortInterface _interface) {
    this._interface = _interface;
  }


  public Port demarcationPointIbx(String demarcationPointIbx) {
    
    this.demarcationPointIbx = demarcationPointIbx;
    return this;
  }

   /**
   * A-side/Equinix ibx
   * @return demarcationPointIbx
  **/
  @javax.annotation.Nullable

  public String getDemarcationPointIbx() {
    return demarcationPointIbx;
  }


  public void setDemarcationPointIbx(String demarcationPointIbx) {
    this.demarcationPointIbx = demarcationPointIbx;
  }


  public Port tetherIbx(String tetherIbx) {
    
    this.tetherIbx = tetherIbx;
    return this;
  }

   /**
   * z-side/Equinix ibx
   * @return tetherIbx
  **/
  @javax.annotation.Nullable

  public String getTetherIbx() {
    return tetherIbx;
  }


  public void setTetherIbx(String tetherIbx) {
    this.tetherIbx = tetherIbx;
  }


  public Port demarcationPoint(PortDemarcationPoint demarcationPoint) {
    
    this.demarcationPoint = demarcationPoint;
    return this;
  }

   /**
   * Get demarcationPoint
   * @return demarcationPoint
  **/
  @javax.annotation.Nullable

  public PortDemarcationPoint getDemarcationPoint() {
    return demarcationPoint;
  }


  public void setDemarcationPoint(PortDemarcationPoint demarcationPoint) {
    this.demarcationPoint = demarcationPoint;
  }


  public Port redundancy(PortRedundancy redundancy) {
    
    this.redundancy = redundancy;
    return this;
  }

   /**
   * Get redundancy
   * @return redundancy
  **/
  @javax.annotation.Nullable

  public PortRedundancy getRedundancy() {
    return redundancy;
  }


  public void setRedundancy(PortRedundancy redundancy) {
    this.redundancy = redundancy;
  }


  public Port encapsulation(PortEncapsulation encapsulation) {
    
    this.encapsulation = encapsulation;
    return this;
  }

   /**
   * Get encapsulation
   * @return encapsulation
  **/
  @javax.annotation.Nonnull

  public PortEncapsulation getEncapsulation() {
    return encapsulation;
  }


  public void setEncapsulation(PortEncapsulation encapsulation) {
    this.encapsulation = encapsulation;
  }


  public Port lagEnabled(Boolean lagEnabled) {
    
    this.lagEnabled = lagEnabled;
    return this;
  }

   /**
   * If LAG enabled
   * @return lagEnabled
  **/
  @javax.annotation.Nullable

  public Boolean getLagEnabled() {
    return lagEnabled;
  }


  public void setLagEnabled(Boolean lagEnabled) {
    this.lagEnabled = lagEnabled;
  }


  public Port lag(PortLag lag) {
    
    this.lag = lag;
    return this;
  }

   /**
   * Get lag
   * @return lag
  **/
  @javax.annotation.Nullable

  public PortLag getLag() {
    return lag;
  }


  public void setLag(PortLag lag) {
    this.lag = lag;
  }


  public Port asn(Integer asn) {
    
    this.asn = asn;
    return this;
  }

   /**
   * Port ASN
   * @return asn
  **/
  @javax.annotation.Nullable

  public Integer getAsn() {
    return asn;
  }


  public void setAsn(Integer asn) {
    this.asn = asn;
  }


  public Port settings(PortSettings settings) {
    
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @javax.annotation.Nonnull

  public PortSettings getSettings() {
    return settings;
  }


  public void setSettings(PortSettings settings) {
    this.settings = settings;
  }


  public Port physicalPortQuantity(Integer physicalPortQuantity) {
    
    this.physicalPortQuantity = physicalPortQuantity;
    return this;
  }

   /**
   * Number of physical ports
   * @return physicalPortQuantity
  **/
  @javax.annotation.Nullable

  public Integer getPhysicalPortQuantity() {
    return physicalPortQuantity;
  }


  public void setPhysicalPortQuantity(Integer physicalPortQuantity) {
    this.physicalPortQuantity = physicalPortQuantity;
  }


  public Port notifications(List<PortNotification> notifications) {
    
    this.notifications = notifications;
    return this;
  }

  public Port addNotificationsItem(PortNotification notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

   /**
   * Notification preferences
   * @return notifications
  **/
  @javax.annotation.Nullable

  public List<PortNotification> getNotifications() {
    return notifications;
  }


  public void setNotifications(List<PortNotification> notifications) {
    this.notifications = notifications;
  }


  public Port additionalInfo(List<PortAdditionalInfo> additionalInfo) {
    
    this.additionalInfo = additionalInfo;
    return this;
  }

  public Port addAdditionalInfoItem(PortAdditionalInfo additionalInfoItem) {
    if (this.additionalInfo == null) {
      this.additionalInfo = new ArrayList<>();
    }
    this.additionalInfo.add(additionalInfoItem);
    return this;
  }

   /**
   * Port additional information
   * @return additionalInfo
  **/
  @javax.annotation.Nullable

  public List<PortAdditionalInfo> getAdditionalInfo() {
    return additionalInfo;
  }


  public void setAdditionalInfo(List<PortAdditionalInfo> additionalInfo) {
    this.additionalInfo = additionalInfo;
  }


  public Port physicalPorts(List<PhysicalPort> physicalPorts) {
    
    this.physicalPorts = physicalPorts;
    return this;
  }

  public Port addPhysicalPortsItem(PhysicalPort physicalPortsItem) {
    if (this.physicalPorts == null) {
      this.physicalPorts = new ArrayList<>();
    }
    this.physicalPorts.add(physicalPortsItem);
    return this;
  }

   /**
   * Physical ports that implement this port
   * @return physicalPorts
  **/
  @javax.annotation.Nullable

  public List<PhysicalPort> getPhysicalPorts() {
    return physicalPorts;
  }


  public void setPhysicalPorts(List<PhysicalPort> physicalPorts) {
    this.physicalPorts = physicalPorts;
  }


  public Port loas(List<PortLoa> loas) {
    
    this.loas = loas;
    return this;
  }

  public Port addLoasItem(PortLoa loasItem) {
    if (this.loas == null) {
      this.loas = new ArrayList<>();
    }
    this.loas.add(loasItem);
    return this;
  }

   /**
   * Port Loas
   * @return loas
  **/
  @javax.annotation.Nullable

  public List<PortLoa> getLoas() {
    return loas;
  }


  public void setLoas(List<PortLoa> loas) {
    this.loas = loas;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Port instance itself
   */
  public Port putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Port port = (Port) o;
    return Objects.equals(this.type, port.type) &&
        Objects.equals(this.id, port.id) &&
        Objects.equals(this.href, port.href) &&
        Objects.equals(this.uuid, port.uuid) &&
        Objects.equals(this.name, port.name) &&
        Objects.equals(this.description, port.description) &&
        Objects.equals(this.physicalPortsSpeed, port.physicalPortsSpeed) &&
        Objects.equals(this.connectionsCount, port.connectionsCount) &&
        Objects.equals(this.physicalPortsType, port.physicalPortsType) &&
        Objects.equals(this.physicalPortsCount, port.physicalPortsCount) &&
        Objects.equals(this.connectivitySourceType, port.connectivitySourceType) &&
        Objects.equals(this.bmmrType, port.bmmrType) &&
        Objects.equals(this.project, port.project) &&
        Objects.equals(this.state, port.state) &&
        Objects.equals(this.order, port.order) &&
        Objects.equals(this.cvpId, port.cvpId) &&
        Objects.equals(this.operation, port.operation) &&
        Objects.equals(this.account, port.account) &&
        Objects.equals(this.changelog, port.changelog) &&
        Objects.equals(this.serviceType, port.serviceType) &&
        Objects.equals(this.bandwidth, port.bandwidth) &&
        Objects.equals(this.availableBandwidth, port.availableBandwidth) &&
        Objects.equals(this.usedBandwidth, port.usedBandwidth) &&
        Objects.equals(this.location, port.location) &&
        Objects.equals(this.device, port.device) &&
        Objects.equals(this._interface, port._interface) &&
        Objects.equals(this.demarcationPointIbx, port.demarcationPointIbx) &&
        Objects.equals(this.tetherIbx, port.tetherIbx) &&
        Objects.equals(this.demarcationPoint, port.demarcationPoint) &&
        Objects.equals(this.redundancy, port.redundancy) &&
        Objects.equals(this.encapsulation, port.encapsulation) &&
        Objects.equals(this.lagEnabled, port.lagEnabled) &&
        Objects.equals(this.lag, port.lag) &&
        Objects.equals(this.asn, port.asn) &&
        Objects.equals(this.settings, port.settings) &&
        Objects.equals(this.physicalPortQuantity, port.physicalPortQuantity) &&
        Objects.equals(this.notifications, port.notifications) &&
        Objects.equals(this.additionalInfo, port.additionalInfo) &&
        Objects.equals(this.physicalPorts, port.physicalPorts) &&
        Objects.equals(this.loas, port.loas)&&
        Objects.equals(this.additionalProperties, port.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, id, href, uuid, name, description, physicalPortsSpeed, connectionsCount, physicalPortsType, physicalPortsCount, connectivitySourceType, bmmrType, project, state, order, cvpId, operation, account, changelog, serviceType, bandwidth, availableBandwidth, usedBandwidth, location, device, _interface, demarcationPointIbx, tetherIbx, demarcationPoint, redundancy, encapsulation, lagEnabled, lag, asn, settings, physicalPortQuantity, notifications, additionalInfo, physicalPorts, loas, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Port {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    physicalPortsSpeed: ").append(toIndentedString(physicalPortsSpeed)).append("\n");
    sb.append("    connectionsCount: ").append(toIndentedString(connectionsCount)).append("\n");
    sb.append("    physicalPortsType: ").append(toIndentedString(physicalPortsType)).append("\n");
    sb.append("    physicalPortsCount: ").append(toIndentedString(physicalPortsCount)).append("\n");
    sb.append("    connectivitySourceType: ").append(toIndentedString(connectivitySourceType)).append("\n");
    sb.append("    bmmrType: ").append(toIndentedString(bmmrType)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    cvpId: ").append(toIndentedString(cvpId)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    changelog: ").append(toIndentedString(changelog)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("    availableBandwidth: ").append(toIndentedString(availableBandwidth)).append("\n");
    sb.append("    usedBandwidth: ").append(toIndentedString(usedBandwidth)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    _interface: ").append(toIndentedString(_interface)).append("\n");
    sb.append("    demarcationPointIbx: ").append(toIndentedString(demarcationPointIbx)).append("\n");
    sb.append("    tetherIbx: ").append(toIndentedString(tetherIbx)).append("\n");
    sb.append("    demarcationPoint: ").append(toIndentedString(demarcationPoint)).append("\n");
    sb.append("    redundancy: ").append(toIndentedString(redundancy)).append("\n");
    sb.append("    encapsulation: ").append(toIndentedString(encapsulation)).append("\n");
    sb.append("    lagEnabled: ").append(toIndentedString(lagEnabled)).append("\n");
    sb.append("    lag: ").append(toIndentedString(lag)).append("\n");
    sb.append("    asn: ").append(toIndentedString(asn)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    physicalPortQuantity: ").append(toIndentedString(physicalPortQuantity)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    physicalPorts: ").append(toIndentedString(physicalPorts)).append("\n");
    sb.append("    loas: ").append(toIndentedString(loas)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("id");
    openapiFields.add("href");
    openapiFields.add("uuid");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("physicalPortsSpeed");
    openapiFields.add("connectionsCount");
    openapiFields.add("physicalPortsType");
    openapiFields.add("physicalPortsCount");
    openapiFields.add("connectivitySourceType");
    openapiFields.add("bmmrType");
    openapiFields.add("project");
    openapiFields.add("state");
    openapiFields.add("order");
    openapiFields.add("cvpId");
    openapiFields.add("operation");
    openapiFields.add("account");
    openapiFields.add("changelog");
    openapiFields.add("serviceType");
    openapiFields.add("bandwidth");
    openapiFields.add("availableBandwidth");
    openapiFields.add("usedBandwidth");
    openapiFields.add("location");
    openapiFields.add("device");
    openapiFields.add("interface");
    openapiFields.add("demarcationPointIbx");
    openapiFields.add("tetherIbx");
    openapiFields.add("demarcationPoint");
    openapiFields.add("redundancy");
    openapiFields.add("encapsulation");
    openapiFields.add("lagEnabled");
    openapiFields.add("lag");
    openapiFields.add("asn");
    openapiFields.add("settings");
    openapiFields.add("physicalPortQuantity");
    openapiFields.add("notifications");
    openapiFields.add("additionalInfo");
    openapiFields.add("physicalPorts");
    openapiFields.add("loas");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("physicalPortsSpeed");
    openapiRequiredFields.add("physicalPortsType");
    openapiRequiredFields.add("connectivitySourceType");
    openapiRequiredFields.add("account");
    openapiRequiredFields.add("location");
    openapiRequiredFields.add("encapsulation");
    openapiRequiredFields.add("settings");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Port
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Port.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Port is not found in the empty JSON string", Port.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Port.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("physicalPortsType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `physicalPortsType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("physicalPortsType").toString()));
      }
      if (!jsonObj.get("connectivitySourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectivitySourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectivitySourceType").toString()));
      }
      if ((jsonObj.get("bmmrType") != null && !jsonObj.get("bmmrType").isJsonNull()) && !jsonObj.get("bmmrType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bmmrType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bmmrType").toString()));
      }
      // validate the optional field `project`
      if (jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) {
        Project.validateJsonObject(jsonObj.getAsJsonObject("project"));
      }
      // validate the optional field `order`
      if (jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) {
        PortOrder.validateJsonObject(jsonObj.getAsJsonObject("order"));
      }
      if ((jsonObj.get("cvpId") != null && !jsonObj.get("cvpId").isJsonNull()) && !jsonObj.get("cvpId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cvpId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cvpId").toString()));
      }
      // validate the optional field `operation`
      if (jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonNull()) {
        PortOperation.validateJsonObject(jsonObj.getAsJsonObject("operation"));
      }
      // validate the required field `account`
      SimplifiedAccount.validateJsonObject(jsonObj.getAsJsonObject("account"));
      // validate the optional field `changelog`
      if (jsonObj.get("changelog") != null && !jsonObj.get("changelog").isJsonNull()) {
        Changelog.validateJsonObject(jsonObj.getAsJsonObject("changelog"));
      }
      if ((jsonObj.get("serviceType") != null && !jsonObj.get("serviceType").isJsonNull()) && !jsonObj.get("serviceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceType").toString()));
      }
      // validate the required field `location`
      SimplifiedLocation.validateJsonObject(jsonObj.getAsJsonObject("location"));
      // validate the optional field `device`
      if (jsonObj.get("device") != null && !jsonObj.get("device").isJsonNull()) {
        PortDevice.validateJsonObject(jsonObj.getAsJsonObject("device"));
      }
      // validate the optional field `interface`
      if (jsonObj.get("interface") != null && !jsonObj.get("interface").isJsonNull()) {
        PortInterface.validateJsonObject(jsonObj.getAsJsonObject("interface"));
      }
      if ((jsonObj.get("demarcationPointIbx") != null && !jsonObj.get("demarcationPointIbx").isJsonNull()) && !jsonObj.get("demarcationPointIbx").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `demarcationPointIbx` to be a primitive type in the JSON string but got `%s`", jsonObj.get("demarcationPointIbx").toString()));
      }
      if ((jsonObj.get("tetherIbx") != null && !jsonObj.get("tetherIbx").isJsonNull()) && !jsonObj.get("tetherIbx").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tetherIbx` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tetherIbx").toString()));
      }
      // validate the optional field `demarcationPoint`
      if (jsonObj.get("demarcationPoint") != null && !jsonObj.get("demarcationPoint").isJsonNull()) {
        PortDemarcationPoint.validateJsonObject(jsonObj.getAsJsonObject("demarcationPoint"));
      }
      // validate the optional field `redundancy`
      if (jsonObj.get("redundancy") != null && !jsonObj.get("redundancy").isJsonNull()) {
        PortRedundancy.validateJsonObject(jsonObj.getAsJsonObject("redundancy"));
      }
      // validate the required field `encapsulation`
      PortEncapsulation.validateJsonObject(jsonObj.getAsJsonObject("encapsulation"));
      // validate the optional field `lag`
      if (jsonObj.get("lag") != null && !jsonObj.get("lag").isJsonNull()) {
        PortLag.validateJsonObject(jsonObj.getAsJsonObject("lag"));
      }
      // validate the required field `settings`
      PortSettings.validateJsonObject(jsonObj.getAsJsonObject("settings"));
      if (jsonObj.get("notifications") != null && !jsonObj.get("notifications").isJsonNull()) {
        JsonArray jsonArraynotifications = jsonObj.getAsJsonArray("notifications");
        if (jsonArraynotifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notifications` to be an array in the JSON string but got `%s`", jsonObj.get("notifications").toString()));
          }

          // validate the optional field `notifications` (array)
          for (int i = 0; i < jsonArraynotifications.size(); i++) {
            PortNotification.validateJsonObject(jsonArraynotifications.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("additionalInfo") != null && !jsonObj.get("additionalInfo").isJsonNull()) {
        JsonArray jsonArrayadditionalInfo = jsonObj.getAsJsonArray("additionalInfo");
        if (jsonArrayadditionalInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalInfo` to be an array in the JSON string but got `%s`", jsonObj.get("additionalInfo").toString()));
          }

          // validate the optional field `additionalInfo` (array)
          for (int i = 0; i < jsonArrayadditionalInfo.size(); i++) {
            PortAdditionalInfo.validateJsonObject(jsonArrayadditionalInfo.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("physicalPorts") != null && !jsonObj.get("physicalPorts").isJsonNull()) {
        JsonArray jsonArrayphysicalPorts = jsonObj.getAsJsonArray("physicalPorts");
        if (jsonArrayphysicalPorts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("physicalPorts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `physicalPorts` to be an array in the JSON string but got `%s`", jsonObj.get("physicalPorts").toString()));
          }

          // validate the optional field `physicalPorts` (array)
          for (int i = 0; i < jsonArrayphysicalPorts.size(); i++) {
            PhysicalPort.validateJsonObject(jsonArrayphysicalPorts.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("loas") != null && !jsonObj.get("loas").isJsonNull()) {
        JsonArray jsonArrayloas = jsonObj.getAsJsonArray("loas");
        if (jsonArrayloas != null) {
          // ensure the json data is an array
          if (!jsonObj.get("loas").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `loas` to be an array in the JSON string but got `%s`", jsonObj.get("loas").toString()));
          }

          // validate the optional field `loas` (array)
          for (int i = 0; i < jsonArrayloas.size(); i++) {
            PortLoa.validateJsonObject(jsonArrayloas.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Port.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Port' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Port> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Port.class));

       return (TypeAdapter<T>) new TypeAdapter<Port>() {
           @Override
           public void write(JsonWriter out, Port value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Port read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Port instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Port given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Port
  * @throws IOException if the JSON string is invalid with respect to Port
  */
  public static Port fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Port.class);
  }

 /**
  * Convert an instance of Port to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

