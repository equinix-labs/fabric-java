/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import com.fasterxml.jackson.annotation.*;

import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

/**
 * Port specification
 */
@JsonPropertyOrder({
  Port.JSON_PROPERTY_TYPE,
  Port.JSON_PROPERTY_ID,
  Port.JSON_PROPERTY_HREF,
  Port.JSON_PROPERTY_UUID,
  Port.JSON_PROPERTY_NAME,
  Port.JSON_PROPERTY_DESCRIPTION,
  Port.JSON_PROPERTY_PHYSICAL_PORTS_SPEED,
  Port.JSON_PROPERTY_CONNECTIONS_COUNT,
  Port.JSON_PROPERTY_PHYSICAL_PORTS_TYPE,
  Port.JSON_PROPERTY_PHYSICAL_PORTS_COUNT,
  Port.JSON_PROPERTY_CONNECTIVITY_SOURCE_TYPE,
  Port.JSON_PROPERTY_BMMR_TYPE,
  Port.JSON_PROPERTY_PROJECT,
  Port.JSON_PROPERTY_STATE,
  Port.JSON_PROPERTY_ORDER,
  Port.JSON_PROPERTY_CVP_ID,
  Port.JSON_PROPERTY_OPERATION,
  Port.JSON_PROPERTY_ACCOUNT,
  Port.JSON_PROPERTY_CHANGELOG,
  Port.JSON_PROPERTY_SERVICE_TYPE,
  Port.JSON_PROPERTY_BANDWIDTH,
  Port.JSON_PROPERTY_AVAILABLE_BANDWIDTH,
  Port.JSON_PROPERTY_USED_BANDWIDTH,
  Port.JSON_PROPERTY_LOCATION,
  Port.JSON_PROPERTY_DEVICE,
  Port.JSON_PROPERTY_INTERFACE,
  Port.JSON_PROPERTY_DEMARCATION_POINT_IBX,
  Port.JSON_PROPERTY_TETHER_IBX,
  Port.JSON_PROPERTY_DEMARCATION_POINT,
  Port.JSON_PROPERTY_REDUNDANCY,
  Port.JSON_PROPERTY_ENCAPSULATION,
  Port.JSON_PROPERTY_LAG_ENABLED,
  Port.JSON_PROPERTY_LAG,
  Port.JSON_PROPERTY_ASN,
  Port.JSON_PROPERTY_SETTINGS,
  Port.JSON_PROPERTY_PHYSICAL_PORT_QUANTITY,
  Port.JSON_PROPERTY_NOTIFICATIONS,
  Port.JSON_PROPERTY_ADDITIONAL_INFO,
  Port.JSON_PROPERTY_PHYSICAL_PORTS,
  Port.JSON_PROPERTY_LOAS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Port {
  public static final String JSON_PROPERTY_TYPE = "type";
  private PortType type;

  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_HREF = "href";
  private URI href;

  public static final String JSON_PROPERTY_UUID = "uuid";
  private UUID uuid;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_PHYSICAL_PORTS_SPEED = "physicalPortsSpeed";
  private Integer physicalPortsSpeed;

  public static final String JSON_PROPERTY_CONNECTIONS_COUNT = "connectionsCount";
  private Integer connectionsCount;

  /**
   * Physical Ports Type
   */
  public enum PhysicalPortsTypeEnum {
    _1000BASE_LX("1000BASE_LX"),
    
    _10GBASE_LR("10GBASE_LR"),
    
    _100GBASE_LR4("100GBASE_LR4"),
    
    _10GBASE_ER("10GBASE_ER"),
    
    _1000BASE_SX("1000BASE_SX");

    private String value;

    PhysicalPortsTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PhysicalPortsTypeEnum fromValue(String value) {
      for (PhysicalPortsTypeEnum b : PhysicalPortsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PHYSICAL_PORTS_TYPE = "physicalPortsType";
  private PhysicalPortsTypeEnum physicalPortsType;

  public static final String JSON_PROPERTY_PHYSICAL_PORTS_COUNT = "physicalPortsCount";
  private Integer physicalPortsCount;

  /**
   * Port connectivity type
   */
  public enum ConnectivitySourceTypeEnum {
    COLO("COLO"),
    
    BMMR("BMMR"),
    
    REMOTE("REMOTE");

    private String value;

    ConnectivitySourceTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ConnectivitySourceTypeEnum fromValue(String value) {
      for (ConnectivitySourceTypeEnum b : ConnectivitySourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CONNECTIVITY_SOURCE_TYPE = "connectivitySourceType";
  private ConnectivitySourceTypeEnum connectivitySourceType;

  /**
   * Gets or Sets bmmrType
   */
  public enum BmmrTypeEnum {
    SELF("SELF"),
    
    EQUINIX("EQUINIX");

    private String value;

    BmmrTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BmmrTypeEnum fromValue(String value) {
      for (BmmrTypeEnum b : BmmrTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_BMMR_TYPE = "bmmrType";
  private BmmrTypeEnum bmmrType;

  public static final String JSON_PROPERTY_PROJECT = "project";
  private Project project;

  public static final String JSON_PROPERTY_STATE = "state";
  private PortState state;

  public static final String JSON_PROPERTY_ORDER = "order";
  private PortOrder order;

  public static final String JSON_PROPERTY_CVP_ID = "cvpId";
  private String cvpId;

  public static final String JSON_PROPERTY_OPERATION = "operation";
  private PortOperation operation;

  public static final String JSON_PROPERTY_ACCOUNT = "account";
  private SimplifiedAccount account;

  public static final String JSON_PROPERTY_CHANGELOG = "changelog";
  private Changelog changelog;

  /**
   * Port service Type
   */
  public enum ServiceTypeEnum {
    EPL("EPL"),
    
    MSP("MSP");

    private String value;

    ServiceTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ServiceTypeEnum fromValue(String value) {
      for (ServiceTypeEnum b : ServiceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SERVICE_TYPE = "serviceType";
  private ServiceTypeEnum serviceType;

  public static final String JSON_PROPERTY_BANDWIDTH = "bandwidth";
  private Integer bandwidth;

  public static final String JSON_PROPERTY_AVAILABLE_BANDWIDTH = "availableBandwidth";
  private Integer availableBandwidth;

  public static final String JSON_PROPERTY_USED_BANDWIDTH = "usedBandwidth";
  private Integer usedBandwidth;

  public static final String JSON_PROPERTY_LOCATION = "location";
  private SimplifiedLocation location;

  public static final String JSON_PROPERTY_DEVICE = "device";
  private PortDevice device;

  public static final String JSON_PROPERTY_INTERFACE = "interface";
  private PortInterface _interface;

  public static final String JSON_PROPERTY_DEMARCATION_POINT_IBX = "demarcationPointIbx";
  private String demarcationPointIbx;

  public static final String JSON_PROPERTY_TETHER_IBX = "tetherIbx";
  private String tetherIbx;

  public static final String JSON_PROPERTY_DEMARCATION_POINT = "demarcationPoint";
  private PortDemarcationPoint demarcationPoint;

  public static final String JSON_PROPERTY_REDUNDANCY = "redundancy";
  private PortRedundancy redundancy;

  public static final String JSON_PROPERTY_ENCAPSULATION = "encapsulation";
  private PortEncapsulation encapsulation;

  public static final String JSON_PROPERTY_LAG_ENABLED = "lagEnabled";
  private Boolean lagEnabled;

  public static final String JSON_PROPERTY_LAG = "lag";
  private PortLag lag;

  public static final String JSON_PROPERTY_ASN = "asn";
  private Integer asn;

  public static final String JSON_PROPERTY_SETTINGS = "settings";
  private PortSettings settings;

  public static final String JSON_PROPERTY_PHYSICAL_PORT_QUANTITY = "physicalPortQuantity";
  private Integer physicalPortQuantity;

  public static final String JSON_PROPERTY_NOTIFICATIONS = "notifications";
  private List<PortNotification> notifications = new ArrayList<>();

  public static final String JSON_PROPERTY_ADDITIONAL_INFO = "additionalInfo";
  private List<PortAdditionalInfo> additionalInfo = new ArrayList<>();

  public static final String JSON_PROPERTY_PHYSICAL_PORTS = "physicalPorts";
  private List<PhysicalPort> physicalPorts = new ArrayList<>();

  public static final String JSON_PROPERTY_LOAS = "loas";
  private List<PortLoa> loas = new ArrayList<>();

  public Port() {
  }

  @JsonCreator
  public Port(
    @JsonProperty(JSON_PROPERTY_HREF) URI href
  ) {
    this();
    this.href = href;
  }

  public Port type(PortType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PortType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(PortType type) {
    this.type = type;
  }


  public Port id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Equinix assigned response attribute for Port Id
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Integer id) {
    this.id = id;
  }


   /**
   * Equinix assigned response attribute for an absolute URL that is the subject of the link&#39;s context.
   * @return href
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getHref() {
    return href;
  }




  public Port uuid(UUID uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Equinix assigned response attribute for  port identifier
   * @return uuid
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getUuid() {
    return uuid;
  }


  @JsonProperty(JSON_PROPERTY_UUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }


  public Port name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Equinix assigned response attribute for Port name
   * @return name
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public Port description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Equinix assigned response attribute for Port description
   * @return description
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public Port physicalPortsSpeed(Integer physicalPortsSpeed) {
    
    this.physicalPortsSpeed = physicalPortsSpeed;
    return this;
  }

   /**
   * Physical Ports Speed in Mbps
   * minimum: 0
   * @return physicalPortsSpeed
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PHYSICAL_PORTS_SPEED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPhysicalPortsSpeed() {
    return physicalPortsSpeed;
  }


  @JsonProperty(JSON_PROPERTY_PHYSICAL_PORTS_SPEED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPhysicalPortsSpeed(Integer physicalPortsSpeed) {
    this.physicalPortsSpeed = physicalPortsSpeed;
  }


  public Port connectionsCount(Integer connectionsCount) {
    
    this.connectionsCount = connectionsCount;
    return this;
  }

   /**
   * Equinix assigned response attribute for Connection count
   * minimum: 0
   * @return connectionsCount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONNECTIONS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getConnectionsCount() {
    return connectionsCount;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTIONS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConnectionsCount(Integer connectionsCount) {
    this.connectionsCount = connectionsCount;
  }


  public Port physicalPortsType(PhysicalPortsTypeEnum physicalPortsType) {
    
    this.physicalPortsType = physicalPortsType;
    return this;
  }

   /**
   * Physical Ports Type
   * @return physicalPortsType
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PHYSICAL_PORTS_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PhysicalPortsTypeEnum getPhysicalPortsType() {
    return physicalPortsType;
  }


  @JsonProperty(JSON_PROPERTY_PHYSICAL_PORTS_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPhysicalPortsType(PhysicalPortsTypeEnum physicalPortsType) {
    this.physicalPortsType = physicalPortsType;
  }


  public Port physicalPortsCount(Integer physicalPortsCount) {
    
    this.physicalPortsCount = physicalPortsCount;
    return this;
  }

   /**
   * Get physicalPortsCount
   * @return physicalPortsCount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PHYSICAL_PORTS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPhysicalPortsCount() {
    return physicalPortsCount;
  }


  @JsonProperty(JSON_PROPERTY_PHYSICAL_PORTS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPhysicalPortsCount(Integer physicalPortsCount) {
    this.physicalPortsCount = physicalPortsCount;
  }


  public Port connectivitySourceType(ConnectivitySourceTypeEnum connectivitySourceType) {
    
    this.connectivitySourceType = connectivitySourceType;
    return this;
  }

   /**
   * Port connectivity type
   * @return connectivitySourceType
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONNECTIVITY_SOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ConnectivitySourceTypeEnum getConnectivitySourceType() {
    return connectivitySourceType;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTIVITY_SOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConnectivitySourceType(ConnectivitySourceTypeEnum connectivitySourceType) {
    this.connectivitySourceType = connectivitySourceType;
  }


  public Port bmmrType(BmmrTypeEnum bmmrType) {
    
    this.bmmrType = bmmrType;
    return this;
  }

   /**
   * Get bmmrType
   * @return bmmrType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BMMR_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BmmrTypeEnum getBmmrType() {
    return bmmrType;
  }


  @JsonProperty(JSON_PROPERTY_BMMR_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBmmrType(BmmrTypeEnum bmmrType) {
    this.bmmrType = bmmrType;
  }


  public Port project(Project project) {
    
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Project getProject() {
    return project;
  }


  @JsonProperty(JSON_PROPERTY_PROJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProject(Project project) {
    this.project = project;
  }


  public Port state(PortState state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortState getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setState(PortState state) {
    this.state = state;
  }


  public Port order(PortOrder order) {
    
    this.order = order;
    return this;
  }

   /**
   * Get order
   * @return order
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortOrder getOrder() {
    return order;
  }


  @JsonProperty(JSON_PROPERTY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrder(PortOrder order) {
    this.order = order;
  }


  public Port cvpId(String cvpId) {
    
    this.cvpId = cvpId;
    return this;
  }

   /**
   * Equinix assigned response attribute for Unique ID for a virtual port.
   * @return cvpId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CVP_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCvpId() {
    return cvpId;
  }


  @JsonProperty(JSON_PROPERTY_CVP_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCvpId(String cvpId) {
    this.cvpId = cvpId;
  }


  public Port operation(PortOperation operation) {
    
    this.operation = operation;
    return this;
  }

   /**
   * Get operation
   * @return operation
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortOperation getOperation() {
    return operation;
  }


  @JsonProperty(JSON_PROPERTY_OPERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperation(PortOperation operation) {
    this.operation = operation;
  }


  public Port account(SimplifiedAccount account) {
    
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SimplifiedAccount getAccount() {
    return account;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccount(SimplifiedAccount account) {
    this.account = account;
  }


  public Port changelog(Changelog changelog) {
    
    this.changelog = changelog;
    return this;
  }

   /**
   * Get changelog
   * @return changelog
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHANGELOG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Changelog getChangelog() {
    return changelog;
  }


  @JsonProperty(JSON_PROPERTY_CHANGELOG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChangelog(Changelog changelog) {
    this.changelog = changelog;
  }


  public Port serviceType(ServiceTypeEnum serviceType) {
    
    this.serviceType = serviceType;
    return this;
  }

   /**
   * Port service Type
   * @return serviceType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVICE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ServiceTypeEnum getServiceType() {
    return serviceType;
  }


  @JsonProperty(JSON_PROPERTY_SERVICE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServiceType(ServiceTypeEnum serviceType) {
    this.serviceType = serviceType;
  }


  public Port bandwidth(Integer bandwidth) {
    
    this.bandwidth = bandwidth;
    return this;
  }

   /**
   * Equinix assigned response attribute for Port bandwidth in Mbps
   * minimum: 0
   * @return bandwidth
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getBandwidth() {
    return bandwidth;
  }


  @JsonProperty(JSON_PROPERTY_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBandwidth(Integer bandwidth) {
    this.bandwidth = bandwidth;
  }


  public Port availableBandwidth(Integer availableBandwidth) {
    
    this.availableBandwidth = availableBandwidth;
    return this;
  }

   /**
   * Equinix assigned response attribute for Port available bandwidth in Mbps
   * minimum: 0
   * @return availableBandwidth
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVAILABLE_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAvailableBandwidth() {
    return availableBandwidth;
  }


  @JsonProperty(JSON_PROPERTY_AVAILABLE_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAvailableBandwidth(Integer availableBandwidth) {
    this.availableBandwidth = availableBandwidth;
  }


  public Port usedBandwidth(Integer usedBandwidth) {
    
    this.usedBandwidth = usedBandwidth;
    return this;
  }

   /**
   * Equinix assigned response attribute for Port used bandwidth in Mbps
   * minimum: 0
   * @return usedBandwidth
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USED_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUsedBandwidth() {
    return usedBandwidth;
  }


  @JsonProperty(JSON_PROPERTY_USED_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsedBandwidth(Integer usedBandwidth) {
    this.usedBandwidth = usedBandwidth;
  }


  public Port location(SimplifiedLocation location) {
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SimplifiedLocation getLocation() {
    return location;
  }


  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLocation(SimplifiedLocation location) {
    this.location = location;
  }


  public Port device(PortDevice device) {
    
    this.device = device;
    return this;
  }

   /**
   * Get device
   * @return device
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortDevice getDevice() {
    return device;
  }


  @JsonProperty(JSON_PROPERTY_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDevice(PortDevice device) {
    this.device = device;
  }


  public Port _interface(PortInterface _interface) {
    
    this._interface = _interface;
    return this;
  }

   /**
   * Get _interface
   * @return _interface
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERFACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortInterface getInterface() {
    return _interface;
  }


  @JsonProperty(JSON_PROPERTY_INTERFACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInterface(PortInterface _interface) {
    this._interface = _interface;
  }


  public Port demarcationPointIbx(String demarcationPointIbx) {
    
    this.demarcationPointIbx = demarcationPointIbx;
    return this;
  }

   /**
   * A-side/Equinix ibx
   * @return demarcationPointIbx
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEMARCATION_POINT_IBX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDemarcationPointIbx() {
    return demarcationPointIbx;
  }


  @JsonProperty(JSON_PROPERTY_DEMARCATION_POINT_IBX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDemarcationPointIbx(String demarcationPointIbx) {
    this.demarcationPointIbx = demarcationPointIbx;
  }


  public Port tetherIbx(String tetherIbx) {
    
    this.tetherIbx = tetherIbx;
    return this;
  }

   /**
   * z-side/Equinix ibx
   * @return tetherIbx
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TETHER_IBX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTetherIbx() {
    return tetherIbx;
  }


  @JsonProperty(JSON_PROPERTY_TETHER_IBX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTetherIbx(String tetherIbx) {
    this.tetherIbx = tetherIbx;
  }


  public Port demarcationPoint(PortDemarcationPoint demarcationPoint) {
    
    this.demarcationPoint = demarcationPoint;
    return this;
  }

   /**
   * Get demarcationPoint
   * @return demarcationPoint
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEMARCATION_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortDemarcationPoint getDemarcationPoint() {
    return demarcationPoint;
  }


  @JsonProperty(JSON_PROPERTY_DEMARCATION_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDemarcationPoint(PortDemarcationPoint demarcationPoint) {
    this.demarcationPoint = demarcationPoint;
  }


  public Port redundancy(PortRedundancy redundancy) {
    
    this.redundancy = redundancy;
    return this;
  }

   /**
   * Get redundancy
   * @return redundancy
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REDUNDANCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortRedundancy getRedundancy() {
    return redundancy;
  }


  @JsonProperty(JSON_PROPERTY_REDUNDANCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRedundancy(PortRedundancy redundancy) {
    this.redundancy = redundancy;
  }


  public Port encapsulation(PortEncapsulation encapsulation) {
    
    this.encapsulation = encapsulation;
    return this;
  }

   /**
   * Get encapsulation
   * @return encapsulation
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ENCAPSULATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PortEncapsulation getEncapsulation() {
    return encapsulation;
  }


  @JsonProperty(JSON_PROPERTY_ENCAPSULATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEncapsulation(PortEncapsulation encapsulation) {
    this.encapsulation = encapsulation;
  }


  public Port lagEnabled(Boolean lagEnabled) {
    
    this.lagEnabled = lagEnabled;
    return this;
  }

   /**
   * If LAG enabled
   * @return lagEnabled
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAG_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLagEnabled() {
    return lagEnabled;
  }


  @JsonProperty(JSON_PROPERTY_LAG_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLagEnabled(Boolean lagEnabled) {
    this.lagEnabled = lagEnabled;
  }


  public Port lag(PortLag lag) {
    
    this.lag = lag;
    return this;
  }

   /**
   * Get lag
   * @return lag
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortLag getLag() {
    return lag;
  }


  @JsonProperty(JSON_PROPERTY_LAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLag(PortLag lag) {
    this.lag = lag;
  }


  public Port asn(Integer asn) {
    
    this.asn = asn;
    return this;
  }

   /**
   * Port ASN
   * @return asn
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ASN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAsn() {
    return asn;
  }


  @JsonProperty(JSON_PROPERTY_ASN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAsn(Integer asn) {
    this.asn = asn;
  }


  public Port settings(PortSettings settings) {
    
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PortSettings getSettings() {
    return settings;
  }


  @JsonProperty(JSON_PROPERTY_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSettings(PortSettings settings) {
    this.settings = settings;
  }


  public Port physicalPortQuantity(Integer physicalPortQuantity) {
    
    this.physicalPortQuantity = physicalPortQuantity;
    return this;
  }

   /**
   * Number of physical ports
   * @return physicalPortQuantity
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PHYSICAL_PORT_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPhysicalPortQuantity() {
    return physicalPortQuantity;
  }


  @JsonProperty(JSON_PROPERTY_PHYSICAL_PORT_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPhysicalPortQuantity(Integer physicalPortQuantity) {
    this.physicalPortQuantity = physicalPortQuantity;
  }


  public Port notifications(List<PortNotification> notifications) {
    
    this.notifications = notifications;
    return this;
  }

  public Port addNotificationsItem(PortNotification notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

   /**
   * Notification preferences
   * @return notifications
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NOTIFICATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PortNotification> getNotifications() {
    return notifications;
  }


  @JsonProperty(JSON_PROPERTY_NOTIFICATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotifications(List<PortNotification> notifications) {
    this.notifications = notifications;
  }


  public Port additionalInfo(List<PortAdditionalInfo> additionalInfo) {
    
    this.additionalInfo = additionalInfo;
    return this;
  }

  public Port addAdditionalInfoItem(PortAdditionalInfo additionalInfoItem) {
    if (this.additionalInfo == null) {
      this.additionalInfo = new ArrayList<>();
    }
    this.additionalInfo.add(additionalInfoItem);
    return this;
  }

   /**
   * Port additional information
   * @return additionalInfo
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PortAdditionalInfo> getAdditionalInfo() {
    return additionalInfo;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalInfo(List<PortAdditionalInfo> additionalInfo) {
    this.additionalInfo = additionalInfo;
  }


  public Port physicalPorts(List<PhysicalPort> physicalPorts) {
    
    this.physicalPorts = physicalPorts;
    return this;
  }

  public Port addPhysicalPortsItem(PhysicalPort physicalPortsItem) {
    if (this.physicalPorts == null) {
      this.physicalPorts = new ArrayList<>();
    }
    this.physicalPorts.add(physicalPortsItem);
    return this;
  }

   /**
   * Physical ports that implement this port
   * @return physicalPorts
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PHYSICAL_PORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PhysicalPort> getPhysicalPorts() {
    return physicalPorts;
  }


  @JsonProperty(JSON_PROPERTY_PHYSICAL_PORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPhysicalPorts(List<PhysicalPort> physicalPorts) {
    this.physicalPorts = physicalPorts;
  }


  public Port loas(List<PortLoa> loas) {
    
    this.loas = loas;
    return this;
  }

  public Port addLoasItem(PortLoa loasItem) {
    if (this.loas == null) {
      this.loas = new ArrayList<>();
    }
    this.loas.add(loasItem);
    return this;
  }

   /**
   * Port Loas
   * @return loas
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PortLoa> getLoas() {
    return loas;
  }


  @JsonProperty(JSON_PROPERTY_LOAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoas(List<PortLoa> loas) {
    this.loas = loas;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Port port = (Port) o;
    return Objects.equals(this.type, port.type) &&
        Objects.equals(this.id, port.id) &&
        Objects.equals(this.href, port.href) &&
        Objects.equals(this.uuid, port.uuid) &&
        Objects.equals(this.name, port.name) &&
        Objects.equals(this.description, port.description) &&
        Objects.equals(this.physicalPortsSpeed, port.physicalPortsSpeed) &&
        Objects.equals(this.connectionsCount, port.connectionsCount) &&
        Objects.equals(this.physicalPortsType, port.physicalPortsType) &&
        Objects.equals(this.physicalPortsCount, port.physicalPortsCount) &&
        Objects.equals(this.connectivitySourceType, port.connectivitySourceType) &&
        Objects.equals(this.bmmrType, port.bmmrType) &&
        Objects.equals(this.project, port.project) &&
        Objects.equals(this.state, port.state) &&
        Objects.equals(this.order, port.order) &&
        Objects.equals(this.cvpId, port.cvpId) &&
        Objects.equals(this.operation, port.operation) &&
        Objects.equals(this.account, port.account) &&
        Objects.equals(this.changelog, port.changelog) &&
        Objects.equals(this.serviceType, port.serviceType) &&
        Objects.equals(this.bandwidth, port.bandwidth) &&
        Objects.equals(this.availableBandwidth, port.availableBandwidth) &&
        Objects.equals(this.usedBandwidth, port.usedBandwidth) &&
        Objects.equals(this.location, port.location) &&
        Objects.equals(this.device, port.device) &&
        Objects.equals(this._interface, port._interface) &&
        Objects.equals(this.demarcationPointIbx, port.demarcationPointIbx) &&
        Objects.equals(this.tetherIbx, port.tetherIbx) &&
        Objects.equals(this.demarcationPoint, port.demarcationPoint) &&
        Objects.equals(this.redundancy, port.redundancy) &&
        Objects.equals(this.encapsulation, port.encapsulation) &&
        Objects.equals(this.lagEnabled, port.lagEnabled) &&
        Objects.equals(this.lag, port.lag) &&
        Objects.equals(this.asn, port.asn) &&
        Objects.equals(this.settings, port.settings) &&
        Objects.equals(this.physicalPortQuantity, port.physicalPortQuantity) &&
        Objects.equals(this.notifications, port.notifications) &&
        Objects.equals(this.additionalInfo, port.additionalInfo) &&
        Objects.equals(this.physicalPorts, port.physicalPorts) &&
        Objects.equals(this.loas, port.loas);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, id, href, uuid, name, description, physicalPortsSpeed, connectionsCount, physicalPortsType, physicalPortsCount, connectivitySourceType, bmmrType, project, state, order, cvpId, operation, account, changelog, serviceType, bandwidth, availableBandwidth, usedBandwidth, location, device, _interface, demarcationPointIbx, tetherIbx, demarcationPoint, redundancy, encapsulation, lagEnabled, lag, asn, settings, physicalPortQuantity, notifications, additionalInfo, physicalPorts, loas);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Port {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    physicalPortsSpeed: ").append(toIndentedString(physicalPortsSpeed)).append("\n");
    sb.append("    connectionsCount: ").append(toIndentedString(connectionsCount)).append("\n");
    sb.append("    physicalPortsType: ").append(toIndentedString(physicalPortsType)).append("\n");
    sb.append("    physicalPortsCount: ").append(toIndentedString(physicalPortsCount)).append("\n");
    sb.append("    connectivitySourceType: ").append(toIndentedString(connectivitySourceType)).append("\n");
    sb.append("    bmmrType: ").append(toIndentedString(bmmrType)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    cvpId: ").append(toIndentedString(cvpId)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    changelog: ").append(toIndentedString(changelog)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("    availableBandwidth: ").append(toIndentedString(availableBandwidth)).append("\n");
    sb.append("    usedBandwidth: ").append(toIndentedString(usedBandwidth)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    _interface: ").append(toIndentedString(_interface)).append("\n");
    sb.append("    demarcationPointIbx: ").append(toIndentedString(demarcationPointIbx)).append("\n");
    sb.append("    tetherIbx: ").append(toIndentedString(tetherIbx)).append("\n");
    sb.append("    demarcationPoint: ").append(toIndentedString(demarcationPoint)).append("\n");
    sb.append("    redundancy: ").append(toIndentedString(redundancy)).append("\n");
    sb.append("    encapsulation: ").append(toIndentedString(encapsulation)).append("\n");
    sb.append("    lagEnabled: ").append(toIndentedString(lagEnabled)).append("\n");
    sb.append("    lag: ").append(toIndentedString(lag)).append("\n");
    sb.append("    asn: ").append(toIndentedString(asn)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    physicalPortQuantity: ").append(toIndentedString(physicalPortQuantity)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    physicalPorts: ").append(toIndentedString(physicalPorts)).append("\n");
    sb.append("    loas: ").append(toIndentedString(loas)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

