/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import java.util.Objects;
import java.util.Arrays;
import com.equinix.openapi.fabric.v4.model.Changelog;
import com.equinix.openapi.fabric.v4.model.SubscriptionEntitlementResponse;
import com.equinix.openapi.fabric.v4.model.SubscriptionStatus;
import com.equinix.openapi.fabric.v4.model.SubscriptionTrial;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.equinix.openapi.fabric.JSON;

/**
 * Subscription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SubscriptionResponse {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UUID uuid;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private SubscriptionStatus status;

  /**
   * Gets or Sets marketplace
   */
  @JsonAdapter(MarketplaceEnum.Adapter.class)
  public enum MarketplaceEnum {
    AWS("AWS"),
    
    GCP("GCP"),
    
    AZURE("AZURE"),
    
    REDHAT("REDHAT");

    private String value;

    MarketplaceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MarketplaceEnum fromValue(String value) {
      for (MarketplaceEnum b : MarketplaceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MarketplaceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MarketplaceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MarketplaceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MarketplaceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MARKETPLACE = "marketplace";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE)
  private MarketplaceEnum marketplace;

  /**
   * Gets or Sets offerType
   */
  @JsonAdapter(OfferTypeEnum.Adapter.class)
  public enum OfferTypeEnum {
    PUBLIC("PUBLIC"),
    
    PRIVATE_OFFER("PRIVATE_OFFER");

    private String value;

    OfferTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OfferTypeEnum fromValue(String value) {
      for (OfferTypeEnum b : OfferTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OfferTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OfferTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OfferTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OfferTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OFFER_TYPE = "offerType";
  @SerializedName(SERIALIZED_NAME_OFFER_TYPE)
  private OfferTypeEnum offerType;

  public static final String SERIALIZED_NAME_IS_AUTO_RENEW = "isAutoRenew";
  @SerializedName(SERIALIZED_NAME_IS_AUTO_RENEW)
  private Boolean isAutoRenew;

  public static final String SERIALIZED_NAME_OFFER_ID = "offerId";
  @SerializedName(SERIALIZED_NAME_OFFER_ID)
  private String offerId;

  public static final String SERIALIZED_NAME_TRIAL = "trial";
  @SerializedName(SERIALIZED_NAME_TRIAL)
  private SubscriptionTrial trial;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_KEY = "subscriptionKey";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_KEY)
  private String subscriptionKey;

  public static final String SERIALIZED_NAME_ENTITLEMENTS = "entitlements";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENTS)
  private List<SubscriptionEntitlementResponse> entitlements = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHANGELOG = "changelog";
  @SerializedName(SERIALIZED_NAME_CHANGELOG)
  private Changelog changelog;

  public SubscriptionResponse() {
  }

  public SubscriptionResponse href(URI href) {
    
    this.href = href;
    return this;
  }

   /**
   * Get href
   * @return href
  **/
  @javax.annotation.Nullable

  public URI getHref() {
    return href;
  }


  public void setHref(URI href) {
    this.href = href;
  }


  public SubscriptionResponse uuid(UUID uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @javax.annotation.Nullable

  public UUID getUuid() {
    return uuid;
  }


  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }


  public SubscriptionResponse status(SubscriptionStatus status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable

  public SubscriptionStatus getStatus() {
    return status;
  }


  public void setStatus(SubscriptionStatus status) {
    this.status = status;
  }


  public SubscriptionResponse marketplace(MarketplaceEnum marketplace) {
    
    this.marketplace = marketplace;
    return this;
  }

   /**
   * Get marketplace
   * @return marketplace
  **/
  @javax.annotation.Nullable

  public MarketplaceEnum getMarketplace() {
    return marketplace;
  }


  public void setMarketplace(MarketplaceEnum marketplace) {
    this.marketplace = marketplace;
  }


  public SubscriptionResponse offerType(OfferTypeEnum offerType) {
    
    this.offerType = offerType;
    return this;
  }

   /**
   * Get offerType
   * @return offerType
  **/
  @javax.annotation.Nullable

  public OfferTypeEnum getOfferType() {
    return offerType;
  }


  public void setOfferType(OfferTypeEnum offerType) {
    this.offerType = offerType;
  }


  public SubscriptionResponse isAutoRenew(Boolean isAutoRenew) {
    
    this.isAutoRenew = isAutoRenew;
    return this;
  }

   /**
   * Get isAutoRenew
   * @return isAutoRenew
  **/
  @javax.annotation.Nullable

  public Boolean getIsAutoRenew() {
    return isAutoRenew;
  }


  public void setIsAutoRenew(Boolean isAutoRenew) {
    this.isAutoRenew = isAutoRenew;
  }


  public SubscriptionResponse offerId(String offerId) {
    
    this.offerId = offerId;
    return this;
  }

   /**
   * Get offerId
   * @return offerId
  **/
  @javax.annotation.Nullable

  public String getOfferId() {
    return offerId;
  }


  public void setOfferId(String offerId) {
    this.offerId = offerId;
  }


  public SubscriptionResponse trial(SubscriptionTrial trial) {
    
    this.trial = trial;
    return this;
  }

   /**
   * Get trial
   * @return trial
  **/
  @javax.annotation.Nullable

  public SubscriptionTrial getTrial() {
    return trial;
  }


  public void setTrial(SubscriptionTrial trial) {
    this.trial = trial;
  }


  public SubscriptionResponse subscriptionKey(String subscriptionKey) {
    
    this.subscriptionKey = subscriptionKey;
    return this;
  }

   /**
   * Get subscriptionKey
   * @return subscriptionKey
  **/
  @javax.annotation.Nullable

  public String getSubscriptionKey() {
    return subscriptionKey;
  }


  public void setSubscriptionKey(String subscriptionKey) {
    this.subscriptionKey = subscriptionKey;
  }


  public SubscriptionResponse entitlements(List<SubscriptionEntitlementResponse> entitlements) {
    
    this.entitlements = entitlements;
    return this;
  }

  public SubscriptionResponse addEntitlementsItem(SubscriptionEntitlementResponse entitlementsItem) {
    if (this.entitlements == null) {
      this.entitlements = new ArrayList<>();
    }
    this.entitlements.add(entitlementsItem);
    return this;
  }

   /**
   * Get entitlements
   * @return entitlements
  **/
  @javax.annotation.Nullable

  public List<SubscriptionEntitlementResponse> getEntitlements() {
    return entitlements;
  }


  public void setEntitlements(List<SubscriptionEntitlementResponse> entitlements) {
    this.entitlements = entitlements;
  }


  public SubscriptionResponse changelog(Changelog changelog) {
    
    this.changelog = changelog;
    return this;
  }

   /**
   * Get changelog
   * @return changelog
  **/
  @javax.annotation.Nullable

  public Changelog getChangelog() {
    return changelog;
  }


  public void setChangelog(Changelog changelog) {
    this.changelog = changelog;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SubscriptionResponse instance itself
   */
  public SubscriptionResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionResponse subscriptionResponse = (SubscriptionResponse) o;
    return Objects.equals(this.href, subscriptionResponse.href) &&
        Objects.equals(this.uuid, subscriptionResponse.uuid) &&
        Objects.equals(this.status, subscriptionResponse.status) &&
        Objects.equals(this.marketplace, subscriptionResponse.marketplace) &&
        Objects.equals(this.offerType, subscriptionResponse.offerType) &&
        Objects.equals(this.isAutoRenew, subscriptionResponse.isAutoRenew) &&
        Objects.equals(this.offerId, subscriptionResponse.offerId) &&
        Objects.equals(this.trial, subscriptionResponse.trial) &&
        Objects.equals(this.subscriptionKey, subscriptionResponse.subscriptionKey) &&
        Objects.equals(this.entitlements, subscriptionResponse.entitlements) &&
        Objects.equals(this.changelog, subscriptionResponse.changelog)&&
        Objects.equals(this.additionalProperties, subscriptionResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, uuid, status, marketplace, offerType, isAutoRenew, offerId, trial, subscriptionKey, entitlements, changelog, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionResponse {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    marketplace: ").append(toIndentedString(marketplace)).append("\n");
    sb.append("    offerType: ").append(toIndentedString(offerType)).append("\n");
    sb.append("    isAutoRenew: ").append(toIndentedString(isAutoRenew)).append("\n");
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("    trial: ").append(toIndentedString(trial)).append("\n");
    sb.append("    subscriptionKey: ").append(toIndentedString(subscriptionKey)).append("\n");
    sb.append("    entitlements: ").append(toIndentedString(entitlements)).append("\n");
    sb.append("    changelog: ").append(toIndentedString(changelog)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("href");
    openapiFields.add("uuid");
    openapiFields.add("status");
    openapiFields.add("marketplace");
    openapiFields.add("offerType");
    openapiFields.add("isAutoRenew");
    openapiFields.add("offerId");
    openapiFields.add("trial");
    openapiFields.add("subscriptionKey");
    openapiFields.add("entitlements");
    openapiFields.add("changelog");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SubscriptionResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SubscriptionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionResponse is not found in the empty JSON string", SubscriptionResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if ((jsonObj.get("marketplace") != null && !jsonObj.get("marketplace").isJsonNull()) && !jsonObj.get("marketplace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketplace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketplace").toString()));
      }
      if ((jsonObj.get("offerType") != null && !jsonObj.get("offerType").isJsonNull()) && !jsonObj.get("offerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerType").toString()));
      }
      if ((jsonObj.get("offerId") != null && !jsonObj.get("offerId").isJsonNull()) && !jsonObj.get("offerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerId").toString()));
      }
      // validate the optional field `trial`
      if (jsonObj.get("trial") != null && !jsonObj.get("trial").isJsonNull()) {
        SubscriptionTrial.validateJsonObject(jsonObj.getAsJsonObject("trial"));
      }
      if ((jsonObj.get("subscriptionKey") != null && !jsonObj.get("subscriptionKey").isJsonNull()) && !jsonObj.get("subscriptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionKey").toString()));
      }
      if (jsonObj.get("entitlements") != null && !jsonObj.get("entitlements").isJsonNull()) {
        JsonArray jsonArrayentitlements = jsonObj.getAsJsonArray("entitlements");
        if (jsonArrayentitlements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entitlements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entitlements` to be an array in the JSON string but got `%s`", jsonObj.get("entitlements").toString()));
          }

          // validate the optional field `entitlements` (array)
          for (int i = 0; i < jsonArrayentitlements.size(); i++) {
            SubscriptionEntitlementResponse.validateJsonObject(jsonArrayentitlements.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `changelog`
      if (jsonObj.get("changelog") != null && !jsonObj.get("changelog").isJsonNull()) {
        Changelog.validateJsonObject(jsonObj.getAsJsonObject("changelog"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionResponse>() {
           @Override
           public void write(JsonWriter out, SubscriptionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SubscriptionResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SubscriptionResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SubscriptionResponse
  * @throws IOException if the JSON string is invalid with respect to SubscriptionResponse
  */
  public static SubscriptionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionResponse.class);
  }

 /**
  * Convert an instance of SubscriptionResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

