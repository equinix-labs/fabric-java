/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import java.util.Objects;
import java.util.Arrays;
import com.equinix.openapi.fabric.v4.model.PortOrderSignatureDelegate;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Port signature Type
 */
@JsonPropertyOrder({
  PortOrderSignature.JSON_PROPERTY_SIGNATORY,
  PortOrderSignature.JSON_PROPERTY_DELEGATE
})
@JsonTypeName("PortOrder_signature")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PortOrderSignature {
  /**
   * Port signature Type
   */
  public enum SignatoryEnum {
    DELEGATE("DELEGATE"),
    
    SELF("SELF"),
    
    ACCOUNT_SUPPORT("ACCOUNT_SUPPORT");

    private String value;

    SignatoryEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SignatoryEnum fromValue(String value) {
      for (SignatoryEnum b : SignatoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SIGNATORY = "signatory";
  private SignatoryEnum signatory;

  public static final String JSON_PROPERTY_DELEGATE = "delegate";
  private PortOrderSignatureDelegate delegate;

  public PortOrderSignature() {
  }

  public PortOrderSignature signatory(SignatoryEnum signatory) {
    
    this.signatory = signatory;
    return this;
  }

   /**
   * Port signature Type
   * @return signatory
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIGNATORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SignatoryEnum getSignatory() {
    return signatory;
  }


  @JsonProperty(JSON_PROPERTY_SIGNATORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSignatory(SignatoryEnum signatory) {
    this.signatory = signatory;
  }


  public PortOrderSignature delegate(PortOrderSignatureDelegate delegate) {
    
    this.delegate = delegate;
    return this;
  }

   /**
   * Get delegate
   * @return delegate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DELEGATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PortOrderSignatureDelegate getDelegate() {
    return delegate;
  }


  @JsonProperty(JSON_PROPERTY_DELEGATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDelegate(PortOrderSignatureDelegate delegate) {
    this.delegate = delegate;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortOrderSignature portOrderSignature = (PortOrderSignature) o;
    return Objects.equals(this.signatory, portOrderSignature.signatory) &&
        Objects.equals(this.delegate, portOrderSignature.delegate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signatory, delegate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortOrderSignature {\n");
    sb.append("    signatory: ").append(toIndentedString(signatory)).append("\n");
    sb.append("    delegate: ").append(toIndentedString(delegate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

