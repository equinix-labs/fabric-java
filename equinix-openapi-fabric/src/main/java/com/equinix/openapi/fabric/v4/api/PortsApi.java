/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.v4.model.AllPhysicalPortsResponse;
import com.equinix.openapi.fabric.v4.model.AllPortsResponse;
import com.equinix.openapi.fabric.v4.model.BulkPhysicalPort;
import com.equinix.openapi.fabric.v4.model.BulkPort;
import com.equinix.openapi.fabric.v4.model.Error;
import com.equinix.openapi.fabric.v4.model.LinkProtocolGetResponse;
import com.equinix.openapi.fabric.v4.model.Port;
import com.equinix.openapi.fabric.v4.model.PortV4SearchRequest;
import java.util.UUID;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import static io.restassured.http.Method.*;

public class PortsApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private PortsApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static PortsApi ports(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new PortsApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                addToLag(),
                createBulkPort(),
                createPort(),
                deletePort(),
                getPortByUuid(),
                getPorts(),
                getVlans(),
                searchPorts()
        );
    }

    public AddToLagOper addToLag() {
        return new AddToLagOper(createReqSpec());
    }

    public CreateBulkPortOper createBulkPort() {
        return new CreateBulkPortOper(createReqSpec());
    }

    public CreatePortOper createPort() {
        return new CreatePortOper(createReqSpec());
    }

    public DeletePortOper deletePort() {
        return new DeletePortOper(createReqSpec());
    }

    public GetPortByUuidOper getPortByUuid() {
        return new GetPortByUuidOper(createReqSpec());
    }

    public GetPortsOper getPorts() {
        return new GetPortsOper(createReqSpec());
    }

    public GetVlansOper getVlans() {
        return new GetVlansOper(createReqSpec());
    }

    public SearchPortsOper searchPorts() {
        return new SearchPortsOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public PortsApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Add to Lag
     * Add Physical Ports to Virtual Port.&lt;font color&#x3D;\&quot;red\&quot;&gt; &lt;sup color&#x3D;&#39;red&#39;&gt;Preview&lt;/sup&gt;&lt;/font&gt;
     *
     * @see #portIdPath Port UUID (required)
     * @see #body  (required)
     * return AllPhysicalPortsResponse
     */
    public static class AddToLagOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/ports/{portId}/physicalPorts/bulk";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public AddToLagOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/ports/{portId}/physicalPorts/bulk
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/ports/{portId}/physicalPorts/bulk
         * @param handler handler
         * @return AllPhysicalPortsResponse
         */
        public AllPhysicalPortsResponse executeAs(Function<Response, Response> handler) {
            TypeRef<AllPhysicalPortsResponse> type = new TypeRef<AllPhysicalPortsResponse>(){};
            return execute(handler).as(type);
        }

         /**
         * @param bulkPhysicalPort (BulkPhysicalPort)  (required)
         * @return operation
         */
        public AddToLagOper body(BulkPhysicalPort bulkPhysicalPort) {
            reqSpec.setBody(bulkPhysicalPort);
            return this;
        }

        public static final String PORT_ID_PATH = "portId";

        /**
         * @param portId (UUID) Port UUID (required)
         * @return operation
         */
        public AddToLagOper portIdPath(Object portId) {
            reqSpec.addPathParam(PORT_ID_PATH, portId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public AddToLagOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public AddToLagOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Create Port
     * Create Port creates Equinix Fabric? Port.&lt;font color&#x3D;\&quot;red\&quot;&gt; &lt;sup color&#x3D;&#39;red&#39;&gt;Preview&lt;/sup&gt;&lt;/font&gt;
     *
     * @see #body  (required)
     * return AllPortsResponse
     */
    public static class CreateBulkPortOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/ports/bulk";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateBulkPortOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/ports/bulk
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/ports/bulk
         * @param handler handler
         * @return AllPortsResponse
         */
        public AllPortsResponse executeAs(Function<Response, Response> handler) {
            TypeRef<AllPortsResponse> type = new TypeRef<AllPortsResponse>(){};
            return execute(handler).as(type);
        }

         /**
         * @param bulkPort (BulkPort)  (required)
         * @return operation
         */
        public CreateBulkPortOper body(BulkPort bulkPort) {
            reqSpec.setBody(bulkPort);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateBulkPortOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateBulkPortOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Create Port
     * Creates Equinix Fabric? Port.
     *
     * @see #body  (required)
     * return Port
     */
    public static class CreatePortOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/ports";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreatePortOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/ports
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/ports
         * @param handler handler
         * @return Port
         */
        public Port executeAs(Function<Response, Response> handler) {
            TypeRef<Port> type = new TypeRef<Port>(){};
            return execute(handler).as(type);
        }

         /**
         * @param port (Port)  (required)
         * @return operation
         */
        public CreatePortOper body(Port port) {
            reqSpec.setBody(port);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreatePortOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreatePortOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Delete a single port
     * The API provides capability to delete a single port
     *
     * @see #portIdPath Port UUID (required)
     * return Port
     */
    public static class DeletePortOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/fabric/v4/ports/{portId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeletePortOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /fabric/v4/ports/{portId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * DELETE /fabric/v4/ports/{portId}
         * @param handler handler
         * @return Port
         */
        public Port executeAs(Function<Response, Response> handler) {
            TypeRef<Port> type = new TypeRef<Port>(){};
            return execute(handler).as(type);
        }

        public static final String PORT_ID_PATH = "portId";

        /**
         * @param portId (UUID) Port UUID (required)
         * @return operation
         */
        public DeletePortOper portIdPath(Object portId) {
            reqSpec.addPathParam(PORT_ID_PATH, portId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeletePortOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeletePortOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Port by uuid
     * Get Port By uuid returns details of assigned and available Equinix Fabric port for the specified user credentials. The metro code attribute in the response shows the origin of the proposed connection.
     *
     * @see #portIdPath Port UUID (required)
     * return Port
     */
    public static class GetPortByUuidOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/ports/{portId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetPortByUuidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/ports/{portId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/ports/{portId}
         * @param handler handler
         * @return Port
         */
        public Port executeAs(Function<Response, Response> handler) {
            TypeRef<Port> type = new TypeRef<Port>(){};
            return execute(handler).as(type);
        }

        public static final String PORT_ID_PATH = "portId";

        /**
         * @param portId (UUID) Port UUID (required)
         * @return operation
         */
        public GetPortByUuidOper portIdPath(Object portId) {
            reqSpec.addPathParam(PORT_ID_PATH, portId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetPortByUuidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetPortByUuidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get All Ports
     * Get All Ports returns details of all assigned and available ports for the specified user credentials. The metro attribute in the response shows the origin of the proposed connection.
     *
     * @see #nameQuery port name to be provided if specific port(s) to be retrieved (optional)
     * return AllPortsResponse
     */
    public static class GetPortsOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/ports";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetPortsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/ports
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/ports
         * @param handler handler
         * @return AllPortsResponse
         */
        public AllPortsResponse executeAs(Function<Response, Response> handler) {
            TypeRef<AllPortsResponse> type = new TypeRef<AllPortsResponse>(){};
            return execute(handler).as(type);
        }

        public static final String NAME_QUERY = "name";

        /**
         * @param name (String) port name to be provided if specific port(s) to be retrieved (optional)
         * @return operation
         */
        public GetPortsOper nameQuery(Object... name) {
            reqSpec.addQueryParam(NAME_QUERY, name);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetPortsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetPortsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get Vlans
     * The API provides capability to retrieve Vlans for a Port.
     *
     * @see #portUuidPath Port UUID (required)
     * return LinkProtocolGetResponse
     */
    public static class GetVlansOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/fabric/v4/ports/{portUuid}/linkProtocols";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetVlansOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /fabric/v4/ports/{portUuid}/linkProtocols
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /fabric/v4/ports/{portUuid}/linkProtocols
         * @param handler handler
         * @return LinkProtocolGetResponse
         */
        public LinkProtocolGetResponse executeAs(Function<Response, Response> handler) {
            TypeRef<LinkProtocolGetResponse> type = new TypeRef<LinkProtocolGetResponse>(){};
            return execute(handler).as(type);
        }

        public static final String PORT_UUID_PATH = "portUuid";

        /**
         * @param portUuid (UUID) Port UUID (required)
         * @return operation
         */
        public GetVlansOper portUuidPath(Object portUuid) {
            reqSpec.addPathParam(PORT_UUID_PATH, portUuid);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetVlansOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetVlansOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Search ports
     * The API provides capability to get list of user&#39;s virtual ports using search criteria, including optional filtering, pagination and sorting
     *
     * @see #body  (required)
     * return AllPortsResponse
     */
    public static class SearchPortsOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/fabric/v4/ports/search";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public SearchPortsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /fabric/v4/ports/search
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /fabric/v4/ports/search
         * @param handler handler
         * @return AllPortsResponse
         */
        public AllPortsResponse executeAs(Function<Response, Response> handler) {
            TypeRef<AllPortsResponse> type = new TypeRef<AllPortsResponse>(){};
            return execute(handler).as(type);
        }

         /**
         * @param portV4SearchRequest (PortV4SearchRequest)  (required)
         * @return operation
         */
        public SearchPortsOper body(PortV4SearchRequest portV4SearchRequest) {
            reqSpec.setBody(portV4SearchRequest);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public SearchPortsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public SearchPortsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
