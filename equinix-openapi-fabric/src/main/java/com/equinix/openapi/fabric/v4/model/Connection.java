/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Connection specification
 */
@JsonPropertyOrder({
  Connection.JSON_PROPERTY_TYPE,
  Connection.JSON_PROPERTY_HREF,
  Connection.JSON_PROPERTY_UUID,
  Connection.JSON_PROPERTY_NAME,
  Connection.JSON_PROPERTY_DESCRIPTION,
  Connection.JSON_PROPERTY_STATE,
  Connection.JSON_PROPERTY_CHANGE,
  Connection.JSON_PROPERTY_OPERATION,
  Connection.JSON_PROPERTY_ORDER,
  Connection.JSON_PROPERTY_NOTIFICATIONS,
  Connection.JSON_PROPERTY_ACCOUNT,
  Connection.JSON_PROPERTY_CHANGE_LOG,
  Connection.JSON_PROPERTY_BANDWIDTH,
  Connection.JSON_PROPERTY_GEO_SCOPE,
  Connection.JSON_PROPERTY_REDUNDANCY,
  Connection.JSON_PROPERTY_IS_REMOTE,
  Connection.JSON_PROPERTY_DIRECTION,
  Connection.JSON_PROPERTY_A_SIDE,
  Connection.JSON_PROPERTY_Z_SIDE,
  Connection.JSON_PROPERTY_ADDITIONAL_INFO,
  Connection.JSON_PROPERTY_PROJECT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Connection {
  public static final String JSON_PROPERTY_TYPE = "type";
  private ConnectionType type;

  public static final String JSON_PROPERTY_HREF = "href";
  private URI href;

  public static final String JSON_PROPERTY_UUID = "uuid";
  private String uuid;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_STATE = "state";
  private ConnectionState state;

  public static final String JSON_PROPERTY_CHANGE = "change";
  private Change change;

  public static final String JSON_PROPERTY_OPERATION = "operation";
  private ConnectionOperation operation;

  public static final String JSON_PROPERTY_ORDER = "order";
  private Order order;

  public static final String JSON_PROPERTY_NOTIFICATIONS = "notifications";
  private List<SimplifiedNotification> notifications = new ArrayList<>();

  public static final String JSON_PROPERTY_ACCOUNT = "account";
  private SimplifiedAccount account;

  public static final String JSON_PROPERTY_CHANGE_LOG = "changeLog";
  private Changelog changeLog;

  public static final String JSON_PROPERTY_BANDWIDTH = "bandwidth";
  private Integer bandwidth;

  public static final String JSON_PROPERTY_GEO_SCOPE = "geoScope";
  private GeoScopeType geoScope;

  public static final String JSON_PROPERTY_REDUNDANCY = "redundancy";
  private ConnectionRedundancy redundancy;

  public static final String JSON_PROPERTY_IS_REMOTE = "isRemote";
  private Boolean isRemote;

  public static final String JSON_PROPERTY_DIRECTION = "direction";
  private ConnectionDirection direction;

  public static final String JSON_PROPERTY_A_SIDE = "aSide";
  private ConnectionSide aSide;

  public static final String JSON_PROPERTY_Z_SIDE = "zSide";
  private ConnectionSide zSide;

  public static final String JSON_PROPERTY_ADDITIONAL_INFO = "additionalInfo";
  private List<ConnectionSideAdditionalInfo> additionalInfo = new ArrayList<>();

  public static final String JSON_PROPERTY_PROJECT = "project";
  private Project project;

  public Connection() {
  }

  @JsonCreator
  public Connection(
    @JsonProperty(JSON_PROPERTY_HREF) URI href
  ) {
    this();
    this.href = href;
  }

  public Connection type(ConnectionType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ConnectionType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(ConnectionType type) {
    this.type = type;
  }


   /**
   * Connection URI
   * @return href
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getHref() {
    return href;
  }




  public Connection uuid(String uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Equinix-assigned connection identifier
   * @return uuid
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUuid() {
    return uuid;
  }


  @JsonProperty(JSON_PROPERTY_UUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUuid(String uuid) {
    this.uuid = uuid;
  }


  public Connection name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Customer-provided connection name
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public Connection description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Customer-provided connection description
   * @return description
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public Connection state(ConnectionState state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConnectionState getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setState(ConnectionState state) {
    this.state = state;
  }


  public Connection change(Change change) {
    
    this.change = change;
    return this;
  }

   /**
   * Get change
   * @return change
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Change getChange() {
    return change;
  }


  @JsonProperty(JSON_PROPERTY_CHANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChange(Change change) {
    this.change = change;
  }


  public Connection operation(ConnectionOperation operation) {
    
    this.operation = operation;
    return this;
  }

   /**
   * Get operation
   * @return operation
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConnectionOperation getOperation() {
    return operation;
  }


  @JsonProperty(JSON_PROPERTY_OPERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperation(ConnectionOperation operation) {
    this.operation = operation;
  }


  public Connection order(Order order) {
    
    this.order = order;
    return this;
  }

   /**
   * Get order
   * @return order
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Order getOrder() {
    return order;
  }


  @JsonProperty(JSON_PROPERTY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrder(Order order) {
    this.order = order;
  }


  public Connection notifications(List<SimplifiedNotification> notifications) {
    
    this.notifications = notifications;
    return this;
  }

  public Connection addNotificationsItem(SimplifiedNotification notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

   /**
   * Preferences for notifications on connection configuration or status changes
   * @return notifications
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NOTIFICATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SimplifiedNotification> getNotifications() {
    return notifications;
  }


  @JsonProperty(JSON_PROPERTY_NOTIFICATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotifications(List<SimplifiedNotification> notifications) {
    this.notifications = notifications;
  }


  public Connection account(SimplifiedAccount account) {
    
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SimplifiedAccount getAccount() {
    return account;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccount(SimplifiedAccount account) {
    this.account = account;
  }


  public Connection changeLog(Changelog changeLog) {
    
    this.changeLog = changeLog;
    return this;
  }

   /**
   * Get changeLog
   * @return changeLog
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHANGE_LOG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Changelog getChangeLog() {
    return changeLog;
  }


  @JsonProperty(JSON_PROPERTY_CHANGE_LOG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChangeLog(Changelog changeLog) {
    this.changeLog = changeLog;
  }


  public Connection bandwidth(Integer bandwidth) {
    
    this.bandwidth = bandwidth;
    return this;
  }

   /**
   * Connection bandwidth in Mbps
   * minimum: 0
   * maximum: 10000
   * @return bandwidth
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getBandwidth() {
    return bandwidth;
  }


  @JsonProperty(JSON_PROPERTY_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBandwidth(Integer bandwidth) {
    this.bandwidth = bandwidth;
  }


  public Connection geoScope(GeoScopeType geoScope) {
    
    this.geoScope = geoScope;
    return this;
  }

   /**
   * Get geoScope
   * @return geoScope
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GEO_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public GeoScopeType getGeoScope() {
    return geoScope;
  }


  @JsonProperty(JSON_PROPERTY_GEO_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGeoScope(GeoScopeType geoScope) {
    this.geoScope = geoScope;
  }


  public Connection redundancy(ConnectionRedundancy redundancy) {
    
    this.redundancy = redundancy;
    return this;
  }

   /**
   * Get redundancy
   * @return redundancy
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REDUNDANCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConnectionRedundancy getRedundancy() {
    return redundancy;
  }


  @JsonProperty(JSON_PROPERTY_REDUNDANCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRedundancy(ConnectionRedundancy redundancy) {
    this.redundancy = redundancy;
  }


  public Connection isRemote(Boolean isRemote) {
    
    this.isRemote = isRemote;
    return this;
  }

   /**
   * Connection property derived from access point locations
   * @return isRemote
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_REMOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsRemote() {
    return isRemote;
  }


  @JsonProperty(JSON_PROPERTY_IS_REMOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsRemote(Boolean isRemote) {
    this.isRemote = isRemote;
  }


  public Connection direction(ConnectionDirection direction) {
    
    this.direction = direction;
    return this;
  }

   /**
   * Get direction
   * @return direction
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConnectionDirection getDirection() {
    return direction;
  }


  @JsonProperty(JSON_PROPERTY_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDirection(ConnectionDirection direction) {
    this.direction = direction;
  }


  public Connection aSide(ConnectionSide aSide) {
    
    this.aSide = aSide;
    return this;
  }

   /**
   * Get aSide
   * @return aSide
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_A_SIDE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ConnectionSide getaSide() {
    return aSide;
  }


  @JsonProperty(JSON_PROPERTY_A_SIDE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setaSide(ConnectionSide aSide) {
    this.aSide = aSide;
  }


  public Connection zSide(ConnectionSide zSide) {
    
    this.zSide = zSide;
    return this;
  }

   /**
   * Get zSide
   * @return zSide
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_Z_SIDE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ConnectionSide getzSide() {
    return zSide;
  }


  @JsonProperty(JSON_PROPERTY_Z_SIDE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setzSide(ConnectionSide zSide) {
    this.zSide = zSide;
  }


  public Connection additionalInfo(List<ConnectionSideAdditionalInfo> additionalInfo) {
    
    this.additionalInfo = additionalInfo;
    return this;
  }

  public Connection addAdditionalInfoItem(ConnectionSideAdditionalInfo additionalInfoItem) {
    if (this.additionalInfo == null) {
      this.additionalInfo = new ArrayList<>();
    }
    this.additionalInfo.add(additionalInfoItem);
    return this;
  }

   /**
   * Connection additional information
   * @return additionalInfo
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ConnectionSideAdditionalInfo> getAdditionalInfo() {
    return additionalInfo;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalInfo(List<ConnectionSideAdditionalInfo> additionalInfo) {
    this.additionalInfo = additionalInfo;
  }


  public Connection project(Project project) {
    
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Project getProject() {
    return project;
  }


  @JsonProperty(JSON_PROPERTY_PROJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProject(Project project) {
    this.project = project;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Connection connection = (Connection) o;
    return Objects.equals(this.type, connection.type) &&
        Objects.equals(this.href, connection.href) &&
        Objects.equals(this.uuid, connection.uuid) &&
        Objects.equals(this.name, connection.name) &&
        Objects.equals(this.description, connection.description) &&
        Objects.equals(this.state, connection.state) &&
        Objects.equals(this.change, connection.change) &&
        Objects.equals(this.operation, connection.operation) &&
        Objects.equals(this.order, connection.order) &&
        Objects.equals(this.notifications, connection.notifications) &&
        Objects.equals(this.account, connection.account) &&
        Objects.equals(this.changeLog, connection.changeLog) &&
        Objects.equals(this.bandwidth, connection.bandwidth) &&
        Objects.equals(this.geoScope, connection.geoScope) &&
        Objects.equals(this.redundancy, connection.redundancy) &&
        Objects.equals(this.isRemote, connection.isRemote) &&
        Objects.equals(this.direction, connection.direction) &&
        Objects.equals(this.aSide, connection.aSide) &&
        Objects.equals(this.zSide, connection.zSide) &&
        Objects.equals(this.additionalInfo, connection.additionalInfo) &&
        Objects.equals(this.project, connection.project);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, href, uuid, name, description, state, change, operation, order, notifications, account, changeLog, bandwidth, geoScope, redundancy, isRemote, direction, aSide, zSide, additionalInfo, project);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Connection {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    change: ").append(toIndentedString(change)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    changeLog: ").append(toIndentedString(changeLog)).append("\n");
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("    geoScope: ").append(toIndentedString(geoScope)).append("\n");
    sb.append("    redundancy: ").append(toIndentedString(redundancy)).append("\n");
    sb.append("    isRemote: ").append(toIndentedString(isRemote)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    aSide: ").append(toIndentedString(aSide)).append("\n");
    sb.append("    zSide: ").append(toIndentedString(zSide)).append("\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

