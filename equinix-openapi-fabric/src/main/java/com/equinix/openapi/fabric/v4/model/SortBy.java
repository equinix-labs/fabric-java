/*
 * Equinix Fabric API v4
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Possible field names to use on sorting
 */
@JsonAdapter(SortBy.Adapter.class)
public enum SortBy {
  
  NAME("/name"),
  
  DIRECTION("/direction"),
  
  ASIDE_ACCESSPOINT_NAME("/aSide/accessPoint/name"),
  
  ASIDE_ACCESSPOINT_TYPE("/aSide/accessPoint/type"),
  
  ASIDE_ACCESSPOINT_ACCOUNT_ACCOUNTNAME("/aSide/accessPoint/account/accountName"),
  
  ASIDE_ACCESSPOINT_LOCATION_METRONAME("/aSide/accessPoint/location/metroName"),
  
  ASIDE_ACCESSPOINT_LOCATION_METROCODE("/aSide/accessPoint/location/metroCode"),
  
  ASIDE_ACCESSPOINT_LINKPROTOCOL_VLANCTAG("/aSide/accessPoint/linkProtocol/vlanCTag"),
  
  ASIDE_ACCESSPOINT_LINKPROTOCOL_VLANSTAG("/aSide/accessPoint/linkProtocol/vlanSTag"),
  
  ZSIDE_ACCESSPOINT_NAME("/zSide/accessPoint/name"),
  
  ZSIDE_ACCESSPOINT_TYPE("/zSide/accessPoint/type"),
  
  ZSIDE_ACCESSPOINT_ACCOUNT_ACCOUNTNAME("/zSide/accessPoint/account/accountName"),
  
  ZSIDE_ACCESSPOINT_LOCATION_METRONAME("/zSide/accessPoint/location/metroName"),
  
  ZSIDE_ACCESSPOINT_LOCATION_METROCODE("/zSide/accessPoint/location/metroCode"),
  
  ZSIDE_ACCESSPOINT_LINKPROTOCOL_VLANCTAG("/zSide/accessPoint/linkProtocol/vlanCTag"),
  
  ZSIDE_ACCESSPOINT_LINKPROTOCOL_VLANSTAG("/zSide/accessPoint/linkProtocol/vlanSTag"),
  
  ZSIDE_ACCESSPOINT_AUTHENTICATIONKEY("/zSide/accessPoint/authenticationKey"),
  
  BANDWIDTH("/bandwidth"),
  
  GEOSCOPE("/geoScope"),
  
  UUID("/uuid"),
  
  CHANGELOG_CREATEDDATETIME("/changeLog/createdDateTime"),
  
  CHANGELOG_UPDATEDDATETIME("/changeLog/updatedDateTime"),
  
  OPERATION_EQUINIXSTATUS("/operation/equinixStatus"),
  
  OPERATION_PROVIDERSTATUS("/operation/providerStatus"),
  
  REDUNDANCY_PRIORITY("/redundancy/priority");

  private String value;

  SortBy(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static SortBy fromValue(String value) {
    for (SortBy b : SortBy.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<SortBy> {
    @Override
    public void write(final JsonWriter jsonWriter, final SortBy enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public SortBy read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return SortBy.fromValue(value);
    }
  }
}

