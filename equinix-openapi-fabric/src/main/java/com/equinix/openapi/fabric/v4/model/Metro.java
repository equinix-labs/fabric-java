/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.model;

import com.equinix.openapi.fabric.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * GET Metros retrieves all Equinix? Fabric? metros, as well as latency data for each location.This performance data helps network planning engineers and administrators make strategic decisions about port locations and traffic routes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Metro {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EQUINIX_ASN = "equinixAsn";
  @SerializedName(SERIALIZED_NAME_EQUINIX_ASN)
  private Long equinixAsn;

  public static final String SERIALIZED_NAME_LOCAL_V_C_BANDWIDTH_MAX = "localVCBandwidthMax";
  @SerializedName(SERIALIZED_NAME_LOCAL_V_C_BANDWIDTH_MAX)
  private Long localVCBandwidthMax;

  public static final String SERIALIZED_NAME_GEO_COORDINATES = "geoCoordinates";
  @SerializedName(SERIALIZED_NAME_GEO_COORDINATES)
  private GeoCoordinates geoCoordinates;

  public static final String SERIALIZED_NAME_CONNECTED_METROS = "connectedMetros";
  @SerializedName(SERIALIZED_NAME_CONNECTED_METROS)
  private List<ConnectedMetro> connectedMetros = new ArrayList<>();

  public static final String SERIALIZED_NAME_GEO_SCOPES = "geoScopes";
  @SerializedName(SERIALIZED_NAME_GEO_SCOPES)
  private List<GeoScopeType> geoScopes = new ArrayList<>();

  public Metro() {
  }

  public Metro href(String href) {
    
    this.href = href;
    return this;
  }

   /**
   * The Canonical URL at which the resource resides.
   * @return href
  **/
  @javax.annotation.Nullable

  public String getHref() {
    return href;
  }


  public void setHref(String href) {
    this.href = href;
  }


  public Metro type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Indicator of a Fabric Metro
   * @return type
  **/
  @javax.annotation.Nullable

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public Metro code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * Code Assigned to an Equinix IBX data center in a specified metropolitan area.
   * @return code
  **/
  @javax.annotation.Nullable

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public Metro region(String region) {
    
    this.region = region;
    return this;
  }

   /**
   * Board geographic area in which the data center is located
   * @return region
  **/
  @javax.annotation.Nullable

  public String getRegion() {
    return region;
  }


  public void setRegion(String region) {
    this.region = region;
  }


  public Metro name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the region in which the data center is located.
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Metro equinixAsn(Long equinixAsn) {
    
    this.equinixAsn = equinixAsn;
    return this;
  }

   /**
   * Autonomous system number (ASN) for a specified Fabric metro. The ASN is a unique identifier that carries the network routing protocol and exchanges that data with other internal systems via border gateway protocol.
   * @return equinixAsn
  **/
  @javax.annotation.Nullable

  public Long getEquinixAsn() {
    return equinixAsn;
  }


  public void setEquinixAsn(Long equinixAsn) {
    this.equinixAsn = equinixAsn;
  }


  public Metro localVCBandwidthMax(Long localVCBandwidthMax) {
    
    this.localVCBandwidthMax = localVCBandwidthMax;
    return this;
  }

   /**
   * This field holds Max Connection speed with in the metro
   * @return localVCBandwidthMax
  **/
  @javax.annotation.Nullable

  public Long getLocalVCBandwidthMax() {
    return localVCBandwidthMax;
  }


  public void setLocalVCBandwidthMax(Long localVCBandwidthMax) {
    this.localVCBandwidthMax = localVCBandwidthMax;
  }


  public Metro geoCoordinates(GeoCoordinates geoCoordinates) {
    
    this.geoCoordinates = geoCoordinates;
    return this;
  }

   /**
   * Get geoCoordinates
   * @return geoCoordinates
  **/
  @javax.annotation.Nullable

  public GeoCoordinates getGeoCoordinates() {
    return geoCoordinates;
  }


  public void setGeoCoordinates(GeoCoordinates geoCoordinates) {
    this.geoCoordinates = geoCoordinates;
  }


  public Metro connectedMetros(List<ConnectedMetro> connectedMetros) {
    
    this.connectedMetros = connectedMetros;
    return this;
  }

  public Metro addConnectedMetrosItem(ConnectedMetro connectedMetrosItem) {
    if (this.connectedMetros == null) {
      this.connectedMetros = new ArrayList<>();
    }
    this.connectedMetros.add(connectedMetrosItem);
    return this;
  }

   /**
   * Get connectedMetros
   * @return connectedMetros
  **/
  @javax.annotation.Nullable

  public List<ConnectedMetro> getConnectedMetros() {
    return connectedMetros;
  }


  public void setConnectedMetros(List<ConnectedMetro> connectedMetros) {
    this.connectedMetros = connectedMetros;
  }


  public Metro geoScopes(List<GeoScopeType> geoScopes) {
    
    this.geoScopes = geoScopes;
    return this;
  }

  public Metro addGeoScopesItem(GeoScopeType geoScopesItem) {
    if (this.geoScopes == null) {
      this.geoScopes = new ArrayList<>();
    }
    this.geoScopes.add(geoScopesItem);
    return this;
  }

   /**
   * List of supported geographic boundaries of a Fabric Metro.
   * @return geoScopes
  **/
  @javax.annotation.Nullable

  public List<GeoScopeType> getGeoScopes() {
    return geoScopes;
  }


  public void setGeoScopes(List<GeoScopeType> geoScopes) {
    this.geoScopes = geoScopes;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Metro instance itself
   */
  public Metro putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Metro metro = (Metro) o;
    return Objects.equals(this.href, metro.href) &&
        Objects.equals(this.type, metro.type) &&
        Objects.equals(this.code, metro.code) &&
        Objects.equals(this.region, metro.region) &&
        Objects.equals(this.name, metro.name) &&
        Objects.equals(this.equinixAsn, metro.equinixAsn) &&
        Objects.equals(this.localVCBandwidthMax, metro.localVCBandwidthMax) &&
        Objects.equals(this.geoCoordinates, metro.geoCoordinates) &&
        Objects.equals(this.connectedMetros, metro.connectedMetros) &&
        Objects.equals(this.geoScopes, metro.geoScopes)&&
        Objects.equals(this.additionalProperties, metro.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, type, code, region, name, equinixAsn, localVCBandwidthMax, geoCoordinates, connectedMetros, geoScopes, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Metro {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    equinixAsn: ").append(toIndentedString(equinixAsn)).append("\n");
    sb.append("    localVCBandwidthMax: ").append(toIndentedString(localVCBandwidthMax)).append("\n");
    sb.append("    geoCoordinates: ").append(toIndentedString(geoCoordinates)).append("\n");
    sb.append("    connectedMetros: ").append(toIndentedString(connectedMetros)).append("\n");
    sb.append("    geoScopes: ").append(toIndentedString(geoScopes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("href");
    openapiFields.add("type");
    openapiFields.add("code");
    openapiFields.add("region");
    openapiFields.add("name");
    openapiFields.add("equinixAsn");
    openapiFields.add("localVCBandwidthMax");
    openapiFields.add("geoCoordinates");
    openapiFields.add("connectedMetros");
    openapiFields.add("geoScopes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Metro
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Metro.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Metro is not found in the empty JSON string", Metro.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `geoCoordinates`
      if (jsonObj.get("geoCoordinates") != null && !jsonObj.get("geoCoordinates").isJsonNull()) {
        GeoCoordinates.validateJsonObject(jsonObj.getAsJsonObject("geoCoordinates"));
      }
      if (jsonObj.get("connectedMetros") != null && !jsonObj.get("connectedMetros").isJsonNull()) {
        JsonArray jsonArrayconnectedMetros = jsonObj.getAsJsonArray("connectedMetros");
        if (jsonArrayconnectedMetros != null) {
          // ensure the json data is an array
          if (!jsonObj.get("connectedMetros").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `connectedMetros` to be an array in the JSON string but got `%s`", jsonObj.get("connectedMetros").toString()));
          }

          // validate the optional field `connectedMetros` (array)
          for (int i = 0; i < jsonArrayconnectedMetros.size(); i++) {
            ConnectedMetro.validateJsonObject(jsonArrayconnectedMetros.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("geoScopes") != null && !jsonObj.get("geoScopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `geoScopes` to be an array in the JSON string but got `%s`", jsonObj.get("geoScopes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Metro.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Metro' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Metro> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Metro.class));

       return (TypeAdapter<T>) new TypeAdapter<Metro>() {
           @Override
           public void write(JsonWriter out, Metro value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Metro read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Metro instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Metro given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Metro
  * @throws IOException if the JSON string is invalid with respect to Metro
  */
  public static Metro fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Metro.class);
  }

 /**
  * Convert an instance of Metro to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

