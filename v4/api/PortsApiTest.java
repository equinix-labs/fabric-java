/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.ApiException;
import com.equinix.openapi.fabric.v4.api.dto.port.PortDto;
import com.equinix.openapi.fabric.v4.api.dto.users.UsersItem;
import com.equinix.openapi.fabric.v4.model.*;
import org.junit.Test;

import java.util.List;

import static java.util.Collections.singletonList;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * API tests for PortsApi
 */
public class PortsApiTest {

    private static final UsersItem.UserName userName = UsersItem.UserName.PANTHERS_FNV;
    private static final PortsApi api = new PortsApi(TokenGenerator.getApiClient(userName));

    /**
     * Successful operation
     */
    @Test
    public void getPort() throws ApiException {
        PortDto portDto = (PortDto) Utils.getEnvData(Utils.EnvVariable.QINQ_PORT);
        Port port = api.getPorts(portDto.getName()).getData().get(0);
        assertEquals(200, api.getApiClient().getStatusCode());
        assertEquals(port.getName(), portDto.getName());
        assertEquals(port.getUuid().toString(), portDto.getUuid());
    }

    @Test
    public void searchPorts() throws ApiException {
        List<Port> ports = getPorts(userName).getData();
        assertEquals(200, api.getApiClient().getStatusCode());
        assertTrue(!ports.isEmpty());
    }

    public static AllPortsResponse getPorts(UsersItem.UserName userName) throws ApiException {
        UsersItem user = Utils.getUserData(userName);

        PortsApi apiLocal = new PortsApi(TokenGenerator.getApiClient(userName));

        PortV4SearchRequest portV4SearchRequest = new PortV4SearchRequest()
                .filter(new PortExpression().addOrItem(new PortExpression()
                        .addAndItem(new PortExpression()
                                .operator(PortExpression.OperatorEnum.EQUAL)
                                .property(PortSearchFieldName.STATE)
                                .values(singletonList("ACTIVE")))
                        .addAndItem(new PortExpression()
                                .operator(PortExpression.OperatorEnum.EQUAL)
                                .property(PortSearchFieldName.PROJECT_PROJECTID)
                                .values(singletonList(user.getProjectId())))
                        .addAndItem(new PortExpression()
                                .operator(PortExpression.OperatorEnum.EQUAL)
                                .property(PortSearchFieldName.SETTINGS_PRODUCTCODE)
                                .values(singletonList("CX"))
                        )))
                .pagination(new PaginationRequest()
                        .offset(0)
                        .limit(100))
                .sort(singletonList(new PortSortCriteria().property(PortSortBy._DEVICE_NAME).direction(PortSortDirection.DESC)));

        return apiLocal.searchPorts(portV4SearchRequest);
    }
}
