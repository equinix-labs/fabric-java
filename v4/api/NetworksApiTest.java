/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.ApiException;
import com.equinix.openapi.fabric.v4.api.dto.users.UsersItem;
import com.equinix.openapi.fabric.v4.model.*;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Test;

import java.util.UUID;

import static com.equinix.openapi.fabric.v4.api.TokenGenerator.users;
import static java.util.Collections.singletonList;
import static org.junit.jupiter.api.Assertions.*;

/**
 * API tests for NetworksApi
 */
class NetworksApiTest {
    private static final UsersItem.UserName userName = UsersItem.UserName.PANTHERS_FNV;
    private static final NetworksApi api = new NetworksApi(TokenGenerator.getApiClient(userName));

    public static void removeNetworks(UsersItem.UserName userName) {
        users.get(userName).getUserResources().getNetworksUuid().forEach(NetworksApiTest::deleteNetwork);
    }

    @AfterAll
    public static void removeResources() {
        removeNetworks(userName);
    }

    public Network createNetwork() throws ApiException {
        UsersItem user = Utils.getUserData(userName);
        NetworkPostRequest networkPostRequest = new NetworkPostRequest()
                .name("network_panthers_test")
                .type(NetworkType.EVPLAN)
                .scope(NetworkScope.LOCAL)
                .project(new Project().projectId(user.getProjectId()))
                .notifications(singletonList(new SimplifiedNotification()
                        .type(SimplifiedNotification.TypeEnum.ALL).emails(singletonList("test@equinix.com"))));

        Network network = api.createNetwork(networkPostRequest);
        assertEquals(201, api.getApiClient().getStatusCode());

        for (int i = 0; i < 5; i++) {
            Network networkGet = api.getNetworkByUuid(network.getUuid());

            if (networkGet.getState().equals(NetworkState.ACTIVE)) {
                break;
            }
            try {
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }

        users.get(userName).getUserResources().addNetworkUuid(network.getUuid());
        return network;
    }

    /**
     * Fabric Network Access point object
     */
    @Test
    public void validateNetworkCreation() throws ApiException {
        createNetwork();
    }

    public static void deleteNetwork(UUID uuid) {
        try {
            api.deleteNetworkByUuid(uuid);
            assertEquals(202, api.getApiClient().getStatusCode());
        } catch (ApiException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Fabric Network Access point object
     */
    @Test
    public void deleteNetworkByUuid() throws ApiException {
        Network network = createNetwork();
        deleteNetwork(network.getUuid());
    }

    /**
     * Fabric Network Access point object
     */
    @Test
    public void getNetworkByUuid() throws ApiException {
        Network network = createNetwork();
        Network networkGetResponse = api.getNetworkByUuid(network.getUuid());
        assertEquals(200, api.getApiClient().getStatusCode());
        assertEquals(network.getUuid(), networkGetResponse.getUuid());
        assertEquals(network.getName(), networkGetResponse.getName());
    }

    /**
     * Fabric Network Access point object
     */
    @Test
    public void updateNetwork() throws ApiException {
        String updatedName = "network_new_updatedName";
        Network network = createNetwork();
        NetworkChangeOperation changeOperation = new NetworkChangeOperation()
                .op(NetworkChangeOperation.OpEnum.REPLACE)
                .path(NetworkSearchFieldName.NAME.getValue())
                .value(updatedName);

        Network networkPutResponse = api.updateNetworkByUuid(network.getUuid(), singletonList(changeOperation));
        assertEquals(200, api.getApiClient().getStatusCode());
        assertEquals(updatedName, networkPutResponse.getName());
    }

    /**
     * Fabric Network Access point object
     */
    @Test
    public void searchNetwork() throws ApiException {
        Network network = createNetwork();
        NetworkSearchRequest networkSearchRequest = new NetworkSearchRequest()
                .filter(new NetworkFilter().addAndItem(new NetworkFilter()
                        .property(NetworkSearchFieldName.UUID)
                        .operator(NetworkFilter.OperatorEnum.EQUAL)
                        .values(singletonList(String.valueOf(network.getUuid())))))
                .sort(singletonList(new NetworkSortCriteria().direction(NetworkSortDirection.DESC).property(NetworkSortBy.CHANGELOG_CREATEDDATETIME)))
                .pagination(new PaginationRequest().offset(0).limit(20));

        NetworkSearchResponse networkSearchResponse=api.searchNetworks(networkSearchRequest);

        assertEquals(200, api.getApiClient().getStatusCode());
        assertFalse(networkSearchResponse.getData().isEmpty());
    }
}
