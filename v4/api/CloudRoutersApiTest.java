/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.v4.api.dto.UserDto;
import com.equinix.openapi.fabric.v4.model.*;
import io.restassured.response.Response;
import org.apache.http.HttpStatus;
import org.junit.AfterClass;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static java.util.Collections.singletonList;
import static org.junit.Assert.*;

/**
 * API tests for CloudRoutersApi
 */
public class CloudRoutersApiTest {

    private static final List<UUID> cloudRouterToDelete = new ArrayList<>();
    private static CloudRoutersApi api = TokenGenerator.getApiClient().cloudRouters();

    public static void removeCloudRouters() {
        cloudRouterToDelete.forEach(uuid -> {
            if (getCloudRouterStatus(uuid) == CloudRouterAccessPointState.PROVISIONED) {
                deleteCloudRouter(uuid);
            }
        });
    }

    @AfterClass
    public static void removeResources() {
        removeCloudRouters();
    }

    public CloudRouter createRouter() {
        UserDto userDto = (UserDto) Utils.getEnvData(Utils.EnvVariable.TEST_DATA_UAT_FCR_USER);
        String cloudRouterName = "panthers-test-java-sdk";
        CloudRouterPostRequest cloudRouterPostRequest = new CloudRouterPostRequest();
        cloudRouterPostRequest.type(CloudRouterPostRequest.TypeEnum.XF_ROUTER)
                .name(cloudRouterName)
                .location(new SimplifiedLocationWithoutIBX().metroCode("SV"))
                ._package(new CloudRouterPostRequestPackage().code(CloudRouterPostRequestPackage.CodeEnum.STANDARD))
                .notifications(singletonList(new SimplifiedNotification().type(SimplifiedNotification.TypeEnum.ALL).emails(singletonList("test@test.com"))))
                .project(new Project().projectId(userDto.getProjectId()))
                .account(new SimplifiedAccount().accountNumber(Long.valueOf(userDto.getAccountNumber()))
                );

        Response response = api.createCloudRouter()
                .body(cloudRouterPostRequest)
                .execute(r -> r);

        CloudRouter cloudRouter = response.as(CloudRouter.class);
        cloudRouterToDelete.add(cloudRouter.getUuid());
        assertEquals(HttpStatus.SC_OK, response.getStatusCode());

        UUID cloudRouterUuid = cloudRouter.getUuid();

        for (int i = 0; i < 5; i++) {
            cloudRouter = api.getCloudRouterByUuid()
                    .routerIdPath(cloudRouterUuid)
                    .execute(re -> re).as(CloudRouter.class);

            if (cloudRouter.getState().equals(CloudRouterAccessPointState.PROVISIONED)) {
                break;
            }
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }
        return cloudRouter;
    }

    /**
     * Fabric Cloud Router object
     */
    @Test
    public void createCloudRouter() {
        createRouter();
    }

    /**
     * Successful operation
     */
    @Test
    public void createCloudRouterAction() {
        Response response = api.createCloudRouterAction()
                .routerIdPath(createRouter().getUuid())
                .body(new CloudRouterActionRequest().type(CloudRouterActionType.ROUTE_TABLE_ENTRY_UPDATE))
                .execute(r -> r);
        assertEquals(HttpStatus.SC_ACCEPTED, response.getStatusCode());
    }

    /**
     * Deleted Cloud Router Successfully
     */
    @Test
    public void deleteCloudRouterByUuid() {
        deleteCloudRouter(createRouter().getUuid());
    }

    /**
     * Successful operation
     */
    @Test
    public void getCloudRouterActions() {
        CloudRouter cloudRouter = createRouter();
        api.createCloudRouterAction()
                .routerIdPath(cloudRouter.getUuid())
                .body(new CloudRouterActionRequest().type(CloudRouterActionType.ROUTE_TABLE_ENTRY_UPDATE))
                .execute(r -> r);

        Response response = api.getCloudRouterActions()
                .routerIdPath(cloudRouter.getUuid())
                .stateQuery(CloudRouterActionState.DONE, CloudRouterActionState.PENDING)
                .execute(r -> r);
        CloudRouterActionResponse cloudRouterActionResponse = response.as(CloudRouterActionResponse.class);
        assertEquals(HttpStatus.SC_OK, response.getStatusCode());
        assertEquals(cloudRouterActionResponse.getType(), CloudRouterActionType.ROUTE_TABLE_ENTRY_UPDATE);
    }

    /**
     * Fabric Cloud Router object
     */
    @Test
    public void getCloudRouterByUuid() {
        CloudRouter cloudRouter = createRouter();

        Response response = api.getCloudRouterByUuid()
                .routerIdPath(cloudRouter.getUuid())
                .execute(r -> r);

        CloudRouter cloudRouterRead = response.as(CloudRouter.class);
        assertEquals(HttpStatus.SC_OK, response.getStatusCode());
        assertEquals(cloudRouter.getUuid(), cloudRouterRead.getUuid());
        assertEquals(cloudRouter.getName(), cloudRouterRead.getName());
        assertEquals(cloudRouter.getState(), cloudRouterRead.getState());
    }

    /**
     * Fabric Cloud Router Package details
     */
    @Test
    public void getCloudRouterPackageByCode() {
        Code routerPackageCode = Code.STANDARD;
        Response response = api.getCloudRouterPackageByCode()
                .routerPackageCodePath(routerPackageCode)
                .execute(r -> r);
        CloudRouterPackage cloudRouterPackage = response.as(CloudRouterPackage.class);
        assertEquals(HttpStatus.SC_OK, response.getStatusCode());
        assertEquals(cloudRouterPackage.getCode(), routerPackageCode);
    }

    /**
     * Fabric Cloud Router Packages
     */
    @Test
    public void getCloudRouterPackages() {
        Response response = api.getCloudRouterPackages()
                .offsetQuery(10)
                .limitQuery(10)
                .execute(r -> r);
        PackageResponse packageResponse = response.as(PackageResponse.class);
        assertEquals(HttpStatus.SC_OK, response.getStatusCode());
        assertNotNull(packageResponse.getData());
    }

    /**
     * Successful operation
     */
    @Test
    public void searchCloudRouterRoutes() {
        RouteTableEntrySearchRequest routeTableEntrySearchRequest = new RouteTableEntrySearchRequest()
                .filter(new RouteTableEntryFilters()
                        .addAndItem(new RouteTableEntryFilter()
                                .property(SortItem.PropertyEnum.STATE.getValue())
                                .operator(SearchExpression.OperatorEnum.NOT_EQUAL.getValue())
                                .values(singletonList("ACTIVE"))))
                .pagination(new PaginationRequest().offset(10).limit(20))
                .sort(singletonList(new RouteTableEntrySortCriteria()
                        .direction(RouteTableEntrySortDirection.DESC)
                        .property(RouteTableEntrySortBy.CHANGELOG_CREATEDDATETIME)));

        Response response = api.searchCloudRouterRoutes()
                .routerIdPath(createRouter().getUuid())
                .body(routeTableEntrySearchRequest).execute(r -> r);
        assertEquals(HttpStatus.SC_OK, response.getStatusCode());
    }

    /**
     * Successful operation
     */
    @Test
    public void searchCloudRouters() {
        CloudRouter cloudRouter = createRouter();

        CloudRouterSearchRequest cloudRouterSearchRequest = new CloudRouterSearchRequest()
                .filter(new CloudRouterFilters()
                        .addAndItem(new CloudRouterFilter()
                                .property(SortItem.PropertyEnum.NAME.getValue())
                                .operator(SearchExpression.OperatorEnum.EQUAL.getValue())
                                .values(singletonList(cloudRouter.getName())))
                        .addAndItem(new CloudRouterFilter()
                                .property(SortItem.PropertyEnum.STATE.getValue())
                                .operator(SearchExpression.OperatorEnum.EQUAL.getValue())
                                .values(singletonList(cloudRouter.getState().getValue()))))
                .pagination(new PaginationRequest().offset(10).limit(20))
                .sort(singletonList(new CloudRouterSortCriteria()
                        .direction(CloudRouterSortDirection.DESC)
                        .property(CloudRouterSortBy.CHANGELOG_CREATEDDATETIME)));

        Response response = api.searchCloudRouters()
                .body(cloudRouterSearchRequest).execute(r -> r);
        assertEquals(HttpStatus.SC_OK, response.getStatusCode());

        SearchResponse searchResponse = response.as(SearchResponse.class);

        boolean found = searchResponse.getData().stream().anyMatch(router -> router.getName().equals(cloudRouter.getName()));
        assertTrue(found);
    }

    /**
     * Fabric Cloud Router object
     */
    @Test
    public void updateCloudRouterByUuid() {
        CloudRouter cloudRouter = createRouter();
        String updatedName = "panthers_newfcr_name";

        CloudRouterChangeOperation cloudRouterChangeOperation = new CloudRouterChangeOperation()
                .op(CloudRouterChangeOperation.OpEnum.REPLACE)
                .path(CloudRouterSortBy.NAME.getValue())
                .value(updatedName);

        Response response = api.updateCloudRouterByUuid()
                .routerIdPath(cloudRouter.getUuid())
                .body(singletonList(cloudRouterChangeOperation)).execute(r -> r);

        CloudRouter updatedCloudRouter = response.as(CloudRouter.class);
        assertEquals(HttpStatus.SC_OK, response.getStatusCode());
        assertEquals(updatedName, updatedCloudRouter.getName());
    }

    private static void deleteCloudRouter(UUID uuid) {
        Response response = api.deleteCloudRouterByUuid()
                .routerIdPath(uuid)
                .execute(r -> r);
        assertEquals(HttpStatus.SC_NO_CONTENT, response.getStatusCode());
    }

    private static CloudRouterAccessPointState getCloudRouterStatus(UUID cloudRouterUuid) {
        return api.getCloudRouterByUuid()
                .routerIdPath(cloudRouterUuid)
                .execute(re -> re).as(CloudRouter.class).getState();
    }
}
