/*
 * Equinix Fabric API v4
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.api;

import java.math.BigDecimal;
import com.equinix.openapi.fabric.v4.model.Error;
import com.equinix.openapi.fabric.v4.model.ServiceToken;
import com.equinix.openapi.fabric.v4.model.ServiceTokenActionRequest;
import com.equinix.openapi.fabric.v4.model.ServiceTokenChangeOperation;
import com.equinix.openapi.fabric.v4.model.ServiceTokenSearchRequest;
import com.equinix.openapi.fabric.v4.model.ServiceTokens;
import java.util.UUID;
import com.equinix.openapi.fabric.ApiClient;
import com.equinix.openapi.fabric.v4.api.ServiceTokensApi;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.ErrorLoggingFilter;
import org.junit.Before;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import static io.restassured.config.ObjectMapperConfig.objectMapperConfig;
import static io.restassured.config.RestAssuredConfig.config;
import static com.equinix.openapi.fabric.JacksonObjectMapper.jackson;

/**
 * API tests for ServiceTokensApi
 */
@Ignore
public class ServiceTokensApiTest {

    private ServiceTokensApi api;

    @Before
    public void createApi() {
        api = ApiClient.api(ApiClient.Config.apiConfig().reqSpecSupplier(
                () -> new RequestSpecBuilder()
                        .setConfig(config().objectMapperConfig(objectMapperConfig().defaultObjectMapper(jackson())))
                        .addFilter(new ErrorLoggingFilter())
                        .setBaseUri("https://api.equinix.com"))).serviceTokens();
    }

    /**
     * Successful operation
     */
    @Test
    public void shouldSee201AfterCreateServiceToken() {
        ServiceToken serviceToken = null;
        api.createServiceToken()
                .body(serviceToken).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Bad request
     */
    @Test
    public void shouldSee400AfterCreateServiceToken() {
        ServiceToken serviceToken = null;
        api.createServiceToken()
                .body(serviceToken).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Unauthorized
     */
    @Test
    public void shouldSee401AfterCreateServiceToken() {
        ServiceToken serviceToken = null;
        api.createServiceToken()
                .body(serviceToken).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Forbidden
     */
    @Test
    public void shouldSee403AfterCreateServiceToken() {
        ServiceToken serviceToken = null;
        api.createServiceToken()
                .body(serviceToken).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Successful operation
     */
    @Test
    public void shouldSee202AfterCreateServiceTokenAction() {
        UUID serviceTokenId = null;
        ServiceTokenActionRequest serviceTokenActionRequest = null;
        api.createServiceTokenAction()
                .serviceTokenIdPath(serviceTokenId)
                .body(serviceTokenActionRequest).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Bad request
     */
    @Test
    public void shouldSee400AfterCreateServiceTokenAction() {
        UUID serviceTokenId = null;
        ServiceTokenActionRequest serviceTokenActionRequest = null;
        api.createServiceTokenAction()
                .serviceTokenIdPath(serviceTokenId)
                .body(serviceTokenActionRequest).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Unauthorized
     */
    @Test
    public void shouldSee401AfterCreateServiceTokenAction() {
        UUID serviceTokenId = null;
        ServiceTokenActionRequest serviceTokenActionRequest = null;
        api.createServiceTokenAction()
                .serviceTokenIdPath(serviceTokenId)
                .body(serviceTokenActionRequest).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Forbidden
     */
    @Test
    public void shouldSee403AfterCreateServiceTokenAction() {
        UUID serviceTokenId = null;
        ServiceTokenActionRequest serviceTokenActionRequest = null;
        api.createServiceTokenAction()
                .serviceTokenIdPath(serviceTokenId)
                .body(serviceTokenActionRequest).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Not Found
     */
    @Test
    public void shouldSee404AfterCreateServiceTokenAction() {
        UUID serviceTokenId = null;
        ServiceTokenActionRequest serviceTokenActionRequest = null;
        api.createServiceTokenAction()
                .serviceTokenIdPath(serviceTokenId)
                .body(serviceTokenActionRequest).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Deleted Service Token Successfully
     */
    @Test
    public void shouldSee204AfterDeleteServiceTokenByUuid() {
        UUID serviceTokenId = null;
        api.deleteServiceTokenByUuid()
                .serviceTokenIdPath(serviceTokenId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Bad request
     */
    @Test
    public void shouldSee400AfterDeleteServiceTokenByUuid() {
        UUID serviceTokenId = null;
        api.deleteServiceTokenByUuid()
                .serviceTokenIdPath(serviceTokenId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Unauthorized
     */
    @Test
    public void shouldSee401AfterDeleteServiceTokenByUuid() {
        UUID serviceTokenId = null;
        api.deleteServiceTokenByUuid()
                .serviceTokenIdPath(serviceTokenId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Successful operation
     */
    @Test
    public void shouldSee200AfterGetServiceTokenByUuid() {
        UUID serviceTokenId = null;
        api.getServiceTokenByUuid()
                .serviceTokenIdPath(serviceTokenId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Bad request
     */
    @Test
    public void shouldSee400AfterGetServiceTokenByUuid() {
        UUID serviceTokenId = null;
        api.getServiceTokenByUuid()
                .serviceTokenIdPath(serviceTokenId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Forbidden
     */
    @Test
    public void shouldSee403AfterGetServiceTokenByUuid() {
        UUID serviceTokenId = null;
        api.getServiceTokenByUuid()
                .serviceTokenIdPath(serviceTokenId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Internal server error
     */
    @Test
    public void shouldSee500AfterGetServiceTokenByUuid() {
        UUID serviceTokenId = null;
        api.getServiceTokenByUuid()
                .serviceTokenIdPath(serviceTokenId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Successful operation
     */
    @Test
    public void shouldSee200AfterGetServiceTokens() {
        BigDecimal offset = null;
        BigDecimal limit = null;
        api.getServiceTokens().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Forbidden
     */
    @Test
    public void shouldSee403AfterGetServiceTokens() {
        BigDecimal offset = null;
        BigDecimal limit = null;
        api.getServiceTokens().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Successful operation
     */
    @Test
    public void shouldSee200AfterSearchServiceTokens() {
        ServiceTokenSearchRequest serviceTokenSearchRequest = null;
        api.searchServiceTokens()
                .body(serviceTokenSearchRequest).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Bad request
     */
    @Test
    public void shouldSee400AfterSearchServiceTokens() {
        ServiceTokenSearchRequest serviceTokenSearchRequest = null;
        api.searchServiceTokens()
                .body(serviceTokenSearchRequest).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Forbidden
     */
    @Test
    public void shouldSee403AfterSearchServiceTokens() {
        ServiceTokenSearchRequest serviceTokenSearchRequest = null;
        api.searchServiceTokens()
                .body(serviceTokenSearchRequest).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Not Found
     */
    @Test
    public void shouldSee404AfterSearchServiceTokens() {
        ServiceTokenSearchRequest serviceTokenSearchRequest = null;
        api.searchServiceTokens()
                .body(serviceTokenSearchRequest).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Internal server error
     */
    @Test
    public void shouldSee500AfterSearchServiceTokens() {
        ServiceTokenSearchRequest serviceTokenSearchRequest = null;
        api.searchServiceTokens()
                .body(serviceTokenSearchRequest).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Successful operation
     */
    @Test
    public void shouldSee200AfterUpdateServiceTokenByUuid() {
        UUID serviceTokenId = null;
        List<ServiceTokenChangeOperation> serviceTokenChangeOperation = null;
        api.updateServiceTokenByUuid()
                .serviceTokenIdPath(serviceTokenId)
                .body(serviceTokenChangeOperation).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Bad request
     */
    @Test
    public void shouldSee400AfterUpdateServiceTokenByUuid() {
        UUID serviceTokenId = null;
        List<ServiceTokenChangeOperation> serviceTokenChangeOperation = null;
        api.updateServiceTokenByUuid()
                .serviceTokenIdPath(serviceTokenId)
                .body(serviceTokenChangeOperation).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Forbidden
     */
    @Test
    public void shouldSee403AfterUpdateServiceTokenByUuid() {
        UUID serviceTokenId = null;
        List<ServiceTokenChangeOperation> serviceTokenChangeOperation = null;
        api.updateServiceTokenByUuid()
                .serviceTokenIdPath(serviceTokenId)
                .body(serviceTokenChangeOperation).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

}
