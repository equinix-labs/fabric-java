/*
 * Equinix Fabric API v4
 * Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>
 *
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.ApiException;
import com.equinix.openapi.fabric.v4.model.Error;
import com.equinix.openapi.fabric.v4.model.GetRouteFilterRulesResponse;
import com.equinix.openapi.fabric.v4.model.RouteFilterRulesBase;
import com.equinix.openapi.fabric.v4.model.RouteFilterRulesChangeData;
import com.equinix.openapi.fabric.v4.model.RouteFilterRulesChangeDataResponse;
import com.equinix.openapi.fabric.v4.model.RouteFilterRulesData;
import com.equinix.openapi.fabric.v4.model.RouteFilterRulesPatchRequestItem;
import com.equinix.openapi.fabric.v4.model.RouteFilterRulesPostRequest;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.Assert;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RouteFilterRulesApi
 */
@Ignore
public class RouteFilterRulesApiTest extends AbstractTest{

    private final RouteFilterRulesApi api = new RouteFilterRulesApi(generateToken());

    /**
     * Create RFRule
     *
     * This API provides capability to create a Route Filter Rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRouteFilterRuleTest() throws ApiException {
        //
        //String routeFilterId = null;
        //
        //RouteFilterRulesBase routeFilterRulesBase = null;
        //
        //RouteFilterRulesData response = api.createRouteFilterRule(routeFilterId, routeFilterRulesBase);

        // TODO: test validations
    }
    /**
     * Bulk RFRules
     *
     * This API provides capability to create bulk route filter rules
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRouteFilterRulesInBulkTest() throws ApiException {
        //
        //String routeFilterId = null;
        //
        //RouteFilterRulesPostRequest routeFilterRulesPostRequest = null;
        //
        //GetRouteFilterRulesResponse response = api.createRouteFilterRulesInBulk(routeFilterId, routeFilterRulesPostRequest);

        // TODO: test validations
    }
    /**
     * DeleteRFRule
     *
     * This API provides capability to delete a Route Filter Rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRouteFilterRuleByUuidTest() throws ApiException {
        //
        //String routeFilterId = null;
        //
        //String routeFilterRuleId = null;
        //
        //RouteFilterRulesData response = api.deleteRouteFilterRuleByUuid(routeFilterId, routeFilterRuleId);

        // TODO: test validations
    }
    /**
     * GetRFRule By UUID
     *
     * This API provides capability to view a Route Filter Rule by UUID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRouteFilterRuleByUuidTest() throws ApiException {
        //
        //String routeFilterId = null;
        //
        //String routeFilterRuleId = null;
        //
        //RouteFilterRulesData response = api.getRouteFilterRuleByUuid(routeFilterId, routeFilterRuleId);

        // TODO: test validations
    }
    /**
     * Get Change By ID
     *
     * This API provides capability to retrieve a specific Route Filter Rule&#39;s Changes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRouteFilterRuleChangeByUuidTest() throws ApiException {
        //
        //String routeFilterId = null;
        //
        //String routeFilterRuleId = null;
        //
        //UUID changeId = null;
        //
        //RouteFilterRulesChangeData response = api.getRouteFilterRuleChangeByUuid(routeFilterId, routeFilterRuleId, changeId);

        // TODO: test validations
    }
    /**
     * Get All Changes
     *
     * This API provides capability to retrieve all of a Route Filter Rule&#39;s Changes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRouteFilterRuleChangesTest() throws ApiException {
        //
        //String routeFilterId = null;
        //
        //String routeFilterRuleId = null;
        //
        //Integer offset = null;
        //
        //Integer limit = null;
        //
        //RouteFilterRulesChangeDataResponse response = api.getRouteFilterRuleChanges(routeFilterId, routeFilterRuleId, offset, limit);

        // TODO: test validations
    }
    /**
     * GetRFRules
     *
     * This API provides capability to get all Route Filters Rules for Fabric
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRouteFilterRulesTest() throws ApiException {
        //
        //String routeFilterId = null;
        //
        //Integer offset = null;
        //
        //Integer limit = null;
        //
        //GetRouteFilterRulesResponse response = api.getRouteFilterRules(routeFilterId, offset, limit);

        // TODO: test validations
    }
    /**
     * PatchRFilterRule
     *
     * This API provides capability to partially update a Route Filter Rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchRouteFilterRuleByUuidTest() throws ApiException {
        //
        //String routeFilterId = null;
        //
        //String routeFilterRuleId = null;
        //
        //List<RouteFilterRulesPatchRequestItem> routeFilterRulesPatchRequestItem = null;
        //
        //RouteFilterRulesData response = api.patchRouteFilterRuleByUuid(routeFilterId, routeFilterRuleId, routeFilterRulesPatchRequestItem);

        // TODO: test validations
    }
    /**
     * ReplaceRFRule
     *
     * This API provides capability to replace a Route Filter Rule completely
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceRouteFilterRuleByUuidTest() throws ApiException {
        //
        //String routeFilterId = null;
        //
        //String routeFilterRuleId = null;
        //
        //RouteFilterRulesBase routeFilterRulesBase = null;
        //
        //RouteFilterRulesData response = api.replaceRouteFilterRuleByUuid(routeFilterId, routeFilterRuleId, routeFilterRulesBase);

        // TODO: test validations
    }
}
