properties:
  bill:
    type: boolean
    default: false
    description: True if the Virtual Circuit is being billed. Currently, only Virtual Circuits of Fabric VCs (Metal Billed) will be billed. Usage will start the first time the Virtual Circuit becomes active, and will not stop until it is deleted from Metal.
  bill_type:
    type: string
    nullable: true
    description: Fabric Billed if the Virtual Circuit is billed by Fabric. Metal Billed if the Virtual Circuit is billed by Metal. Legacy Virtual Circuits will have a value of nil.
    enum:
    - metal_billed
    - fabric_billed
  description:
    type: string
  id:
    format: uuid
    type: string
  name:
    type: string
  nni_vlan:
    type: integer
  port:
    $ref: './InterconnectionPort.yaml'
  project:
    $ref: './Project.yaml'
  speed:
    description: For Virtual Circuits on shared and dedicated connections, this speed should match the one set on their Interconnection Ports. For Virtual Circuits on
      Fabric VCs (both Metal and Fabric Billed) that have found their corresponding Fabric connection, this is the actual speed of the interconnection that was configured when setting up the interconnection on the Fabric Portal. 
      Details on Fabric VCs are included in the specification as a developer preview and is generally unavailable. Please contact our Support team for more details.
    type: integer
    format: int64
  status:
    type: string
    description: The status of a Virtual Circuit is always 'pending' on creation. The status can turn to 'Waiting on Customer VLAN' if a Metro VLAN was not set yet on the Virtual Circuit and is the last step needed for full activation. For Dedicated interconnections, as long as the Dedicated Port has been associated 
      to the Virtual Circuit and a NNI VNID has been set, it will turn to 'waiting_on_customer_vlan'.
      For Fabric VCs, it will only change to 'waiting_on_customer_vlan' once the corresponding Fabric connection has been found on the Fabric side. If the Fabric service token associated with the Virtual Circuit hasn't been redeemed on Fabric within the expiry time, it will change to an `expired` status.
      Once a Metro VLAN is set on the Virtual Circuit (which for Fabric VCs, can be set on creation of a Fabric VC) and the necessary set up is done, it will turn into 'Activating' status as it tries to activate the Virtual Circuit. Once the Virtual Circuit fully activates and is configured on the switch,
      it will turn to staus 'active'. For Fabric VCs (Metal Billed), we will start billing the moment the status of the Virtual Circuit turns to 'active'. If there are any changes to the VLAN after the Virtual Circuit is in an 'active' status, the status will show 'changing_vlan' if a new VLAN has been provided,
      or 'deactivating' if we are removing the VLAN. When a deletion request is issued for the Virtual Circuit, it will move to a 'deleting' status, and we will immediately unconfigure the switch for the Virtual Circuit and issue a deletion on any associated Fabric connections. Any associated Metro VLANs on the 
      virtual circuit will also be unassociated after the switch has been successfully unconfigured. If there are any associated Fabric connections, we will only fully delete the Virtual Circuit once we have checked that the Fabric connection was fully deprovisioned on Fabric.
    # NOTE: Any new additions to the enum will affect users using generated SDKs.
    enum: 
    - pending
    - waiting_on_customer_vlan
    - activating
    - changing_vlan
    - deactivating
    - deleting
    - active
    - expired
    - activation_failed
    - changing_vlan_failed
    - deactivation_failed
    - delete_failed
    - configure_fabric_routing_protocols
  provider_connection_id:
    type: string
    example: dxcon-fggxx63k
    description: This field is relevant if using the `shared_port_vlan_to_csp` interconnection type. Once activated on the CSP, this field should contain the resource name that the virtual circuit is connected to on the provider's end.
  tags:
    items:
      type: string
    type: array
  type:
    type: string
    enum:
    - vlan
  virtual_network:
    $ref: './Href.yaml'
  vnid:
    type: integer
  created_at:
    format: date-time
    type: string
  updated_at:
    format: date-time
    type: string
type: object
